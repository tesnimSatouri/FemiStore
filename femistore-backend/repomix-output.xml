This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitattributes
.gitignore
.mvn/wrapper/maven-wrapper.properties
mvnw
mvnw.cmd
pom.xml
src/main/java/com/esprit/twin/gestion_avis/controller/Aviscontroller.java
src/main/java/com/esprit/twin/gestion_avis/entity/Avis.java
src/main/java/com/esprit/twin/gestion_avis/GestionAvisApplication.java
src/main/java/com/esprit/twin/gestion_avis/repository/Avisrepository.java
src/main/java/com/esprit/twin/gestion_avis/service/Avisservice.java
src/main/java/com/esprit/twin/gestion_avis/service/EmailService.java
src/main/java/com/esprit/twin/gestion_avis/service/Iserviceimpl.java
src/main/resources/application.properties
src/test/java/com/esprit/twin/gestion_avis/GestionAvisApplicationTests.java
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path=".mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
</file>

<file path="mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="src/main/java/com/esprit/twin/gestion_avis/entity/Avis.java">
package com.esprit.twin.gestion_avis.entity;


import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDate;

@Entity
@Table(name = "Avis")

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Avis {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")

    private Long id;
    @Column(name = "userid")

    private Long userId;
    @Column(name = "productid")

    private Long productId;
    @Column(name = "note")

    private int note;
    @Column(name = "commentaire")

    private String commentaire;
    @Column(name = "date")

    private LocalDate date;
}
</file>

<file path="src/test/java/com/esprit/twin/gestion_avis/GestionAvisApplicationTests.java">
package com.esprit.twin.gestion_avis;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class GestionAvisApplicationTests {

    @Test
    void contextLoads() {
    }

}
</file>

<file path=".gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.2</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.esprit.twin</groupId>
    <artifactId>Gestion_avis</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Gestion_avis</name>
    <description>Gestion_avis</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>17</java.version>
        <spring-cloud.version>2024.0.0</spring-cloud.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>2.3.232</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
</file>

<file path="src/main/java/com/esprit/twin/gestion_avis/GestionAvisApplication.java">
package com.esprit.twin.gestion_avis;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

@EnableDiscoveryClient
@SpringBootApplication
public class GestionAvisApplication {

    public static void main(String[] args) {
        SpringApplication.run(GestionAvisApplication.class, args);
    }

}
</file>

<file path="src/main/java/com/esprit/twin/gestion_avis/service/EmailService.java">
package com.esprit.twin.gestion_avis.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.MailException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
@Slf4j
public class EmailService {

    private final JavaMailSender mailSender;

    @Value("${avis.alert.recipient-email}")
    private String recipientEmail;

    @Value("${avis.alert.from-email}")
    private String fromEmail;


    public void sendAverageRatingDropAlert(Long productId, Double oldAverage, double newAverage, double criticalThreshold, double significantDrop) {

        if (recipientEmail == null || recipientEmail.trim().isEmpty()) {
            log.error("L'email du destinataire de l'alerte ('avis.alert.recipient-email') n'est pas configuré.");
            return;
        }

        // --- MODIFICATION : Sujet plus neutre ---
        String subject = String.format("Alerte : Note moyenne produit ID %d - Attention requise", productId);

        StringBuilder messageText = new StringBuilder();
        // --- MODIFICATION : Introduction plus neutre ---
        messageText.append(String.format("Attention : La note moyenne pour le produit ID %d a déclenché une alerte.\n\n", productId));

        messageText.append(String.format("Nouvelle note moyenne : %.2f\n", newAverage));
        if (oldAverage != null) {
            messageText.append(String.format("Ancienne note moyenne : %.2f\n", oldAverage));
            // --- MODIFICATION : Afficher la baisse seulement si elle est réelle et positive ---
            double difference = oldAverage - newAverage;
            if (difference > 0) { // N'afficher que si c'est une vraie baisse
                messageText.append(String.format("Baisse : %.2f points\n", difference));
            } else if (difference < 0) { // Optionnel : Indiquer l'augmentation
                messageText.append(String.format("Augmentation : %.2f points\n", -difference)); // Afficher la valeur positive de l'augmentation
            }
            // Si difference == 0, on n'affiche rien sur la variation.
        } else {
            messageText.append("C'était le premier avis pour ce produit.\n");
        }

        // La section "Raisons" reste la même, elle explique la vraie cause
        messageText.append("\nRaisons de cette alerte :\n");
        if (newAverage < criticalThreshold) {
            messageText.append(String.format("- La note moyenne (%.2f) est passée sous le seuil d'alerte critique de %.1f.\n", newAverage, criticalThreshold));
        }
        // Vérifier la condition de baisse significative ici aussi pour l'affichage
        if (oldAverage != null && (oldAverage - newAverage) >= significantDrop) {
            // --- MODIFICATION : Message de baisse plus précis ---
            messageText.append(String.format("- Une baisse de %.2f points a été détectée .\n", (oldAverage - newAverage)));
        }

        messageText.append("\nVeuillez examiner les derniers avis pour ce produit.");


        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(recipientEmail);
        message.setSubject(subject); // Utilise le nouveau sujet
        message.setText(messageText.toString());

        try {
            mailSender.send(message);
            log.info("Alerte e-mail envoyée avec succès à {} pour le produit {}", recipientEmail, productId);
        } catch (MailException e) {
            log.error("Erreur lors de l'envoi de l'alerte e-mail pour le produit {} à {}", productId, recipientEmail, e);
        }
    }
}
</file>

<file path="src/main/java/com/esprit/twin/gestion_avis/repository/Avisrepository.java">
package com.esprit.twin.gestion_avis.repository;

import com.esprit.twin.gestion_avis.entity.Avis;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface Avisrepository extends JpaRepository<Avis, Long> {
    @Query("SELECT AVG(r.note) FROM Avis r WHERE r.productId = ?1")
    Double findAverageRatingByProductId(Long productId);
    @Query("SELECT a FROM Avis a WHERE a.note >= :minNote AND a.note <= :maxNote")
    List<Avis> findByNoteRange(@Param("minNote") int minNote, @Param("maxNote") int maxNote);

    @Query("SELECT a FROM Avis a WHERE a.note = (SELECT MAX(a2.note) FROM Avis a2)")
    List<Avis> findReviewsWithMaxNote();

    @Query("SELECT a FROM Avis a WHERE a.note = (SELECT MIN(a2.note) FROM Avis a2)")
    List<Avis> findReviewsWithMinNote();

}
</file>

<file path="src/main/java/com/esprit/twin/gestion_avis/service/Iserviceimpl.java">
// Fichier: src/main/java/com/esprit/twin/gestion_avis/service/Iserviceimpl.java
package com.esprit.twin.gestion_avis.service;

import com.esprit.twin.gestion_avis.entity.Avis;

import java.util.List;
import java.util.Map;

public interface Iserviceimpl {
     List<Avis> getAllReviews();
     // Signature originale
     Avis addReview(Avis review);
     void deleteReview(Long id);
     Double getAverageRating(Long productId);
     // Signature originale
     Avis updateReview(Long id, Avis a);
     List<Avis> getReviewsByNoteRange(int minNote, int maxNote);
     Map<String, List<Avis>> categorizeReviewsByPositivity(int positivityThreshold);
     List<Avis> getReviewsWithHighestNote();
     List<Avis> getReviewsWithLowestNote();
}
</file>

<file path="src/main/resources/application.properties">
# --- Gestion_avis Service Configuration (Gestion_avis/src/main/resources/application.properties) ---

# Service Info
# IMPORTANT: This name MUST match what the Gateway uses in lb:// (e.g., GESTION-AVIS)
spring.application.name=GESTION-AVIS
server.port=8089

# H2 Database Console
spring.h2.console.enabled=true
spring.h2.console.path=/h2
spring.h2.console.settings.web-allow-others=true

# Eureka Client Config (Gestion_avis registers itself with Eureka)
eureka.client.enabled=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true

# Datasource Configuration (Using H2 in-memory)
spring.datasource.url=jdbc:h2:mem:reviewdb
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.hibernate.ddl-auto=create

# Disable Spring Cloud Config Client (if you are not using a Config Server)
spring.cloud.config.enabled=false

# Mail Configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=walaammar020@gmail.com
# Consider using environment variables or secrets management for passwords in real apps
spring.mail.password=nhgj gjwf zfwj doxj
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Alerte Configuration
avis.alert.critical-threshold=3.0
avis.alert.significant-drop=0.5
avis.alert.recipient-email=wala.ammar@esprit.tn
avis.alert.from-email=walaammar020@gmail.com
</file>

<file path="src/main/java/com/esprit/twin/gestion_avis/controller/Aviscontroller.java">
package com.esprit.twin.gestion_avis.controller;

import com.esprit.twin.gestion_avis.entity.Avis;
import com.esprit.twin.gestion_avis.service.Avisservice;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/avis")
@RequiredArgsConstructor
public class Aviscontroller {
    private final Avisservice avisservice;

    @GetMapping
    public List<Avis> getAllReviews() {
        return avisservice.getAllReviews();
    }

    @PostMapping
    public Avis addReview(@RequestBody Avis a) {
        return avisservice.addReview(a);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteReview(@PathVariable Long id) {
        avisservice.deleteReview(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/average/{productId}")
    public Double getAverageRating(@PathVariable Long productId) {
        return avisservice.getAverageRating(productId);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Avis> updateReview(@PathVariable Long id, @RequestBody Avis a) {
        Avis updatedReview = avisservice.updateReview(id, a);
        return ResponseEntity.ok(updatedReview);
    }

    @GetMapping("/filter")
    public List<Avis> getReviewsByNoteRange(@RequestParam int min, @RequestParam int max) {
        return avisservice.getReviewsByNoteRange(min, max);
    }

    @GetMapping("/categorized")
    public ResponseEntity<Map<String, List<Avis>>> getCategorizedReviews(
            @RequestParam(defaultValue = "3") int threshold) {

        if (threshold < 0) {
            return ResponseEntity.badRequest().build();
        }
        Map<String, List<Avis>> categorizedReviews = avisservice.categorizeReviewsByPositivity(threshold);
        return ResponseEntity.ok(categorizedReviews);
    }

    @GetMapping("/highest-rated")
    public ResponseEntity<List<Avis>> getHighestRatedReviews() {
        List<Avis> reviews = avisservice.getReviewsWithHighestNote();
        return ResponseEntity.ok(reviews);
    }

    @GetMapping("/lowest-rated")
    public ResponseEntity<List<Avis>> getLowestRatedReviews() {
        List<Avis> reviews = avisservice.getReviewsWithLowestNote();
        return ResponseEntity.ok(reviews);
    }

}
</file>

<file path="src/main/java/com/esprit/twin/gestion_avis/service/Avisservice.java">
package com.esprit.twin.gestion_avis.service;

import com.esprit.twin.gestion_avis.entity.Avis;
import com.esprit.twin.gestion_avis.repository.Avisrepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class Avisservice implements Iserviceimpl {

    private final Avisrepository avisrepository;
    private final EmailService emailService;

    // Injection des valeurs de configuration
    @Value("${avis.alert.critical-threshold}")
    private double criticalThreshold;

    @Value("${avis.alert.significant-drop}")
    private double significantDrop;

    @Override
    public List<Avis> getAllReviews() {
        return avisrepository.findAll();
    }

    @Override
    @Transactional
    // Signature originale
    public Avis addReview(Avis a) {
        if (a.getProductId() == null) {
            log.warn("Tentative d'ajout d'un avis sans productId. Avis : {}", a);
            throw new IllegalArgumentException("L'ID du produit ne peut pas être nul pour un avis.");
        }
        Long productId = a.getProductId();
        Double oldAverage = avisrepository.findAverageRatingByProductId(productId);
        log.debug("Produit ID {}: Ancienne moyenne = {}", productId, oldAverage);

        Avis savedAvis = avisrepository.save(a);
        log.info("Avis ajouté avec ID : {} pour Produit ID : {}", savedAvis.getId(), productId);

        Double newAverage = avisrepository.findAverageRatingByProductId(productId);
        log.debug("Produit ID {}: Nouvelle moyenne = {}", productId, newAverage);

        checkAndSendAlert(productId, oldAverage, newAverage);

        return savedAvis;
    }
    @Override
    @Transactional
    public void deleteReview(Long id) {
        avisrepository.deleteById(id);
        log.info("Avis supprimé avec ID : {}", id);
    }

    @Override
    public Double getAverageRating(Long productId) {
        return avisrepository.findAverageRatingByProductId(productId);
    }

    @Override
    @Transactional
    public Avis updateReview(Long id, Avis a) {
        Optional<Avis> existingReview = avisrepository.findById(id);
        if (existingReview.isPresent()) {
            Avis updatedReview = existingReview.get();
            Long productId = updatedReview.getProductId();
            Double oldAverageBeforeUpdate = null;
            boolean productIdChanged = !productId.equals(a.getProductId());

            if (!productIdChanged) {
                oldAverageBeforeUpdate = avisrepository.findAverageRatingByProductId(productId);
                log.debug("[UPDATE] Produit ID {}: Moyenne avant mise à jour = {}", productId, oldAverageBeforeUpdate);
            } else {
                log.warn("[UPDATE] Le ProductID a changé pour l'avis ID {}. La logique d'alerte simple ne s'applique pas directement.", id);
            }
            updatedReview.setNote(a.getNote());
            updatedReview.setCommentaire(a.getCommentaire());
            updatedReview.setDate(a.getDate());
            updatedReview.setProductId(a.getProductId());
            updatedReview.setUserId(a.getUserId());
            Avis savedUpdate = avisrepository.save(updatedReview);

            if (!productIdChanged && productId != null) {
                Double newAverageAfterUpdate = avisrepository.findAverageRatingByProductId(productId);
                log.debug("[UPDATE] Produit ID {}: Moyenne après mise à jour = {}", productId, newAverageAfterUpdate);
                checkAndSendAlert(productId, oldAverageBeforeUpdate, newAverageAfterUpdate);
            }

            return savedUpdate;
        } else {
            log.error("Tentative de mise à jour d'un avis inexistant. ID: {}", id);
            throw new RuntimeException("Review not found with id: " + id);
        }
    }

    private void checkAndSendAlert(Long productId, Double oldAverage, Double newAverage) {
        if (newAverage == null) {
            log.warn("checkAndSendAlert appelée avec newAverage null pour produit ID {}", productId);
            return;
        }

        boolean alertTriggered = false;
        if (newAverage < criticalThreshold) {
            log.info("Produit ID {}: Alerte potentielle (check) - Nouvelle moyenne ({}) < Seuil critique ({})", productId, String.format("%.2f", newAverage), criticalThreshold);
            alertTriggered = true;
        }
        if (oldAverage != null && (oldAverage - newAverage) >= significantDrop) {
            log.info("Produit ID {}: Alerte potentielle (check) - Baisse ({}) >= Baisse significative ({})", productId, String.format("%.2f", (oldAverage - newAverage)), significantDrop);
            alertTriggered = true;
        }

        if (alertTriggered) {
            // L'email du destinataire sera géré par EmailService
            log.warn("Déclenchement de l'alerte e-mail pour le produit ID {}", productId);
            // Appel à EmailService sans passer le destinataire
            emailService.sendAverageRatingDropAlert(productId, oldAverage, newAverage, criticalThreshold, significantDrop);
        }
    }


    @Override
    public List<Avis> getReviewsByNoteRange(int minNote, int maxNote) {
        if (minNote > maxNote) {
            throw new IllegalArgumentException("minNote cannot be greater than maxNote");
        }
        return avisrepository.findByNoteRange(minNote, maxNote);
    }

    @Override
    public Map<String, List<Avis>> categorizeReviewsByPositivity(int positivityThreshold) {
        List<Avis> allReviews = avisrepository.findAll();
        Map<Boolean, List<Avis>> partitionedReviews = allReviews.stream()
                .collect(Collectors.partitioningBy(avis -> avis.getNote() >= positivityThreshold));

        Map<String, List<Avis>> categorizedReviews = new HashMap<>();
        categorizedReviews.put("positive", partitionedReviews.get(true));
        categorizedReviews.put("negative", partitionedReviews.get(false));

        return categorizedReviews;
    }

    @Override
    public List<Avis> getReviewsWithHighestNote() {
        return avisrepository.findReviewsWithMaxNote();
    }

    @Override
    public List<Avis> getReviewsWithLowestNote() {
        return avisrepository.findReviewsWithMinNote();
    }
}
</file>

</files>
