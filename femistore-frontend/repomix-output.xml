This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.editorconfig
.gitignore
angular.json
package.json
README.md
src/app/app-routing.module.ts
src/app/app.component.html
src/app/app.component.spec.ts
src/app/app.component.ts
src/app/app.module.ts
src/app/features/avis/components/avis-form/avis-form.component.css
src/app/features/avis/components/avis-form/avis-form.component.html
src/app/features/avis/components/avis-form/avis-form.component.spec.ts
src/app/features/avis/components/avis-form/avis-form.component.ts
src/app/features/avis/components/avis-list/avis-list.component.css
src/app/features/avis/components/avis-list/avis-list.component.html
src/app/features/avis/components/avis-list/avis-list.component.spec.ts
src/app/features/avis/components/avis-list/avis-list.component.ts
src/app/features/avis/models/avis.model.ts
src/app/features/avis/models/page.model.ts
src/app/features/avis/pages/admin-review-search/admin-review-search.component.css
src/app/features/avis/pages/admin-review-search/admin-review-search.component.html
src/app/features/avis/pages/admin-review-search/admin-review-search.component.spec.ts
src/app/features/avis/pages/admin-review-search/admin-review-search.component.ts
src/app/features/avis/pages/product-reviews/product-reviews.component.css
src/app/features/avis/pages/product-reviews/product-reviews.component.html
src/app/features/avis/pages/product-reviews/product-reviews.component.spec.ts
src/app/features/avis/pages/product-reviews/product-reviews.component.ts
src/app/features/avis/services/avis.service.spec.ts
src/app/features/avis/services/avis.service.ts
src/app/features/category/category-routing.module.ts
src/app/features/category/category.module.ts
src/app/features/category/components/category-form/category-form.component.css
src/app/features/category/components/category-form/category-form.component.html
src/app/features/category/components/category-form/category-form.component.spec.ts
src/app/features/category/components/category-form/category-form.component.ts
src/app/features/category/components/category-list/category-list.component.css
src/app/features/category/components/category-list/category-list.component.html
src/app/features/category/components/category-list/category-list.component.spec.ts
src/app/features/category/components/category-list/category-list.component.ts
src/app/features/category/models/category.ts
src/app/features/category/models/page.ts
src/app/features/category/models/user.ts
src/app/features/category/services/auth.service.spec.ts
src/app/features/category/services/auth.service.ts
src/app/features/category/services/category.service.spec.ts
src/app/features/category/services/category.service.ts
src/app/features/category/services/user.service.spec.ts
src/app/features/category/services/user.service.ts
src/app/features/commande/commande-routing.module.ts
src/app/features/commande/commande.module.ts
src/app/features/commande/components/order-form/order-form.component.css
src/app/features/commande/components/order-form/order-form.component.html
src/app/features/commande/components/order-form/order-form.component.spec.ts
src/app/features/commande/components/order-form/order-form.component.ts
src/app/features/commande/components/order-list/order-list.component.css
src/app/features/commande/components/order-list/order-list.component.html
src/app/features/commande/components/order-list/order-list.component.spec.ts
src/app/features/commande/components/order-list/order-list.component.ts
src/app/features/commande/models/order-item.ts
src/app/features/commande/models/order.ts
src/app/features/commande/services/order.service.spec.ts
src/app/features/commande/services/order.service.ts
src/app/features/inventory/components/low-stock-alert/low-stock-alert.component.html
src/app/features/inventory/components/low-stock-alert/low-stock-alert.component.spec.ts
src/app/features/inventory/components/low-stock-alert/low-stock-alert.component.ts
src/app/features/inventory/components/stock-detail/stock-detail.component.html
src/app/features/inventory/components/stock-detail/stock-detail.component.spec.ts
src/app/features/inventory/components/stock-detail/stock-detail.component.ts
src/app/features/inventory/components/stock-form/stock-form.component.html
src/app/features/inventory/components/stock-form/stock-form.component.spec.ts
src/app/features/inventory/components/stock-form/stock-form.component.ts
src/app/features/inventory/components/stock-history/stock-history.component.css
src/app/features/inventory/components/stock-history/stock-history.component.html
src/app/features/inventory/components/stock-history/stock-history.component.spec.ts
src/app/features/inventory/components/stock-history/stock-history.component.ts
src/app/features/inventory/components/stock-list/stock-list.component.html
src/app/features/inventory/components/stock-list/stock-list.component.spec.ts
src/app/features/inventory/components/stock-list/stock-list.component.ts
src/app/features/inventory/components/stock-trend/stock-trend.component.html
src/app/features/inventory/components/stock-trend/stock-trend.component.spec.ts
src/app/features/inventory/components/stock-trend/stock-trend.component.ts
src/app/features/inventory/inventory-routing.module.ts
src/app/features/inventory/inventory-theme.css
src/app/features/inventory/inventory.module.ts
src/app/features/inventory/models/stock.model.ts
src/app/features/inventory/services/stock.service.spec.ts
src/app/features/inventory/services/stock.service.ts
src/app/features/products/components/product-detail/product-detail.component.html
src/app/features/products/components/product-detail/product-detail.component.spec.ts
src/app/features/products/components/product-detail/product-detail.component.ts
src/app/features/products/components/product-form/product-form.component.css
src/app/features/products/components/product-form/product-form.component.html
src/app/features/products/components/product-form/product-form.component.spec.ts
src/app/features/products/components/product-form/product-form.component.ts
src/app/features/products/components/product-list/product-list.component.css
src/app/features/products/components/product-list/product-list.component.html
src/app/features/products/components/product-list/product-list.component.spec.ts
src/app/features/products/components/product-list/product-list.component.ts
src/app/features/products/models/product.model.ts
src/app/features/products/products-routing.module.ts
src/app/features/products/products.module.ts
src/app/features/products/services/product.service.spec.ts
src/app/features/products/services/product.service.ts
src/app/features/user/components/login/login.component.html
src/app/features/user/components/login/login.component.spec.ts
src/app/features/user/components/login/login.component.ts
src/app/features/user/components/profile/profile.component.css
src/app/features/user/components/profile/profile.component.html
src/app/features/user/components/profile/profile.component.spec.ts
src/app/features/user/components/profile/profile.component.ts
src/app/features/user/components/register/register.component.html
src/app/features/user/components/register/register.component.spec.ts
src/app/features/user/components/register/register.component.ts
src/app/features/user/components/user-list/user-list.component.css
src/app/features/user/components/user-list/user-list.component.html
src/app/features/user/components/user-list/user-list.component.spec.ts
src/app/features/user/components/user-list/user-list.component.ts
src/app/features/user/models/category.ts
src/app/features/user/models/page.ts
src/app/features/user/models/user.ts
src/app/features/user/services/auth.service.spec.ts
src/app/features/user/services/auth.service.ts
src/app/features/user/services/user.service.spec.ts
src/app/features/user/services/user.service.ts
src/app/features/user/user-routing.module.ts
src/app/features/user/user.module.ts
src/app/shared/navbar/navbar.component.css
src/app/shared/navbar/navbar.component.html
src/app/shared/navbar/navbar.component.spec.ts
src/app/shared/navbar/navbar.component.ts
src/app/shared/pipes/abs.pipe.spec.ts
src/app/shared/pipes/abs.pipe.ts
src/app/shared/shared.module.ts
src/environments/environment.prod.ts
src/environments/environment.ts
src/index.html
src/main.ts
src/styles.css
tsconfig.app.json
tsconfig.json
tsconfig.spec.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false
</file>

<file path=".gitignore">
# See http://help.github.com/ignore-files/ for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db
</file>

<file path="angular.json">
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "femistore-frontend": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/femistore-frontend",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.css",
              "node_modules/bootstrap/dist/css/bootstrap.min.css"
            ],
            "scripts": ["node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "buildOptimizer": false,
              "optimization": false,
              "vendorChunk": true,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "browserTarget": "femistore-frontend:build:production"
            },
            "development": {
              "browserTarget": "femistore-frontend:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "browserTarget": "femistore-frontend:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.css",
              "node_modules/bootstrap/dist/css/bootstrap.min.css"
            ],
            "scripts": ["node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"]
          }
        }
      }
    }
  },
  "cli": {
    "analytics": "27e1a951-6e23-4f2f-b89d-855bdd7bd3f8"
  }
}
</file>

<file path="package.json">
{
  "name": "femistore-frontend",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^16.2.12",
    "@angular/cdk": "^16.2.14",
    "@angular/common": "^16.2.0",
    "@angular/compiler": "^16.2.0",
    "@angular/core": "^16.2.0",
    "@angular/forms": "^16.2.0",
    "@angular/material": "^16.2.14",
    "@angular/platform-browser": "^16.2.0",
    "@angular/platform-browser-dynamic": "^16.2.0",
    "@angular/router": "^16.2.0",
    "bootstrap": "^5.3.5",
    "bootstrap-icons": "^1.11.3",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.13.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^16.2.16",
    "@angular/cli": "^16.2.15",
    "@angular/compiler-cli": "^16.2.0",
    "@types/jasmine": "~4.3.0",
    "jasmine-core": "~4.6.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.1.3"
  }
}
</file>

<file path="README.md">
# FemistoreFrontend

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 16.2.15.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The application will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.
</file>

<file path="src/app/app-routing.module.ts">
import { NgModule } from "@angular/core"
import { RouterModule, type Routes } from "@angular/router"
import { AdminReviewSearchComponent } from "./features/avis/pages/admin-review-search/admin-review-search.component"
import { ProductReviewsComponent } from "./features/avis/pages/product-reviews/product-reviews.component"

const routes: Routes = [
  { path: "", redirectTo: "/inventory", pathMatch: "full" },
  {
    path: "inventory",
    loadChildren: () => import("./features/inventory/inventory.module").then((m) => m.InventoryModule),
  },
  { path: 'products', loadChildren: () => import('./features/products/products.module').then(m => m.ProductsModule) },
  { path: 'products', loadChildren: () => import('./features/products/products.module').then(m => m.ProductsModule) },
  {path:'categoris', loadChildren: () => import('./features/category/category.module').then(m => m.CategorisModule)},
  {path:'users', loadChildren: () => import('./features/user/user.module').then(m => m.UserModule)},
  { path: 'commande', loadChildren: () => import('./features/commande/commande.module').then(m => m.commandesModule) },

  { path: 'products/:productId/reviews', component: ProductReviewsComponent },
  {path: 'admin/reviews', component: AdminReviewSearchComponent},
  
  { path: "**", redirectTo: "/inventory" },
]

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule {}
</file>

<file path="src/app/app.component.html">
<app-navbar></app-navbar>
<router-outlet></router-outlet>
</file>

<file path="src/app/app.component.spec.ts">
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(() => TestBed.configureTestingModule({
    imports: [RouterTestingModule],
    declarations: [AppComponent]
  }));

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'femistore-frontend'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('femistore-frontend');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('femistore-frontend app is running!');
  });
});
</file>

<file path="src/app/app.component.ts">
import { Component, OnInit } from '@angular/core';
import { AuthService } from '../app/features/user/services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  title = 'FemiStore - Fashion Categories';
  isLoggedIn: boolean = false;

  constructor(private authService: AuthService, private router: Router) {}

  ngOnInit(): void {
    this.authService.getLoggedInStatus().subscribe(status => {
      this.isLoggedIn = status;
    });
  }

  logout(): void {
    this.authService.logout();
    this.router.navigate(['/login']);
  }
}
</file>

<file path="src/app/app.module.ts">
import { NgModule } from "@angular/core"
import { BrowserModule } from "@angular/platform-browser"
import { HttpClientModule } from "@angular/common/http"

import { AppRoutingModule } from "./app-routing.module"
import { AppComponent } from "./app.component";
import { AbsPipe } from './shared/pipes/abs.pipe'
import { FormsModule, ReactiveFormsModule } from "@angular/forms";
import { BrowserAnimationsModule } from "@angular/platform-browser/animations";
import { MatToolbarModule } from "@angular/material/toolbar";
import { MatTableModule } from "@angular/material/table";
import { MatPaginatorModule } from "@angular/material/paginator";
import { MatFormFieldModule } from "@angular/material/form-field";
import { MatInputModule } from "@angular/material/input";
import { MatButtonModule } from "@angular/material/button";
import { MatSelectModule } from "@angular/material/select";
import { MatIconModule } from "@angular/material/icon";
import { NavbarComponent } from './shared/navbar/navbar.component';
import { AvisListComponent } from "./features/avis/components/avis-list/avis-list.component";
import { AvisFormComponent } from "./features/avis/components/avis-form/avis-form.component";
import { ProductReviewsComponent } from "./features/avis/pages/product-reviews/product-reviews.component";
import { AdminReviewSearchComponent } from "./features/avis/pages/admin-review-search/admin-review-search.component";

@NgModule({
  declarations: [AppComponent, 
    AbsPipe, 
    NavbarComponent, 
    AvisListComponent,
    AvisFormComponent,
    ProductReviewsComponent,
    AdminReviewSearchComponent],
  imports: [BrowserModule,
    HttpClientModule,
    FormsModule,
    ReactiveFormsModule,
    BrowserAnimationsModule,
    MatToolbarModule,
    MatTableModule,
    MatPaginatorModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatSelectModule,
    MatIconModule, // Ajouté ici
    AppRoutingModule],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
</file>

<file path="src/app/features/avis/components/avis-form/avis-form.component.css">
/* Réutiliser les variables si définies globalement ou dans :host */
/* Assurez-vous que ces variables sont accessibles */
:host { /* Ou :root si dans un fichier global */
    --pink-primary: #E91E63;
    --pink-light: #FCE4EC;
    --text-dark: #333;
    --text-light: #666;
    --border-color: #ccc; /* Un gris plus neutre pour les bordures d'input */
    --error-color: #D32F2F; /* Rouge standard pour les erreurs */
    --input-background: #fff;
    --button-text-color: #fff;
    --secondary-button-bg: #f4f4f4;
    --secondary-button-text: #555;
    --secondary-button-border: #ddd;
  }
  
  /* Conteneur principal du formulaire */
  .avis-form-container { /* Ajoutez cette classe à la balise <form> */
    background-color: var(--input-background);
    padding: 20px;
    border-radius: 8px;
    /* Optionnel: Ajouter une légère bordure rose pâle */
    /* border: 1px solid var(--pink-light); */
    /* Optionnel: Ombre légère */
    /* box-shadow: 0 1px 3px rgba(0,0,0,0.05); */
    margin-top: 20px; /* Espace par rapport au titre/séparateur au-dessus */
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  
  /* Titre du formulaire */
  .avis-form-container h3 {
    color: var(--pink-primary);
    font-size: 1.6em;
    margin-bottom: 25px;
    font-weight: 600;
    text-align: center; /* Centrer le titre peut être sympa */
    padding-bottom: 10px;
    border-bottom: 1px solid var(--pink-light);
  }
  
  /* Style pour chaque groupe de champ (label + input + erreur) */
  .form-group { /* Ajoutez cette classe à chaque div contenant label/input/erreur */
    margin-bottom: 18px;
  }
  
  /* Labels */
  .form-group label {
    display: block; /* Label au-dessus de l'input */
    margin-bottom: 6px;
    color: var(--text-dark);
    font-weight: 500; /* Un peu plus de poids */
    font-size: 0.95em;
  }
  
  /* Inputs (text, number) et Textarea */
  .form-group input[type="number"],
  .form-group input[type="text"], /* Au cas où vous en ajouteriez */
  .form-group textarea {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    font-size: 1em;
    color: var(--text-dark);
    box-sizing: border-box; /* Inclut padding/border dans la largeur/hauteur */
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  /* Style spécifique pour textarea */
  .form-group textarea {
    resize: vertical; /* Permet le redimensionnement vertical */
    min-height: 100px; /* Hauteur minimale */
    font-family: inherit; /* Hérite la police du reste du formulaire */
  }
  
  /* Focus sur les inputs/textarea */
  .form-group input[type="number"]:focus,
  .form-group input[type="text"]:focus,
  .form-group textarea:focus {
    border-color: var(--pink-primary); /* Bordure rose au focus */
    outline: none; /* Supprime l'outline par défaut */
    box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.15); /* Ombre portée rose pâle discrète */
  }
  
  /* Style pour les inputs en lecture seule (ex: productId) */
  .form-group input[readonly] {
    background-color: #f8f8f8; /* Fond légèrement grisé */
    cursor: not-allowed; /* Curseur indiquant non modifiable */
    border-color: #e0e0e0;
  }
  
  /* Messages d'erreur de validation */
  .error-message { /* Ajoutez cette classe aux divs *ngIf pour les erreurs */
    color: var(--error-color);
    font-size: 0.85em;
    margin-top: 5px;
    /* padding-left: 5px; */ /* Petit décalage optionnel */
  }
  
  /* Conteneur pour les boutons (optionnel mais aide à l'alignement) */
  .form-actions { /* Ajoutez un div autour des boutons avec cette classe */
    margin-top: 25px;
    display: flex;
    gap: 10px; /* Espace entre les boutons */
    justify-content: flex-start; /* Ou center, flex-end */
  }
  
  /* Style général des boutons */
  .avis-form-container button {
    padding: 10px 20px;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 500;
    transition: background-color 0.3s ease, opacity 0.3s ease;
    text-transform: uppercase; /* Lettres capitales pour les boutons */
    letter-spacing: 0.5px;
  }
  
  /* Bouton principal (Submit) */
  .avis-form-container button[type="submit"] {
    background-color: var(--pink-primary);
    color: var(--button-text-color);
  }
  
  .avis-form-container button[type="submit"]:hover:not(:disabled) {
    background-color: #C2185B; /* Rose un peu plus foncé au survol */
  }
  
  /* Bouton secondaire (Annuler l'édition) */
  .avis-form-container button.button-secondary { /* Ajoutez la classe "button-secondary" au bouton Annuler */
    background-color: var(--secondary-button-bg);
    color: var(--secondary-button-text);
    border: 1px solid var(--secondary-button-border);
  }
  
  .avis-form-container button.button-secondary:hover {
    background-color: #e9e9e9; /* Légèrement plus foncé au survol */
  }
  
  /* Style pour les boutons désactivés */
  .avis-form-container button:disabled {
    background-color: #e0e0e0;
    color: #a0a0a0;
    cursor: not-allowed;
    opacity: 0.7;
  }
</file>

<file path="src/app/features/avis/components/avis-form/avis-form.component.html">
<h3>{{ isEditMode ? 'Modifier l\'avis' : 'Ajouter un nouvel avis' }}</h3>
<!-- Ajoutez la classe au formulaire -->
<form [formGroup]="avisForm" (ngSubmit)="onSubmit()" class="avis-form-container">
  <!-- Champ caché pour l'ID en mode édition -->
  <input type="hidden" formControlName="id">

  <!-- Ajoutez la classe .form-group à chaque div de champ -->
  <div class="form-group">
    <label for="userId">ID Utilisateur:</label>
    <input type="number" id="userId" formControlName="userId">
    <!-- Ajoutez la classe .error-message à la div d'erreur -->
    <div *ngIf="avisForm.controls['userId'].invalid && avisForm.controls['userId'].touched" class="error-message">
      User ID requis.
    </div>
  </div>

  <div class="form-group">
    <label for="productId">ID Produit:</label>
    <input type="number" id="productId" formControlName="productId" [readonly]="productId !== undefined">
    <div *ngIf="avisForm.controls['productId'].invalid && avisForm.controls['productId'].touched" class="error-message">
      Product ID requis.
    </div>
  </div>

  <div class="form-group">
    <label for="note">Note (1-5):</label>
    <input type="number" id="note" formControlName="note" min="1" max="5">
    <div *ngIf="avisForm.controls['note'].invalid && avisForm.controls['note'].touched" class="error-message">
      Note requise (entre 1 et 5).
    </div>
  </div>

  <div class="form-group">
    <label for="commentaire">Commentaire:</label>
    <textarea id="commentaire" formControlName="commentaire" rows="4"></textarea>
    <div *ngIf="avisForm.controls['commentaire'].invalid && avisForm.controls['commentaire'].touched" class="error-message">
      Commentaire requis.
    </div>
  </div>

  <!-- Ajoutez la classe .form-actions autour des boutons -->
  <div class="form-actions">
    <button type="submit" [disabled]="avisForm.invalid">
      {{ isEditMode ? 'Mettre à jour' : 'Ajouter' }}
    </button>
    <!-- Ajoutez la classe .button-secondary au bouton Annuler -->
    <button type="button" (click)="resetForm()" *ngIf="isEditMode" class="button-secondary">
      Annuler l'édition
    </button>
  </div>
</form>
</file>

<file path="src/app/features/avis/components/avis-form/avis-form.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AvisFormComponent } from './avis-form.component';

describe('AvisFormComponent', () => {
  let component: AvisFormComponent;
  let fixture: ComponentFixture<AvisFormComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [AvisFormComponent]
    });
    fixture = TestBed.createComponent(AvisFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/avis/components/avis-form/avis-form.component.ts">
import { Component, OnInit, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Avis } from '../../models/avis.model';


@Component({
  selector: 'app-avis-form',
  templateUrl: './avis-form.component.html',
  styleUrls: ['./avis-form.component.css']
})
export class AvisFormComponent implements OnInit, OnChanges {
  @Input() avisToEdit: Avis | null = null; // Reçoit l'avis à éditer (si modification)
  @Input() productId?: number; // Peut recevoir l'ID du produit du parent
  @Output() avisSubmit = new EventEmitter<Avis>(); // Émet l'avis soumis (nouveau ou modifié)

  avisForm: FormGroup;
  isEditMode = false;

  constructor(private fb: FormBuilder) {
    this.avisForm = this.fb.group({
      id: [null], // Caché ou non présent dans le form HTML, mais utile pour l'update
      userId: ['', Validators.required], // À adapter : comment récupérez-vous l'userId ?
      productId: ['', Validators.required],
      note: ['', [Validators.required, Validators.min(1), Validators.max(5)]], // Exemple: note de 1 à 5
      commentaire: ['', Validators.required]
      // La date est généralement gérée par le backend
    });
  }

  ngOnInit(): void {
     if (this.productId) {
       this.avisForm.patchValue({ productId: this.productId });
     }
  }

  // Détecte si un avis à éditer est passé en entrée
  ngOnChanges(changes: SimpleChanges): void {
    if (changes['avisToEdit'] && this.avisToEdit) {
      this.isEditMode = true;
      this.avisForm.patchValue(this.avisToEdit); // Pré-remplit le formulaire
    } else if (changes['avisToEdit'] && !this.avisToEdit) {
        this.isEditMode = false;
        this.resetForm(); // Réinitialise si on passe de edit à create
    }
    // Met à jour le productId si l'input change
    if(changes['productId'] && this.productId){
         this.avisForm.patchValue({ productId: this.productId });
    }
  }

  onSubmit(): void {
    if (this.avisForm.valid) {
      // Crée une copie de l'objet form pour éviter les modifs directes
      const submittedAvis: Avis = { ...this.avisForm.value };
      this.avisSubmit.emit(submittedAvis);
      if (!this.isEditMode) { // Reset seulement si c'est une création
        this.resetForm();
      }
    } else {
      // Marquer les champs comme touchés pour afficher les erreurs
      this.avisForm.markAllAsTouched();
      console.error("Formulaire invalide");
    }
  }

  resetForm(): void {
     this.avisForm.reset();
     // Remet le productId s'il était fourni
     if (this.productId) {
       this.avisForm.patchValue({ productId: this.productId });
     }
     this.isEditMode = false;
     this.avisToEdit = null;
  }
}
</file>

<file path="src/app/features/avis/components/avis-list/avis-list.component.css">
/* Assurez-vous que les variables de couleur sont accessibles ici */
/* Elles peuvent être définies dans :host, :root, ou héritées */
:host { /* Ou :root si dans un fichier global */
  --pink-primary: #E91E63;
  --pink-light: #FCE4EC;
  --text-dark: #333;
  --text-light: #666;
  --border-color-light: #eee; /* Bordure plus légère pour les items */
  --background-color: #fff;
  --button-text-color: #fff;
  --secondary-button-bg: #f4f4f4;
  --secondary-button-text: #555;
  --secondary-button-border: #ddd;
  --delete-button-bg: #f8f8f8; /* Fond neutre pour supprimer */
  --delete-button-text: var(--error-color, #D32F2F); /* Utilise la variable erreur si dispo, sinon rouge */
  --delete-button-border: #e0e0e0;
}

/* Style pour le message "Aucun avis" */
.no-avis-message { /* Ajoutez cette classe au <p> dans le *ngIf vide */
  padding: 30px 20px;
  text-align: center;
  color: var(--text-light);
  font-style: italic;
  background-color: var(--pink-light); /* Fond rose pâle */
  border-radius: 8px;
  border: 1px dashed var(--pink-primary); /* Bordure pointillée rose */
  margin: 20px 0; /* Espace autour */
}

/* Conteneur de la liste (ul) */
.avis-list-container { /* Ajoutez cette classe à la balise <ul> */
  list-style: none; /* Supprime les puces */
  padding: 0;
  margin: 0; /* Supprime la marge par défaut */
}

/* Style pour chaque élément d'avis (li) */
.avis-item {
  background-color: var(--background-color);
  border: 1px solid var(--border-color-light); /* Bordure légère */
  border-left: 4px solid var(--pink-primary); /* Bordure gauche rose pour l'accent */
  border-radius: 5px;
  padding: 15px 20px;
  margin-bottom: 15px; /* Espace entre les avis */
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.06); /* Ombre discrète */
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  transition: box-shadow 0.3s ease;
}

.avis-item:hover {
   box-shadow: 0 3px 8px rgba(0, 0, 0, 0.09); /* Ombre un peu plus prononcée au survol */
}

/* En-tête de l'avis (IDs, Note) */
.avis-header {
  display: flex;
  justify-content: space-between; /* ID à gauche, Note à droite */
  align-items: center;
  margin-bottom: 10px;
  font-size: 0.9em;
  color: var(--text-light);
  flex-wrap: wrap; /* Permet le retour à la ligne si manque de place */
  gap: 10px; /* Espace si retour à la ligne */
}

/* Note dans l'en-tête */
.avis-note {
  font-weight: bold;
  color: var(--pink-primary); /* Note en rose */
  font-size: 1.2em; /* Met en valeur la note */
  white-space: nowrap; /* Evite que "Note: X/5" se casse */
}

/* Commentaire de l'avis */
.avis-comment {
  margin-top: 8px;
  margin-bottom: 15px;
  color: var(--text-dark);
  line-height: 1.6; /* Bonne lisibilité */
  font-size: 1em;
  /* white-space: pre-wrap; */ /* Optionnel: conserve les sauts de ligne du commentaire */
}

/* Pied de l'avis (Date, Boutons) */
.avis-footer {
  display: flex;
  justify-content: space-between; /* Date à gauche, boutons à droite */
  align-items: center;
  margin-top: 15px;
  border-top: 1px solid var(--border-color-light); /* Séparateur léger */
  padding-top: 10px;
  flex-wrap: wrap; /* Permet le retour à la ligne */
  gap: 10px; /* Espace en cas de retour à la ligne */
}

/* Date de l'avis */
.avis-date {
  font-size: 0.85em;
  color: var(--text-light);
}

/* Conteneur des boutons d'action */
.avis-actions { /* Ajoutez cette classe au div contenant les boutons */
  display: flex;
  gap: 10px; /* Espace entre les boutons */
}

/* Style de base des boutons d'action (plus petits) */
.avis-footer button {
  padding: 5px 10px; /* Plus petits que les boutons de formulaire */
  border-radius: 4px;
  border: none;
  cursor: pointer;
  font-size: 0.85em;
  font-weight: 500;
  transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Bouton Modifier */
.avis-footer button.button-edit { /* Ajoutez la classe .button-edit */
  background-color: var(--pink-primary);
  color: var(--button-text-color);
  border: 1px solid var(--pink-primary);
}

.avis-footer button.button-edit:hover {
  background-color: #C2185B; /* Rose plus foncé */
  border-color: #C2185B;
}

/* Bouton Supprimer */
.avis-footer button.button-delete { /* Ajoutez la classe .button-delete */
  background-color: var(--delete-button-bg);
  color: var(--delete-button-text);
  border: 1px solid var(--delete-button-border);
}

.avis-footer button.button-delete:hover {
  background-color: #ffebee; /* Fond très léger rouge/rose pâle */
  border-color: var(--delete-button-text);
  color: #B71C1C; /* Rouge plus foncé au survol */
}
</file>

<file path="src/app/features/avis/components/avis-list/avis-list.component.html">
<div *ngIf="!avisList || avisList.length === 0">
  <!-- Ajoutez la classe ici -->
  <p class="no-avis-message">Aucun avis à afficher pour le moment.</p>
</div>

<!-- Ajoutez la classe ici -->
<ul *ngIf="avisList && avisList.length > 0" class="avis-list-container">
  <!-- La classe avis-item est déjà présente, c'est bien -->
  <li *ngFor="let avis of avisList" class="avis-item">
    <div class="avis-header">
      <!-- Les spans internes héritent du style, pas besoin de classe sauf si style spécifique -->
      <span>Produit ID: {{ avis.productId }} | Utilisateur ID: {{ avis.userId }}</span>
      <!-- La classe avis-note est déjà présente, c'est bien -->
      <span class="avis-note">Note: {{ avis.note }}/5</span>
    </div>
    <!-- La classe avis-comment est déjà présente, c'est bien -->
    <p class="avis-comment">{{ avis.commentaire }}</p>
    <div class="avis-footer">
      <!-- La classe avis-date est déjà présente, c'est bien -->
      <span class="avis-date">{{ avis.date | date:'dd/MM/yyyy' }}</span>
      <!-- Ajoutez un div avec la classe .avis-actions autour des boutons -->
      <div class="avis-actions">
        <!-- Ajoutez les classes button-edit et button-delete -->
        <button (click)="onDelete(avis.id)" class="button-delete">Supprimer</button>
      </div>
    </div>
  </li>
</ul>
</file>

<file path="src/app/features/avis/components/avis-list/avis-list.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AvisListComponent } from './avis-list.component';

describe('AvisListComponent', () => {
  let component: AvisListComponent;
  let fixture: ComponentFixture<AvisListComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [AvisListComponent]
    });
    fixture = TestBed.createComponent(AvisListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/avis/components/avis-list/avis-list.component.ts">
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Avis } from '../../models/avis.model';

@Component({
  selector: 'app-avis-list',
  templateUrl: './avis-list.component.html',
  styleUrls: ['./avis-list.component.css'] // ou .scss
})
export class AvisListComponent {
  @Input() avisList: Avis[] = []; // Reçoit la liste des avis du parent
  @Output() deleteRequest = new EventEmitter<number>(); // Émet l'ID à supprimer
  @Output() editRequest = new EventEmitter<Avis>();     // Émet l'avis à éditer

  onDelete(id: number | undefined): void {
    if (id !== undefined) {
      this.deleteRequest.emit(id);
    }
  }

  onEdit(avis: Avis): void {
    this.editRequest.emit(avis);
  }

  
}
</file>

<file path="src/app/features/avis/models/avis.model.ts">
// src/app/models/avis.model.ts
export interface Avis {
    id?: number; // L'ID est optionnel car il n'existe pas avant la création
    userId: number;
    productId: number;
    note: number;       // Évaluation/Note
    commentaire: string; // Commentaire
    date?: string; 
    adminReply?: string; // <--- NOUVEAU CHAMP : Réponse de l'administrateur (optionnel)

    }
</file>

<file path="src/app/features/avis/models/page.model.ts">
// src/app/models/page.model.ts ou similaire
import { Avis } from './avis.model';

export interface Page<T> {
  content: T[];
  pageable: {
    pageNumber: number;
    pageSize: number;
    sort: {
      sorted: boolean;
      unsorted: boolean;
      empty: boolean;
    };
    offset: number;
    paged: boolean;
    unpaged: boolean;
  };
  last: boolean;
  totalPages: number;
  totalElements: number;
  size: number;
  number: number; // Numéro de la page actuelle (commence à 0)
  sort: {
    sorted: boolean;
    unsorted: boolean;
    empty: boolean;
  };
  first: boolean;
  numberOfElements: number; // Nombre d'éléments sur la page actuelle
  empty: boolean;
}

// Type spécifique pour la pagination des avis
export type PaginatedAvisResponse = Page<Avis>;
</file>

<file path="src/app/features/avis/pages/admin-review-search/admin-review-search.component.css">
/* src/app/pages/admin-review-search/admin-review-search.component.css */

/* Variables de couleur (optionnel mais pratique) */
:host {
    --pink-primary: #E91E63;   /* Rose vif principal */
    --pink-light: #FCE4EC;    /* Rose très pâle pour fonds/bordures légères */
    --pink-dark: #C2185B;     /* Rose plus foncé pour hover/active */
    --text-dark: #333;
    --text-light: #666;
    --border-color: #ccc;
    --border-color-light: #eee;
    --background-color: #fff;
    --error-color-text: #c51162;  /* Un rouge/rose foncé pour le texte d'erreur */
    --error-color-bg: var(--pink-light); /* Fond rose pâle pour l'erreur */
    --button-secondary-bg: #f4f4f4;
    --button-secondary-text: #555;
    --button-secondary-border: #ddd;
  }
  
  /* Conteneur principal de la page admin */
  .admin-review-search-container {
    max-width: 960px; /* Limite la largeur sur grand écran */
    margin: 30px auto; /* Centre et ajoute de l'espace vertical */
    padding: 25px 30px; /* Espace intérieur généreux */
    background-color: var(--background-color);
    border-radius: 8px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.07); /* Ombre douce */
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  
  /* Titre principal */
  .admin-review-search-container h2 {
    color: var(--pink-primary); /* Titre en rose */
    font-size: 2em; /* Taille de police affirmée */
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 2px solid var(--pink-light); /* Ligne de séparation rose pâle */
    font-weight: 600;
  }
  
  /* Section du formulaire de recherche */
  .search-form {
    display: flex;
    align-items: center; /* Aligner verticalement label, input, boutons */
    gap: 15px; /* Espace entre les éléments */
    margin-bottom: 30px;
    flex-wrap: wrap; /* Permet le retour à la ligne sur petits écrans */
  }
  
  /* Label pour l'input */
  .search-form label {
    font-weight: 600; /* Un peu plus gras */
    color: var(--text-dark);
    margin-bottom: 0; /* Annule marge si héritée */
  }
  
  /* Champ de saisie numérique */
  .search-form input[type="number"] {
    padding: 10px 12px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    font-size: 1em;
    min-width: 150px; /* Évite qu'il soit trop petit */
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  /* Style du champ au focus */
  .search-form input[type="number"]:focus {
    outline: none; /* Supprime l'outline par défaut */
    border-color: var(--pink-primary); /* Bordure rose au focus */
    box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.15); /* Ombre portée rose pâle discrète */
  }
  
  /* Style général des boutons dans le formulaire */
  .search-form button {
    padding: 10px 20px;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: 500;
    transition: background-color 0.3s ease, opacity 0.3s ease, transform 0.1s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    white-space: nowrap; /* Empêche le texte du bouton de passer à la ligne */
  }
  
  /* Bouton principal "Rechercher" */
  .search-form button:not(.button-secondary) {
    background-color: var(--pink-primary);
    color: white;
  }
  
  .search-form button:not(.button-secondary):hover:not(:disabled) {
    background-color: var(--pink-dark); /* Rose plus foncé au survol */
  }
  
  .search-form button:not(.button-secondary):active:not(:disabled) {
      transform: scale(0.98); /* Léger effet d'enfoncement */
  }
  
  
  /* Bouton secondaire "Effacer" */
  .search-form button.button-secondary {
    background-color: var(--button-secondary-bg);
    color: var(--button-secondary-text);
    border: 1px solid var(--button-secondary-border);
  }
  
  .search-form button.button-secondary:hover {
    background-color: #e9e9e9; /* Légèrement plus foncé */
  }
  .search-form button.button-secondary:active {
      transform: scale(0.98);
  }
  
  /* Style pour les boutons désactivés */
  .search-form button:disabled {
    background-color: #e0e0e0;
    color: #a0a0a0;
    cursor: not-allowed;
    opacity: 0.7;
  }
  
  /* Boîte pour les messages d'erreur */
  .error-message-box {
    color: var(--error-color-text); /* Texte en rose foncé/rouge */
    background-color: var(--error-color-bg); /* Fond rose très pâle */
    border: 1px solid var(--error-color-text); /* Bordure assortie */
    padding: 12px 15px;
    margin: 20px 0 30px 0; /* Espace autour */
    border-radius: 5px;
    text-align: center;
    font-weight: 500;
  }
  
  /* Ligne de séparation horizontale */
  .admin-review-search-container hr {
    border: none;
    border-top: 1px solid var(--pink-light); /* Séparateur rose très pâle */
    margin: 30px 0; /* Espace vertical autour */
  }
  
  /* Conteneur pour les résultats (le composant app-product-reviews) */
  .results-container {
    margin-top: 20px; /* Espace après la recherche ou le hr */
  }
  
  /* Message affiché avant la première recherche */
  .placeholder-message {
    padding: 40px 20px; /* Plus d'espace vertical */
    text-align: center;
    color: var(--text-light);
    font-style: italic;
    background-color: #fdfdfe; /* Fond presque blanc mais légèrement distinct */
    border: 1px dashed var(--pink-primary); /* Bordure pointillée rose */
    border-radius: 8px;
    margin-top: 30px;
  }
  
  .placeholder-message p {
      margin: 0;
      font-size: 1.1em;
  }
  /* ... (styles existants pour .admin-review-search-container, .search-form, etc.) ... */

/* Conteneur pour la vue spécifique au produit */
.product-specific-view h3 {
    color: var(--pink-dark, #C2185B); /* Couleur légèrement différente pour distinguer */
    margin-bottom: 15px;
  }
  
  /* Conteneur pour la vue de tous les avis */
  .all-reviews-view h3 {
    color: var(--text-dark);
    margin-bottom: 15px;
  }
  
  /* Avertissement pagination */
  .pagination-warning {
      background-color: #fff3e0; /* Jaune très pâle */
      color: #e65100; /* Orange foncé */
      border: 1px solid #ffcc80; /* Bordure orange pâle */
      padding: 10px 15px;
      border-radius: 4px;
      margin-bottom: 20px;
      font-size: 0.9em;
      text-align: center;
  }
  
  /* Indicateur de chargement (si non stylé globalement) */
  .loading-message {
    text-align: center;
    padding: 20px;
    color: var(--text-light);
    font-style: italic;
  }
  
  /* Conteneur pour le formulaire d'édition global */
  .global-edit-form-container {
      margin-top: 20px;
      margin-bottom: 30px;
      padding: 20px;
      background-color: #f9f9f9; /* Fond légèrement différent */
      border: 1px solid var(--border-color-light, #eee);
      border-radius: 8px;
  }
  
  .global-edit-form-container h4 {
      margin-top: 0;
      margin-bottom: 20px;
      color: var(--pink-primary, #E91E63);
  }
  
  .global-edit-form-container hr {
      margin: 20px 0;
      border-color: var(--border-color-light, #eee);
  }
  
  /* S'assurer que le bouton secondaire (Annuler) est stylé */
  .global-edit-form-container .button-secondary {
      padding: 8px 15px; /* Taille peut-être un peu plus petite */
      background-color: var(--button-secondary-bg, #f4f4f4);
      color: var(--button-secondary-text, #555);
      border: 1px solid var(--button-secondary-border, #ddd);
      cursor: pointer;
      border-radius: 4px;
      text-transform: uppercase;
      font-size: 0.9em;
  }
  .global-edit-form-container .button-secondary:hover {
      background-color: #e9e9e9;
  }
  /* src/app/pages/admin-review-search/admin-review-search.component.css */

/* ... (styles existants) ... */

/* Style pour les contrôles de pagination (copié/adapté de product-reviews) */
.pagination-controls {
    margin-top: 25px;
    padding-top: 15px;
    border-top: 1px solid var(--pink-light, #FCE4EC); /* Utilise var ou fallback */
    display: flex;
    justify-content: space-between; /* Infos à gauche, boutons à droite */
    align-items: center;
    flex-wrap: wrap; /* Retour à la ligne si nécessaire */
    gap: 15px; /* Espace entre les éléments */
  }
  
  .pagination-controls span {
    color: var(--text-light, #666);
    font-size: 0.9em;
    white-space: nowrap; /* Empêche le texte de l'info de passer à la ligne */
  }
  
  .pagination-controls div { /* Conteneur pour les boutons */
     display: flex;
     gap: 5px; /* Espace réduit entre les boutons de pagination */
  }
  
  .pagination-controls button {
    padding: 6px 12px; /* Boutons légèrement plus petits */
    font-size: 0.9em;
    background-color: var(--secondary-button-bg, #f4f4f4);
    color: var(--secondary-button-text, #555);
    border: 1px solid var(--secondary-button-border, #ddd);
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s ease, border-color 0.2s ease;
    /* Vous pouvez ajouter d'autres styles de base de bouton si nécessaire */
  }
  
  .pagination-controls button:hover:not(:disabled) {
     background-color: #e9e9e9;
     border-color: #ccc;
  }
  
  .pagination-controls button:disabled {
     background-color: #f8f8f8;
     color: #bbb;
     border-color: #eee;
     cursor: not-allowed;
     opacity: 0.7;
  }
  
  /* ... (autres styles existants) ... */
</file>

<file path="src/app/features/avis/pages/admin-review-search/admin-review-search.component.html">
<div class="admin-review-search-container">
    <h2>Review Management</h2>

    <!-- Search Form (inchangé) -->
    <div class="search-form">
      <label for="productIdInput">Search by Product ID:</label>
      <input
        type="number"
        id="productIdInput"
        [(ngModel)]="productIdToSearch"
        placeholder="Ex: 123"
        min="1"
        (keyup.enter)="searchReviews()"
      >
      <button (click)="searchReviews()" [disabled]="!productIdToSearch">Search</button>
      <button type="button" class="button-secondary" (click)="clearSearch()" *ngIf="displayedProductId !== null">
        Show All Reviews
      </button>
    </div>

    <!-- Search error message (inchangé) -->
    <div *ngIf="searchError" class="error-message-box">
      {{ searchError }}
    </div>

    <!-- === PRODUCT SPECIFIC VIEW (inchangé) === -->
    <div *ngIf="displayedProductId" class="results-container product-specific-view">
      <app-product-reviews [productIdInput]="displayedProductId"></app-product-reviews>
    </div>


    <!-- === MODIFIÉ: GLOBAL VIEW (avec pagination) === -->
    <div *ngIf="!displayedProductId" class="results-container all-reviews-view">

        <!-- Titre modifié pour afficher le total depuis la page -->
        <h3>
           All Reviews
           <span *ngIf="!isLoadingAll && allReviewsPage">({{ allReviewsPage.totalElements }})</span>
           <span *ngIf="isLoadingAll">(Loading...)</span>
        </h3>

        <!-- Avertissement de pagination supprimé -->
        <!-- <p class="pagination-warning" *ngIf="!isLoadingAll && ..."> ... </p> -->

        <!-- Global loading error (inchangé) -->
        <div *ngIf="loadAllError && !isLoadingAll" class="error-message-box">
            {{ loadAllError }}
        </div>

        <!-- Global loading indicator (inchangé) -->
        <div *ngIf="isLoadingAll" class="loading-message">
            Loading all reviews...
        </div>

        <!-- Edit form (inchangé) -->
        <div *ngIf="showEditFormForAllList" id="global-edit-form" class="global-edit-form-container">
            <hr>
            <h4>Edit Review ID {{ avisToEditInAllList?.id }}</h4>
            <app-avis-form
                [avisToEdit]="avisToEditInAllList"
                (avisSubmit)="handleGlobalEditSubmit($event)">
            </app-avis-form>
            <div style="margin-top: 10px; text-align: right;">
                 <button type="button" class="button-secondary" (click)="cancelGlobalEdit()">
                     Cancel
                 </button>
            </div>
            <hr>
        </div>

        <!-- MODIFIÉ: Affichage de la liste paginée -->
        <div *ngIf="!isLoadingAll && !loadAllError && !showEditFormForAllList">
            <app-avis-list
                *ngIf="allReviewsPage && allReviewsPage.content.length > 0"
                [avisList]="allReviewsPage.content" 
                (deleteRequest)="handleAllDeleteRequest($event)"
                (editRequest)="handleAllEditRequest($event)">
            </app-avis-list>

            <!-- MODIFIÉ: Message si aucun avis (basé sur totalElements) -->
            <div *ngIf="allReviewsPage && allReviewsPage.totalElements === 0 && !isLoadingAll && !loadAllError" class="placeholder-message">
                <p>No reviews found in the system.</p>
            </div>
        </div>

        <!-- **** NOUVEAU: Contrôles de Pagination pour la liste globale **** -->
        <!-- S'affiche seulement si on n'est pas en chargement ET qu'il y a plus d'une page -->
        <div *ngIf="!isLoadingAll && allReviewsPage && allReviewsPage.totalPages > 1" class="pagination-controls" style="margin-top: 20px;"> <!-- Ajout marge pour séparation visuelle -->
            <span> <!-- Informations sur la page actuelle et le total -->
                Page {{ allReviewsPage.number + 1 }} of {{ allReviewsPage.totalPages }}
                ({{ allReviewsPage.totalElements }} reviews total)
            </span>
            <div> <!-- Conteneur pour les boutons -->
                <button (click)="goToGlobalPage(0)" [disabled]="allReviewsPage.first">
                    << First
                </button>
                <button (click)="previousGlobalPage()" [disabled]="allReviewsPage.first">
                    < Previous
                </button>
                <!-- Vous pouvez ajouter des numéros de page ici si nécessaire -->
                <!-- Exemple simple: <span> {{ allReviewsPage.number + 1 }} </span> -->
                <button (click)="nextGlobalPage()" [disabled]="allReviewsPage.last">
                    Next >
                </button>
                 <button (click)="goToGlobalPage(allReviewsPage.totalPages - 1)" [disabled]="allReviewsPage.last">
                     Last >>
                 </button>
            </div>
         </div>
         <!-- **** FIN NOUVEAUX CONTRÔLES DE PAGINATION **** -->

    </div>
    <!-- === FIN GLOBAL VIEW === -->

</div>
</file>

<file path="src/app/features/avis/pages/admin-review-search/admin-review-search.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AdminReviewSearchComponent } from './admin-review-search.component';

describe('AdminReviewSearchComponent', () => {
  let component: AdminReviewSearchComponent;
  let fixture: ComponentFixture<AdminReviewSearchComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [AdminReviewSearchComponent]
    });
    fixture = TestBed.createComponent(AdminReviewSearchComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/avis/pages/admin-review-search/admin-review-search.component.ts">
// src/app/pages/admin-review-search/admin-review-search.component.ts

import { Component, OnInit, OnDestroy } from '@angular/core';
import { AvisService } from '../../services/avis.service';
import { Avis } from '../../models/avis.model';
import { PaginatedAvisResponse } from '../../models/page.model'; // <-- Assurez-vous d'importer ceci
import { Subject, of } from 'rxjs';
import { takeUntil, finalize, catchError, tap } from 'rxjs/operators';

@Component({
  selector: 'app-admin-review-search',
  templateUrl: './admin-review-search.component.html',
  styleUrls: ['./admin-review-search.component.css']
})
export class AdminReviewSearchComponent implements OnInit, OnDestroy {
  // --- State pour la recherche spécifique ---
  productIdToSearch: number | null = null;
  displayedProductId: number | null = null;
  searchError: string | null = null;

  // --- State pour la liste de TOUS les avis (maintenant paginée) ---
  // allReviewsList: Avis[] = []; // <- Remplacé par allReviewsPage
  allReviewsPage: PaginatedAvisResponse | null = null; // <-- NOUVEAU: Stocke la réponse paginée
  allReviewsCurrentPage: number = 0;                   // <-- NOUVEAU: Page actuelle (commence à 0)
  allReviewsPageSize: number = 3;                     // <-- NOUVEAU: Taille de page (ex: 10)
  allReviewsSort: string = 'date,desc';                // <-- NOUVEAU: Tri actuel

  isLoadingAll: boolean = false;
  loadAllError: string | null = null;
  avisToEditInAllList: Avis | null = null;
  showEditFormForAllList: boolean = false;

  private destroy$ = new Subject<void>();

  constructor(private avisService: AvisService) { }

  ngOnInit(): void {
    // Charger la première page de tous les avis
    this.loadAllReviews();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  // --- MODIFIÉ: Méthode pour charger tous les avis (maintenant paginée) ---
  loadAllReviews(): void {
    this.isLoadingAll = true;
    this.loadAllError = null;
    // Ne vide pas la page précédente immédiatement pour éviter un flash visuel
    // this.allReviewsPage = null;

    this.avisService.getAllReviewsPaginated( // <-- Utilise la NOUVELLE méthode du service
      this.allReviewsCurrentPage,
      this.allReviewsPageSize,
      this.allReviewsSort
    ).pipe(
      takeUntil(this.destroy$),
      tap(pageResponse => {
         if (!pageResponse) return; // Sécurité si la réponse est null
        console.log(`[AdminSearch] Loaded page ${pageResponse.number} of global reviews.`);
        this.allReviewsPage = pageResponse; // <-- Stocke la réponse paginée complète

        // Gestion si la page actuelle devient invalide (ex: après suppression du dernier item)
        if(pageResponse.totalPages > 0 && this.allReviewsCurrentPage >= pageResponse.totalPages) {
            console.log(`[AdminSearch] Global current page ${this.allReviewsCurrentPage} is out of bounds (Total: ${pageResponse.totalPages}). Going to last page.`);
            // Décrémente la page et recharge SEULEMENT si la page résultante est valide (>=0)
            this.allReviewsCurrentPage = Math.max(0, pageResponse.totalPages - 1);
            // Relance immédiatement le chargement avec la page corrigée
            this.loadAllReviews();
            // Important : On ne continue pas l'exécution de ce tap pour éviter de traiter une page qui va être rechargée
            return;
        }
      }),
      catchError(err => {
        console.error("[AdminSearch] Error loading all reviews (paginated):", err);
        this.loadAllError = "Erreur lors du chargement de la liste paginée des avis.";
        this.allReviewsPage = null; // Vider en cas d'erreur
        return of(null);
      }),
      finalize(() => {
        this.isLoadingAll = false;
      })
    ).subscribe();
  }

  // --- Méthode appelée lors de la recherche par ID produit (logique d'affichage inchangée) ---
  searchReviews(): void {
    this.searchError = null;
    this.loadAllError = null;
    this.cancelGlobalEdit();

    if (this.productIdToSearch !== null && this.productIdToSearch > 0) {
      console.log(`[AdminSearch] Searching for product ID: ${this.productIdToSearch}`);
      this.displayedProductId = this.productIdToSearch;
    } else {
      this.displayedProductId = null;
      this.searchError = "Veuillez entrer un ID de produit valide (nombre positif).";
      // S'assurer que la vue globale est correctement chargée si elle ne l'était pas
       if (!this.allReviewsPage && !this.isLoadingAll) {
          this.loadAllReviews();
       }
    }
  }

  // --- MODIFIÉ: Méthode pour effacer la recherche et revenir à la liste globale ---
  clearSearch(): void {
      console.log("[AdminSearch] Clearing search, showing all reviews.");
      this.productIdToSearch = null;
      this.displayedProductId = null;
      this.searchError = null;
      this.cancelGlobalEdit();

      // Revenir à la première page et recharger la liste globale
      this.allReviewsCurrentPage = 0;
      this.loadAllReviews(); // Recharger la première page globale
  }

  // --- MODIFIÉ: Gérer la suppression (recharge la page actuelle) ---
  handleAllDeleteRequest(id: number | undefined): void {
      if (id === undefined) {
          console.error("[AdminSearch] Delete requested with undefined ID.");
          return;
      }
      if (confirm(`Voulez-vous vraiment supprimer l'avis ID ${id} ? Cette action est irréversible.`)) {
          // Optionnel: Mettre isLoadingAll à true ou un indicateur spécifique
          this.isLoadingAll = true; // Met l'indicateur pendant la suppression
          this.avisService.deleteReview(id).pipe(
              takeUntil(this.destroy$),
              finalize(() => {
                // Ne pas remettre isLoadingAll à false ici, car loadAllReviews va le faire
              })
          ).subscribe({
              next: () => {
                  console.log(`[AdminSearch] Review ID ${id} deleted successfully.`);
                  // Si l'avis supprimé était en cours d'édition, annuler
                  if (this.avisToEditInAllList?.id === id) {
                     this.cancelGlobalEdit();
                  }
                  // Recharger la page actuelle pour refléter la suppression.
                  // loadAllReviews gère le cas où la page devient vide et ajuste si besoin.
                  this.loadAllReviews();
              },
              error: (err) => {
                  console.error(`[AdminSearch] Error deleting review ID ${id}:`, err);
                  this.loadAllError = `Erreur lors de la suppression de l'avis ID ${id}.`;
                  this.isLoadingAll = false; // S'assurer que l'indicateur s'arrête en cas d'erreur
              }
          });
      }
  }

  // --- Gérer la demande d'édition (inchangé) ---
  handleAllEditRequest(avis: Avis): void {
      console.log(`[AdminSearch] Edit requested for review ID ${avis.id} from global list.`);
      this.avisToEditInAllList = { ...avis };
      this.showEditFormForAllList = true;
      this.searchError = null;
      this.loadAllError = null;
       setTimeout(() => {
           const formElement = document.querySelector('#global-edit-form');
           formElement?.scrollIntoView({ behavior: 'smooth', block: 'start' });
       }, 50);
  }

   // --- MODIFIÉ: Gérer la soumission (recharge la page actuelle) ---
   handleGlobalEditSubmit(avis: Avis): void {
       if (!avis.id) {
           console.error("[AdminSearch] Cannot update review without ID.");
           alert("Erreur : Impossible de mettre à jour l'avis sans son ID.");
           return;
       }
       console.log(`[AdminSearch] Submitting update for review ID ${avis.id} from global form.`);
       this.isLoadingAll = true; // Optionnel: indicateur pendant la sauvegarde

       this.avisService.updateReview(avis.id, avis).pipe(
           takeUntil(this.destroy$),
           finalize(() => {
             // Ne pas remettre isLoadingAll à false ici, car loadAllReviews va le faire
           })
       ).subscribe({
           next: (updatedAvis) => {
               console.log(`[AdminSearch] Review ID ${avis.id} updated successfully.`);
               this.cancelGlobalEdit(); // Cacher le formulaire après succès
               // Recharger la page actuelle pour voir la modification
               this.loadAllReviews();
           },
           error: (err) => {
               console.error(`[AdminSearch] Error updating review ID ${avis.id}:`, err);
               alert(`Erreur lors de la mise à jour de l'avis ID ${avis.id}. Détails: ${err.message || 'Erreur inconnue'}`);
               this.isLoadingAll = false; // Arrêter l'indicateur en cas d'erreur
           }
       });
   }

    // --- Méthode pour annuler l'édition globale (inchangée) ---
    cancelGlobalEdit(): void {
        this.showEditFormForAllList = false;
        this.avisToEditInAllList = null;
    }

    // --- NOUVELLES MÉTHODES POUR LA PAGINATION GLOBALE ---
    goToGlobalPage(page: number): void {
      // Vérifie si la page demandée est valide et différente de la page actuelle
      if (page >= 0 && this.allReviewsPage && page < this.allReviewsPage.totalPages && page !== this.allReviewsCurrentPage) {
        console.log(`[AdminSearch] Going to global page: ${page}`);
        this.allReviewsCurrentPage = page;
        this.loadAllReviews(); // Recharge les données pour la nouvelle page
      }
    }

    nextGlobalPage(): void {
      // Vérifie s'il y a une page suivante avant de l'appeler
      if (this.allReviewsPage && !this.allReviewsPage.last) {
        this.goToGlobalPage(this.allReviewsCurrentPage + 1);
      }
    }

    previousGlobalPage(): void {
      // Vérifie s'il y a une page précédente avant de l'appeler
      if (this.allReviewsPage && !this.allReviewsPage.first) {
        this.goToGlobalPage(this.allReviewsCurrentPage - 1);
      }
    }

    // Optionnel: Méthode pour changer le tri (à lier dans le template si besoin)
    applyGlobalSort(sortValue: string): void {
        if (this.allReviewsSort !== sortValue) {
            console.log(`[AdminSearch] Applying global sort: ${sortValue}`);
            this.allReviewsSort = sortValue;
            this.allReviewsCurrentPage = 0; // Revenir à la première page avec le nouveau tri
            this.loadAllReviews();
        }
    }
    // --- FIN NOUVELLES MÉTHODES ---
}
</file>

<file path="src/app/features/avis/pages/product-reviews/product-reviews.component.css">
/* Variables de couleur pour une maintenance facile */
:host { /* Si vous utilisez ce CSS dans le fichier .scss/.css du composant avec ViewEncapsulation */
    --pink-primary: #E91E63;   /* Un rose vif mais élégant */
    --pink-light: #FCE4EC;    /* Un rose très pâle pour les fonds/bordures */
    --text-dark: #333;
    --text-light: #666;
    --border-color: #eee;
    --background-color: #fff;
  }
  
  /* Style pour le conteneur principal des avis */
  .avis-section-container { /* Ajoutez cette classe au premier div *ngIf="productId" */
    background-color: var(--background-color);
    padding: 25px;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    margin-bottom: 30px; /* Espace sous la section avis */
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* Police moderne */
  }
  
  /* Style pour le titre principal */
  .avis-section-container h2 {
    color: var(--pink-primary); /* Titre en rose */
    font-size: 1.8em; /* Taille de police plus grande */
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 2px solid var(--pink-light); /* Ligne de séparation rose pâle */
    font-weight: 600; /* Un peu plus gras */
  }
  
  /* Style pour la section de la note moyenne */
  .average-rating-container { /* Ajoutez cette classe au div *ngIf="(averageRating$ | async)..." */
    margin-bottom: 20px;
    font-size: 1.1em;
    color: var(--text-light);
  }
  
  .average-rating-container p {
    margin: 0;
  }
  
  .average-rating-container strong {
    font-size: 1.4em; /* Note plus grande */
    font-weight: 700; /* Note bien en évidence */
    color: var(--pink-primary); /* Note en rose */
    margin-left: 5px; /* Petit espace avant la note */
  }
  
  /* Style pour les messages de chargement */
  .loading-message { /* Ajoutez cette classe aux <p> dans #loadingAvg et dans le div *ngIf="!productId" */
    color: var(--text-light);
    font-style: italic;
    padding: 20px 0;
    text-align: center;
  }
  
  /* Style pour les lignes de séparation */
  .avis-section-container hr {
    border: none;
    border-top: 1px solid var(--pink-light); /* Séparateur rose très pâle */
    margin: 30px 0; /* Plus d'espace autour des séparateurs */
  }
  
  /* Style pour le sous-titre "Liste des Avis" */
  .avis-section-container h3 {
    color: var(--text-dark);
    font-size: 1.5em;
    margin-bottom: 20px;
    font-weight: 600;
  }
  
  /* Espacement pour les composants enfants (Formulaire et Liste) */
  .avis-section-container app-avis-form,
  .avis-section-container app-avis-list {
    display: block; /* Assure qu'ils prennent la largeur */
    margin-top: 20px;
  }
  
  /* Style pour le conteneur quand l'ID produit est manquant */
  .no-product-id-container { /* Ajoutez cette classe au div *ngIf="!productId" */
    padding: 20px;
    background-color: var(--pink-light); /* Fond rose pâle pour le message d'erreur/attente */
    border: 1px solid var(--pink-primary);
    border-radius: 5px;
    text-align: center;
  }
  /* Réutilisation de .loading-message pour le paragraphe ici est aussi possible */
  .no-product-id-container p {
      color: var(--pink-primary); /* Texte en rose */
      font-weight: 500;
  }
  /* Style pour le bouton "Ajouter votre avis" */
.button-add-review {
  padding: 10px 25px;
  background-color: var(--pink-primary, #E91E63); /* Utilise la variable si définie */
  color: var(--button-text-color, #fff);
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 1em;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  transition: background-color 0.3s ease, transform 0.1s ease;
  display: inline-block; /* Nécessaire pour centrer avec text-align */
}

.button-add-review:hover {
  background-color: #C2185B; /* Rose un peu plus foncé */
}

.button-add-review:active {
    transform: scale(0.98); /* Léger effet d'enfoncement au clic */
}

/* Optionnel: Style pour un bouton Annuler générique si ajouté dans ce template */
/* .button-cancel-add { ... } */

/* Dans product-reviews.component.css */

/* Optionnel : Définir les variables si elles ne sont pas globales */
:host {
  --pink-primary: #E91E63;
  --pink-light: #FCE4EC;
  --text-dark: #333;
  --text-light: #666;
  --border-color: #ccc;
  --error-color: #D32F2F;
  --input-background: #fff;
  --button-text-color: #fff;
  --secondary-button-bg: #f4f4f4; /* Variable pour le fond */
  --secondary-button-text: #555;  /* Variable pour le texte */
  --secondary-button-border: #ddd;/* Variable pour la bordure */
}

/* Style de base pour les boutons (si non défini globalement) */
/* Assurez-vous que ce style s'applique aussi à .button-secondary */
button {
  padding: 10px 20px;
  border-radius: 5px;
  border: none;
  cursor: pointer;
  font-size: 1em;
  font-weight: 500;
  transition: background-color 0.3s ease, opacity 0.3s ease, border-color 0.3s ease, color 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  box-sizing: border-box; /* Bonne pratique */
}

/* Style spécifique pour le bouton secondaire (Annuler) */
.button-secondary {
  background-color: var(--secondary-button-bg, #f4f4f4); /* Fond gris clair */
  color: var(--secondary-button-text, #555);           /* Texte foncé */
  border: 1px solid var(--secondary-button-border, #ddd);/* Bordure grise */
}

.button-secondary:hover {
  background-color: #e9e9e9; /* Légèrement plus foncé au survol */
  border-color: #ccc;
}

.button-secondary:focus {
 outline: none;
 box-shadow: 0 0 0 3px rgba(200, 200, 200, 0.5); /* Exemple d'outline au focus */
}


/* Style pour le conteneur du bouton Annuler (pour l'ajout) */
/* Permet de l'aligner ou d'ajouter de la marge */
.form-actions-cancel {
margin-top: 15px; /* Espace au-dessus du bouton Annuler */
margin-bottom: 10px; /* Espace en dessous */
/* Alignement:
   Si vous voulez l'aligner avec les boutons du formulaire qui sont peut-être
   dans un flex container à gauche: */
/* display: flex; */
/* justify-content: flex-start; */

/* Ou si vous voulez le centrer : */
text-align: center;

/* Ou le mettre à droite: */
/* text-align: right; */
}

/* ... (styles existants) ... */

/* Style pour la section des filtres */
.filter-section {
  margin-top: 20px;
  margin-bottom: 20px;
  padding: 15px;
  background-color: #f9f9f9; /* Fond légèrement différent */
  border-radius: 5px;
  border: 1px solid var(--border-color, #eee);
  display: flex; /* Pour aligner label et select */
  align-items: center;
  gap: 10px; /* Espace entre label et select */
  flex-wrap: wrap; /* Permet le retour à la ligne sur petits écrans */
}

.filter-section label {
  font-weight: 500;
  color: var(--text-dark, #333);
}

.filter-section select {
  padding: 8px 10px;
  border: 1px solid var(--border-color, #ccc);
  border-radius: 4px;
  min-width: 150px; /* Largeur minimale */
}

/* Style pour les contrôles de pagination */
.pagination-controls {
  margin-top: 25px;
  padding-top: 15px;
  border-top: 1px solid var(--pink-light, #FCE4EC);
  display: flex;
  justify-content: space-between; /* Infos à gauche, boutons à droite */
  align-items: center;
  flex-wrap: wrap; /* Retour à la ligne */
  gap: 15px; /* Espace entre les éléments */
}

.pagination-controls span {
  color: var(--text-light, #666);
  font-size: 0.9em;
}

.pagination-controls div { /* Conteneur pour les boutons */
   display: flex;
   gap: 5px; /* Espace réduit entre les boutons de pagination */
}

.pagination-controls button {
  padding: 6px 12px; /* Boutons légèrement plus petits */
  font-size: 0.9em;
  background-color: var(--secondary-button-bg, #f4f4f4);
  color: var(--secondary-button-text, #555);
  border: 1px solid var(--secondary-button-border, #ddd);
  /* Utilise le style .button-secondary pour la base */
}

.pagination-controls button:hover:not(:disabled) {
   background-color: #e9e9e9;
   border-color: #ccc;
}

.pagination-controls button:disabled {
   background-color: #f8f8f8;
   color: #bbb;
   border-color: #eee;
   cursor: not-allowed;
   opacity: 0.7;
}

/* Message d'erreur spécifique au chargement */
.error-message-box {
    color: var(--error-color, #D32F2F);
    background-color: #ffebee;
    border: 1px solid var(--error-color, #D32F2F);
    padding: 10px 15px;
    margin: 15px 0;
    border-radius: 4px;
    text-align: center;
}
</file>

<file path="src/app/features/avis/pages/product-reviews/product-reviews.component.html">
<div *ngIf="productId" class="avis-section-container">
  <h2>Reviews for Product #{{ productId }}</h2> <!-- Traduit -->

  <!-- Average Rating -->
  <div *ngIf="(averageRating$ | async) as avgRate; else loadingAvg" class="average-rating-container">
    <p>Average rating: <strong>{{ avgRate !== null ? (avgRate | number:'1.1-2') + ' / 5' : 'N/A' }}</strong></p> <!-- Traduit -->
  </div>
  <ng-template #loadingAvg>
    <p class="loading-message">Loading average rating...</p> <!-- Traduit -->
  </ng-template>

  <hr>

  <h3>List of Reviews</h3> <!-- Traduit -->

  <!-- Filter Section -->
  <div class="filter-section">
    <label for="noteFilter">Filter by rating:</label> <!-- Traduit -->
    <select id="noteFilter" (change)="applyFilter($any($event.target).value)" [ngModel]="currentFilterNote === null ? 'null' : currentFilterNote">
       <!-- Using [ngValue]="null" is preferred if possible, otherwise use a string 'null' -->
       <option value="null">All ratings</option> <!-- Traduit -->
       <option value="5">5 stars</option> <!-- Traduit -->
       <option value="4">4 stars</option> <!-- Traduit -->
       <option value="3">3 stars</option> <!-- Traduit -->
       <option value="2">2 stars</option> <!-- Traduit -->
       <option value="1">1 star</option> <!-- Traduit -->
    </select>
    <!-- Add other filters or sorting options here if needed -->
        <!-- NEW: Sort Selector -->
    <label for="sortFilter" style="margin-left: 15px;">Sort by:</label> <!-- Traduit -->
    <select id="sortFilter" (change)="applySort($any($event.target).value)" [ngModel]="currentSort">
        <option value="date,desc">Date (Newest)</option> <!-- Traduit -->
        <option value="date,asc">Date (Oldest)</option> <!-- Traduit -->
        <option value="note,desc">Rating (Highest)</option> <!-- Traduit -->
        <option value="note,asc">Rating (Lowest)</option> <!-- Traduit -->
        <!-- Add other relevant options -->
    </select>
  </div>


  <!-- Loading Indicator / Error -->
  <div *ngIf="isLoading" class="loading-message">Loading reviews...</div> <!-- Traduit -->
  <div *ngIf="loadError && !isLoading" class="error-message-box">{{ loadError }}</div> <!-- Variable content must be English from component -->

  <!-- List of reviews (uses current page) -->
  <!-- Uses data from reviewsPage$ BehaviorSubject -->
  <ng-container *ngIf="(reviewsPage$ | async) as reviewsPage; else noReviewsOrLoading">
      <app-avis-list
         *ngIf="!isLoading && reviewsPage.content.length > 0"
         [avisList]="reviewsPage.content"
         (deleteRequest)="handleDeleteRequest($event)"
         (editRequest)="handleEditRequest($event)">
      </app-avis-list>

       <!-- Message if no reviews match the filter -->
      <div *ngIf="!isLoading && reviewsPage.content.length === 0 && reviewsPage.totalElements > 0 && currentFilterNote !== null">
           <p class="no-avis-message">No reviews match your filter.</p> <!-- Traduit -->
      </div>
      <!-- Message if no reviews at all for this product -->
       <!-- <div *ngIf="!isLoading && reviewsPage.content.length === 0 && reviewsPage.totalElements === 0 && currentFilterNote === null">
            <p class="no-avis-message">Be the first to leave a review!</p> --> <!-- Traduit (dans commentaire) -->
       <!-- </div> -->


       <!-- Pagination Controls -->
       <div *ngIf="!isLoading && reviewsPage.totalPages > 1" class="pagination-controls">
          <span>Page {{ reviewsPage.number + 1 }} of {{ reviewsPage.totalPages }} ({{ reviewsPage.totalElements }} reviews)</span> <!-- Traduit -->
          <div>
              <button (click)="goToPage(0)" [disabled]="reviewsPage.first">
                  << First <!-- Traduit -->
              </button>
              <button (click)="previousPage()" [disabled]="reviewsPage.first">
                  < Previous <!-- Traduit -->
              </button>
              <!-- Optional: Display page numbers -->
              <!-- <span> ... </span> -->
              <button (click)="nextPage()" [disabled]="reviewsPage.last">
                  Next > <!-- Traduit -->
              </button>
               <button (click)="goToPage(reviewsPage.totalPages - 1)" [disabled]="reviewsPage.last">
                   Last >> <!-- Traduit -->
               </button>
          </div>
       </div>
  </ng-container>

   <!-- Alternative template during initial load or if reviewsPage is null -->
   <ng-template #noReviewsOrLoading>
        <div *ngIf="!isLoading && !loadError">
            <!-- This case shouldn't happen often if the initial call succeeds -->
            <!-- <p class="no-avis-message">No reviews to display.</p> --> <!-- Traduit (dans commentaire) -->
        </div>
   </ng-template>


  <!-- Add Review Button -->
  <div *ngIf="!showAddForm && !avisToEdit" style="margin-top: 20px; text-align: center;">
      <button (click)="displayAddForm()" class="button-add-review">Add your review</button> --> <!-- Traduit (dans commentaire) -->
  </div>

  <!-- Add/Edit Form -->
  <div *ngIf="showAddForm || avisToEdit">
      <hr>
      <app-avis-form
         [productId]="productId"
         [avisToEdit]="avisToEdit"
         (avisSubmit)="handleAvisSubmit($event)">
       </app-avis-form>
      <div *ngIf="showAddForm && !avisToEdit" class="form-actions form-actions-cancel">
        <button type="button" (click)="hideForm()" class="button-secondary">Cancel</button> <!-- Traduit -->
      </div>
       <hr>
  </div>

</div>

<!-- Missing Product ID -->
<div *ngIf="!productId && !isLoading" class="no-product-id-container">
  <p class="loading-message">{{ loadError ? loadError : 'Loading or missing product ID...' }}</p> <!-- Traduit (texte conditionnel) -->
   <!-- Note: loadError variable content must be English from component -->
</div>
</file>

<file path="src/app/features/avis/pages/product-reviews/product-reviews.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductReviewsComponent } from './product-reviews.component';

describe('ProductReviewsComponent', () => {
  let component: ProductReviewsComponent;
  let fixture: ComponentFixture<ProductReviewsComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ProductReviewsComponent]
    });
    fixture = TestBed.createComponent(ProductReviewsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/avis/pages/product-reviews/product-reviews.component.ts">
// src/app/pages/product-reviews/product-reviews.component.ts

// Importez Input, OnChanges, SimpleChanges
import { Component, OnInit, OnDestroy, Input, OnChanges, SimpleChanges, ViewChild } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { AvisService } from '../../services/avis.service';
import { Avis } from '../../models/avis.model';
import { PaginatedAvisResponse } from '../../models/page.model';
import { Observable, BehaviorSubject, Subject, of } from 'rxjs';
import { switchMap, catchError, tap, takeUntil, finalize } from 'rxjs/operators';
// map n'est plus explicitement utilisé dans ce code après refactoring, mais gardez-le si vous en avez besoin ailleurs.
// import { map } from 'rxjs/operators';
import { AvisFormComponent } from '../../components/avis-form/avis-form.component';

@Component({
  selector: 'app-product-reviews',
  templateUrl: './product-reviews.component.html',
  styleUrls: ['./product-reviews.component.css']
})
// Implémentez OnChanges
export class ProductReviewsComponent implements OnInit, OnDestroy, OnChanges {

  // --- NOUVEAU: Input pour l'ID produit venant d'un parent ---
  @Input() productIdInput?: number;

  // --- ID Produit interne utilisé par le composant ---
  productId!: number; // Sera défini par ngOnInit ou ngOnChanges

  // --- Propriétés existantes ---
  averageRating$: Observable<number | null> | undefined;
  avisToEdit: Avis | null = null;
  showAddForm: boolean = false;
  private reviewsSubject = new BehaviorSubject<PaginatedAvisResponse | null>(null);
  reviewsPage$: Observable<PaginatedAvisResponse | null> = this.reviewsSubject.asObservable();
  currentPage: number = 0;
  pageSize: number = 5;
  currentFilterNote: number | null = null;
  isLoading: boolean = false;
  loadError: string | null = null;
  currentSort: string = 'date,desc'; // Valeur par défaut du tri
  private destroy$ = new Subject<void>();
  @ViewChild(AvisFormComponent) avisFormComponent: AvisFormComponent | undefined;

  constructor(
    private route: ActivatedRoute, // Gardé pour le cas d'utilisation via la route
    private avisService: AvisService
  ) { }

  // --- MODIFIÉ: ngOnInit ---
  ngOnInit(): void {
    // Priorité à l'Input pour déterminer l'ID produit
    if (this.productIdInput !== undefined) {
      console.log('[ProductReviews] Initializing with Input ID:', this.productIdInput);
      this.initializeComponent(this.productIdInput);
    } else {
      // Si pas d'Input, on regarde les paramètres de la route
      console.log('[ProductReviews] Initializing with Route Param');
      this.route.paramMap.pipe(
        takeUntil(this.destroy$) // Se désabonner proprement
      ).subscribe(params => {
        const id = params.get('productId');
        if (id) {
          // Paramètre de route trouvé, on initialise
          this.initializeComponent(+id);
        } else {
          // Ni Input, ni paramètre de route valide
          console.error("[ProductReviews] Product ID missing from Input and Route!");
          this.loadError = "ID Produit non fourni.";
          this.clearComponentState(); // Effacer l'état si aucun ID n'est trouvé
        }
      });
    }
  }

  // --- NOUVEAU: ngOnChanges ---
  // Détecte les changements sur les @Input APRES l'initialisation
  ngOnChanges(changes: SimpleChanges): void {
    // Vérifie si 'productIdInput' a changé ET que ce n'est pas le premier changement
    if (changes['productIdInput'] && !changes['productIdInput'].firstChange) {
      const newId = changes['productIdInput'].currentValue;
      const previousId = changes['productIdInput'].previousValue;

      console.log(`[ProductReviews] Input ID changed from ${previousId} to ${newId}`);

      if (newId !== undefined && newId > 0 && newId !== this.productId) {
        // Si un nouvel ID valide est fourni via l'Input et différent de l'actuel, réinitialiser
        this.initializeComponent(newId);
      } else if (newId === undefined || newId <= 0) {
         // Si l'ID devient invalide ou undefined (ex: admin efface sa recherche)
        console.log('[ProductReviews] Input ID removed or invalid, clearing state.');
        this.clearComponentState();
      }
    }
  }

  // --- NOUVEAU: Méthode privée pour centraliser l'initialisation ---
  private initializeComponent(id: number): void {
    if (!id || id <= 0) {
        console.error("[ProductReviews] Attempted to initialize with invalid ID:", id);
        this.clearComponentState();
        this.loadError = "ID Produit invalide fourni.";
        return;
    }

    console.log(`[ProductReviews] Setting up for Product ID: ${id}`);
    this.productId = id; // Définit l'ID interne

    // Réinitialiser l'état avant de charger les nouvelles données
    this.avisToEdit = null;
    this.showAddForm = false;
    this.currentPage = 0; // Toujours revenir à la page 1
    this.currentFilterNote = null; // Réinitialiser le filtre
    this.currentSort = 'date,desc'; // Réinitialiser le tri (ou garder le précédent?)
    this.loadError = null;
    this.isLoading = false;
    this.reviewsSubject.next(null); // Vider les anciens avis
    this.averageRating$ = undefined; // Vider l'ancienne moyenne

    // Charger les nouvelles données pour le nouvel ID
    this.loadAverageRating();
    this.loadReviews();
  }

  // --- NOUVEAU: Méthode privée pour effacer l'état ---
  private clearComponentState(): void {
      console.log("[ProductReviews] Clearing component state.");
      this.productId = 0; // Ou une autre valeur indiquant "pas d'ID"
      this.averageRating$ = of(null); // Mettre la moyenne à null
      this.reviewsSubject.next(null); // Vider la liste des avis
      this.avisToEdit = null;
      this.showAddForm = false;
      this.loadError = "Aucun produit sélectionné ou ID invalide.";
      this.isLoading = false;
      // Réinitialisez d'autres états si nécessaire (currentPage, filtres...)
      this.currentPage = 0;
      this.currentFilterNote = null;
      this.currentSort = 'date,desc';
  }


  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  // --- Méthodes de chargement (utilisent maintenant this.productId) ---
  loadAverageRating(): void {
    // --- MODIFIÉ: Vérifier this.productId ---
    if (!this.productId || this.productId <= 0) {
      this.averageRating$ = of(null); // Assigner un observable null si pas d'ID valide
      return;
    }
    this.averageRating$ = this.avisService.getAverageRating(this.productId).pipe(
      catchError(err => {
        console.error(`[ProductReviews] Erreur chargement note moyenne pour ID ${this.productId}:`, err);
        return of(null); // Retourne null en cas d'erreur
      })
    );
  }

  loadReviews(): void {
    // --- MODIFIÉ: Vérifier this.productId ---
    if (!this.productId || this.productId <= 0) {
      this.reviewsSubject.next(null); // Pas d'avis si pas d'ID valide
      this.isLoading = false; // S'assurer que loading est false
      return;
    }

    this.isLoading = true;
    this.loadError = null; // Réinitialiser l'erreur à chaque chargement

    // Utilise this.productId, this.currentPage, etc.
    this.avisService.getReviewsForProduct(
      this.productId,
      this.currentPage,
      this.pageSize,
      this.currentFilterNote,
      this.currentSort
    ).pipe(
      takeUntil(this.destroy$),
      tap(response => {
         // Gestion de la pagination si la page actuelle devient invalide (ex: après suppression)
         if(response && response.totalPages > 0 && this.currentPage >= response.totalPages) {
             console.log(`[ProductReviews] Current page ${this.currentPage} is out of bounds (Total: ${response.totalPages}). Going to last page.`);
             this.currentPage = response.totalPages - 1;
             if(this.currentPage >= 0) {
                 this.loadReviews(); // Relance avec la page corrigée
             } else {
                  // Cas où il n'y a plus de pages du tout
                  this.reviewsSubject.next(response);
             }
         } else if (response) {
             this.reviewsSubject.next(response); // Mettre à jour les données
         } else {
              // Cas où la réponse est null/undefined (peut arriver avec catchError)
              this.reviewsSubject.next(null);
         }
      }),
      catchError(err => {
        console.error(`[ProductReviews] Erreur chargement avis pour ID ${this.productId}:`, err);
        this.loadError = "Erreur lors du chargement des avis.";
        this.reviewsSubject.next(null); // Mettre à null en cas d'erreur
        return of(null); // Retourner un observable qui complète
      }),
      finalize(() => {
        this.isLoading = false; // Arrêter le chargement dans tous les cas
      })
    ).subscribe();
  }

  // --- Méthodes pour la Pagination (inchangées, utilisent loadReviews) ---
  goToPage(pageNumber: number): void {
    if (pageNumber !== this.currentPage && pageNumber >= 0) { // Ajouter vérification page >= 0
      this.currentPage = pageNumber;
      this.loadReviews();
    }
  }

  nextPage(): void {
     // La désactivation se fait via `reviewsPage.last` dans le template
     this.currentPage++;
     this.loadReviews();
  }

  previousPage(): void {
     // La désactivation se fait via `reviewsPage.first` dans le template
     if (this.currentPage > 0) { // S'assurer de ne pas aller en dessous de 0
        this.currentPage--;
        this.loadReviews();
     }
  }

  // --- Méthode pour le Filtrage par Note (inchangée, utilise loadReviews) ---
  applyFilter(note: string | null): void {
     const filterValue = (note === null || note === 'null' || note === '') ? null : parseInt(note, 10);
     // Validation optionnelle de la note (1-5)
     const validFilterValue = (filterValue !== null && (filterValue < 1 || filterValue > 5)) ? null : filterValue;

     if (this.currentFilterNote !== validFilterValue) {
        this.currentFilterNote = validFilterValue;
        this.currentPage = 0; // Revenir à la première page
        this.loadReviews();
     }
  }

  // --- Méthode pour le Tri (inchangée, utilise loadReviews) ---
  applySort(sortValue: string): void {
    if (this.currentSort !== sortValue) {
        this.currentSort = sortValue;
        this.currentPage = 0; // Revenir à la première page
        this.loadReviews();
    }
  }

  // --- Méthodes CRUD mises à jour ---
  handleAvisSubmit(avis: Avis): void {
      // --- MODIFIÉ: Vérifier this.productId ---
      if (!this.productId || this.productId <= 0) {
            console.error("[ProductReviews] Cannot submit review without a valid Product ID.");
            this.loadError = "Erreur interne : ID Produit manquant ou invalide.";
            return;
      }

      const isUpdate = !!avis.id;
      // Assurez-vous que l'ID produit est correctement défini, surtout pour l'ajout
      const avisPayload = isUpdate ? avis : { ...avis, productId: this.productId };

      console.log(`[ProductReviews] Submitting review (Update: ${isUpdate}):`, avisPayload);

      const operation$ = isUpdate
          ? this.avisService.updateReview(avis.id!, avisPayload) // Utilisez avisPayload ici aussi par cohérence
          : this.avisService.addReview(avisPayload);

      this.isLoading = true;

      operation$.pipe(
          takeUntil(this.destroy$),
          finalize(() => this.isLoading = false)
      ).subscribe({
          next: (savedAvis) => { // Le backend retourne souvent l'avis sauvegardé
              console.log(`[ProductReviews] Avis ${isUpdate ? 'mis à jour' : 'ajouté'} avec succès:`, savedAvis);
              this.hideForm(); // Masquer le formulaire
              this.loadAverageRating(); // Mettre à jour la note moyenne
              // Recharger les avis de la page courante pour voir le nouvel avis/modif
              this.loadReviews();
              // Optionnel : Aller à la première page après un ajout ?
              // if (!isUpdate) { this.goToPage(0); }
          },
          error: (err) => {
              console.error(`[ProductReviews] Erreur ${isUpdate ? 'MàJ' : 'ajout'} avis:`, err);
              this.loadError = `Erreur lors de ${isUpdate ? 'la mise à jour' : "l'ajout"} de l'avis. Vérifiez les données saisies.`;
              // Laisser le formulaire ouvert pour correction
          }
      });
  }

  handleDeleteRequest(id: number | undefined): void { // Gérer le cas où id est undefined
    if (id === undefined) {
        console.error("[ProductReviews] Attempted to delete review with undefined ID.");
        return;
    }
    if (confirm(`Êtes-vous sûr de vouloir supprimer l'avis ID ${id} ?`)) {
      this.isLoading = true;
      this.avisService.deleteReview(id).pipe(
          takeUntil(this.destroy$),
          finalize(() => this.isLoading = false)
      ).subscribe({
        next: () => {
          console.log(`[ProductReviews] Avis ID ${id} supprimé !`);
           // Si l'avis en cours d'édition a été supprimé, fermer le formulaire
           if (this.avisToEdit?.id === id) {
                this.hideForm();
           }
           this.loadAverageRating(); // Mettre à jour la note moyenne
           // Recharger la page actuelle. `loadReviews` gère si la page devient vide.
           this.loadReviews();
        },
        error: (err) => {
             console.error(`[ProductReviews] Erreur suppression avis ID ${id}:`, err);
             this.loadError = "Erreur lors de la suppression de l'avis.";
        }
      });
    }
  }

  handleEditRequest(avis: Avis): void {
     // Pas besoin de vérifier productId ici, on modifie un avis existant
     this.avisToEdit = { ...avis }; // Copier l'objet pour éviter la modification directe
     this.showAddForm = true; // Afficher le formulaire (le template gère le titre "Modifier")
     console.log("[ProductReviews] Editing review:", this.avisToEdit);
     // Scroll vers le formulaire pour le rendre visible
     setTimeout(() => document.querySelector('app-avis-form')?.scrollIntoView({ behavior: 'smooth', block: 'start' }), 50);
  }

  displayAddForm(): void {
    // --- MODIFIÉ: Vérifier productId ---
    if (!this.productId || this.productId <= 0) {
        console.warn("[ProductReviews] Cannot display add form without a valid Product ID.");
        this.loadError = "Veuillez d'abord sélectionner un produit valide.";
        return;
    }
    this.avisToEdit = null; // Assurez-vous qu'on n'est pas en mode édition
    this.showAddForm = true;
    console.log("[ProductReviews] Displaying add form.");
    // Réinitialiser le formulaire enfant (important si on annule une édition puis on ajoute)
    setTimeout(() => this.avisFormComponent?.resetForm(), 0); // Utiliser resetForm du composant enfant
    // Scroll vers le formulaire
    setTimeout(() => document.querySelector('app-avis-form')?.scrollIntoView({ behavior: 'smooth', block: 'start' }), 50);
  }

  hideForm(): void {
      this.showAddForm = false;
      this.avisToEdit = null; // Quitter le mode édition aussi
      console.log("[ProductReviews] Hiding form.");
  }
}
</file>

<file path="src/app/features/avis/services/avis.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { AvisService } from './avis.service';

describe('AvisService', () => {
  let service: AvisService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AvisService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/features/avis/services/avis.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
// import { environment } from '../../environments/environment';
import { Avis } from '../models/avis.model'; // Importez votre modèle
import { PaginatedAvisResponse } from '../models/page.model'; // Importer le modèle de page

@Injectable({
  providedIn: 'root' // Service disponible globalement
})
export class AvisService {

  private apiUrl = 'http://localhost:8089/avis'; // Utilise l'URL de l'environnement
  ; // Utilise l'URL de l'environnementy
  constructor(private http: HttpClient) { }

  // GET /avis
  getAllReviews(): Observable<Avis[]> {
    return this.http.get<Avis[]>(this.apiUrl);
  }

  // POST /avis
  addReview(avis: Avis): Observable<Avis> {
    // Assurez-vous que l'objet avis contient userId, productId, note, commentaire
    // L'ID sera généré par le backend
    return this.http.post<Avis>(this.apiUrl, avis);
  }

  // DELETE /avis/{id}
  deleteReview(id: number): Observable<void> { // Pas de contenu retourné (void)
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }

  // GET /avis/average/{productId}
  getAverageRating(productId: number): Observable<number> {
    return this.http.get<number>(`${this.apiUrl}/average/${productId}`);
  }

  // PUT /avis/{id}
  updateReview(id: number, avis: Avis): Observable<Avis> {
    return this.http.put<Avis>(`${this.apiUrl}/${id}`, avis);
  }

  // GET /avis/filter?min={min}&max={max}
  getReviewsByNoteRange(min: number, max: number): Observable<Avis[]> {
    let params = new HttpParams()
      .set('min', min.toString())
      .set('max', max.toString());
    return this.http.get<Avis[]>(`${this.apiUrl}/filter`, { params });
  }

  // GET /avis/categorized?threshold={threshold}
  // Définissons une interface pour la réponse
  getCategorizedReviews(threshold: number): Observable<{ positive: Avis[], negative: Avis[] }> {
     let params = new HttpParams().set('threshold', threshold.toString());
     return this.http.get<{ positive: Avis[], negative: Avis[] }>(`${this.apiUrl}/categorized`, { params });
  }

  // GET /avis/highest-rated
  getHighestRatedReviews(): Observable<Avis[]> {
    return this.http.get<Avis[]>(`${this.apiUrl}/highest-rated`);
  }

  // GET /avis/lowest-rated
  getLowestRatedReviews(): Observable<Avis[]> {
    return this.http.get<Avis[]>(`${this.apiUrl}/lowest-rated`);
  }



 // **** NOUVELLE MÉTHODE PAGINÉE ****
 getReviewsForProduct(
  productId: number,
  page: number,
  size: number,
  note?: number | null, // note peut être un nombre ou null (pour 'tous')
  sort: string = 'date,desc' // Tri par défaut
): Observable<PaginatedAvisResponse> {

  let params = new HttpParams()
    .set('page', page.toString())
    .set('size', size.toString())
    .set('sort', sort); // Ajouter le tri

  if (note !== null && note !== undefined) {
       // On ajoute le paramètre 'note' seulement s'il a une valeur valide
       if (note >= 1 && note <= 5) {
           params = params.set('note', note.toString());
       } else {
           console.warn("Tentative de filtrage avec une note invalide :", note);
           // Ne pas ajouter le paramètre si la note est invalide (ou lancer une erreur ?)
       }
  }

  // Appel du nouvel endpoint backend
  return this.http.get<PaginatedAvisResponse>(`${this.apiUrl}/product/${productId}`, { params });
}
// **** FIN NOUVELLE MÉTHODE ****
 // **** NOUVELLE MÉTHODE POUR LA LISTE GLOBALE PAGINÉE ****
 getAllReviewsPaginated(
  page: number,
  size: number,
  sort: string = 'date,desc' // Tri par défaut
): Observable<PaginatedAvisResponse> {

  let params = new HttpParams()
    .set('page', page.toString())
    .set('size', size.toString())
    .set('sort', sort);

  // Appel du NOUVEL endpoint backend (ex: /avis/paginated)
  // Assurez-vous que l'URL est correcte !
  return this.http.get<PaginatedAvisResponse>(`${this.apiUrl}/paginated`, { params });
}
// **** FIN NOUVELLE MÉTHODE ****

}
</file>

<file path="src/app/features/category/category-routing.module.ts">
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { CategoryListComponent } from './components/category-list/category-list.component';
import { CategoryFormComponent } from './components/category-form/category-form.component';

const routes: Routes = [
  { path: '', component: CategoryListComponent },
  { path: 'subcategories/:parentId', component: CategoryListComponent },
  { path: 'add', component: CategoryFormComponent },
  { path: 'add-subcategory/:parentId', component: CategoryFormComponent },
  { path: 'edit/:id', component: CategoryFormComponent },
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class CategoryRoutingModule {}
</file>

<file path="src/app/features/category/category.module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router'; // ✅ Import nécessaire pour routerLink

import { CategoryRoutingModule } from './category-routing.module';

// Components
import { CategoryListComponent } from './components/category-list/category-list.component';
import { CategoryFormComponent } from './components/category-form/category-form.component';

// Angular Material Modules
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatButtonModule } from '@angular/material/button';
import { MatTableModule } from '@angular/material/table';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatIconModule } from '@angular/material/icon';
import { MatOptionModule } from '@angular/material/core';

@NgModule({
  declarations: [
    CategoryListComponent,
    CategoryFormComponent
  ],
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    RouterModule, // ✅ Ajout ici
    CategoryRoutingModule,

    // Angular Material
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatButtonModule,
    MatTableModule,
    MatPaginatorModule,
    MatIconModule,
    MatOptionModule
  ]
})
export class CategorisModule {}
</file>

<file path="src/app/features/category/components/category-form/category-form.component.css">
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lora:wght@400;500&display=swap');

.container {
  max-width: 600px;
  margin: 0 auto;
  padding: 30px;
  background: linear-gradient(135deg, #fff0f5 0%, #f5e6ff 100%);
  border-radius: 20px;
  box-shadow: 0 6px 25px rgba(255, 192, 203, 0.3);
  border: 1px solid #ffe4e1;
  font-family: 'Lora', serif;
}

h2 {
  font-family: 'Playfair Display', serif;
  color: #ff6f91;
  font-size: 2.5rem;
  text-align: center;
  margin-bottom: 30px;
  text-shadow: 1px 1px 3px rgba(255, 105, 145, 0.2);
  position: relative;
}

h2::after {
  content: '✨';
  position: absolute;
  font-size: 1.5rem;
  margin-left: 10px;
  color: #ff6f91;
}

.alert-danger {
  background-color: #fff1f5;
  color: #e91e63;
  border-radius: 10px;
  padding: 15px;
  margin-bottom: 25px;
  border: 1px solid #ffccd5;
  box-shadow: 0 2px 10px rgba(255, 105, 145, 0.1);
}

.form-group {
  display: flex;
  flex-direction: column;
  font-family: 'Lora', serif;
}

label {
  margin-bottom: 5px;
  color: #ff6f91;
  font-weight: 500;
  font-size: 1.05rem;
}

.custom-input,
.custom-select {
  padding: 10px 15px;
  border: 2px solid #ffabc1;
  border-radius: 10px;
  background: linear-gradient(135deg, #fff5f7 0%, #f9edff 100%);
  font-size: 1rem;
  font-family: 'Lora', serif;
  color: #4a4a4a;
}

.custom-input::placeholder {
  color: #ff8fab;
  opacity: 0.7;
}

.error-msg {
  color: #e91e63;
  font-size: 0.9rem;
  margin-top: 5px;
}

.d-flex {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
}

button {
  font-family: 'Lora', serif;
  border-radius: 25px;
  padding: 8px 20px;
  font-size: 1rem;
  border: none;
  cursor: pointer;
  transition: transform 0.3s ease, background-color 0.3s ease, box-shadow 0.3s ease;
}

.btn-primary {
  background: linear-gradient(135deg, #ff8fab 0%, #ffccd5 100%);
  color: #fff;
}

.btn-primary:hover {
  background: linear-gradient(135deg, #ff6f91 0%, #ffabc1 100%);
  transform: scale(1.05);
  box-shadow: 0 3px 10px rgba(255, 105, 145, 0.3);
}

.btn-primary:disabled {
  background: #e0e0e0;
  color: #a0a0a0;
  cursor: not-allowed;
}

.btn-warn {
  background: linear-gradient(135deg, #d39bff 0%, #f5e6ff 100%);
  color: #fff;
}

.btn-warn:hover {
  background: linear-gradient(135deg, #b46bff 0%, #e6d0ff 100%);
  transform: scale(1.05);
  box-shadow: 0 3px 10px rgba(216, 155, 255, 0.3);
}

.me-2 {
  margin-right: 8px;
}

.mt-4 {
  margin-top: 24px;
}
</file>

<file path="src/app/features/category/components/category-form/category-form.component.html">
<!DOCTYPE html>
<html>
<head>
  <!-- Include Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <!-- Include Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lora:wght@400;500&display=swap" rel="stylesheet">
</head>
<body>
  <div class="container mt-4">
    <h2>{{ categoryId ? 'Edit Category' : 'Add Category' }}</h2>

    <div *ngIf="errorMessage" class="alert-danger">
      {{ errorMessage }}
    </div>

    <form [formGroup]="categoryForm" (ngSubmit)="onSubmit()">
      <!-- Name -->
      <div class="form-group mb-3">
        <label for="name">Name</label>
        <input
          id="name"
          class="custom-input"
          formControlName="name"
          placeholder="Enter category name"
          required
        />
        <div class="error-msg" *ngIf="categoryForm.get('name')?.hasError('required')">
          Name is required
        </div>
      </div>

      <!-- Description -->
      <div class="form-group mb-3">
        <label for="description">Description</label>
        <input
          id="description"
          class="custom-input"
          formControlName="description"
          placeholder="Enter description"
          required
        />
        <div class="error-msg" *ngIf="categoryForm.get('description')?.hasError('required')">
          Description is required
        </div>
      </div>

      <!-- Parent Category -->
      <div class="form-group mb-3">
        <label for="parentId">Parent Category</label>
        <select id="parentId" class="custom-select" formControlName="parentId">
          <option [ngValue]="null">None</option>
          <option *ngFor="let category of mainCategories" [ngValue]="category.id">
            {{ category.name }}
          </option>
        </select>
      </div>

      <!-- Buttons -->
      <div class="d-flex justify-content-end">
        <button type="submit" class="btn-primary me-2" [disabled]="categoryForm.invalid">
          {{ categoryId ? 'Update' : 'Add' }}
        </button>
        <button type="button" class="btn-warn" (click)="cancel()">Cancel</button>
      </div>
    </form>
  </div>

  <!-- Icon footer with fashion elements -->
  <div class="icon-footer">
    <i class="fas fa-shoe-prints icon"></i> <!-- High heels -->
    <i class="fas fa-tshirt icon"></i> <!-- Dress -->
    <i class="fas fa-handbag icon"></i> <!-- Handbag -->
    <i class="fas fa-gem icon"></i> <!-- Jewelry -->
    <i class="fas fa-hat-wizard icon"></i> <!-- Hat -->
    <i class="fas fa-glasses icon"></i> <!-- Sunglasses -->
    <i class="fas fa-shoe-prints icon"></i>
    <i class="fas fa-tshirt icon"></i>
    <i class="fas fa-handbag icon"></i>
    <i class="fas fa-gem icon"></i>
  </div>

  <style>
    /* Body styling with white background and centering */
    body {
      margin: 0;
      font-family: 'Lora', serif;
      background-color: #ffffff; /* Pure white */
      color: #4a4a4a;
      position: relative;
      min-height: 100vh; /* Full viewport height */
      display: flex;
      justify-content: center; /* Horizontal centering */
      align-items: flex-start; /* Align to top */
      overflow-x: hidden;
    }

    /* Bottom gradient */
    body::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 200px;
      background: linear-gradient(to top, rgba(248, 187, 208, 0.7), transparent); /* Baby pink gradient */
      z-index: 1; /* Behind form, above icons */
    }

    /* Container Styling */
    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: 30px;
      background: linear-gradient(135deg, #fff0f5 0%, #f5e6ff 100%);
      border-radius: 20px;
      box-shadow: 0 6px 25px rgba(255, 192, 203, 0.3);
      border: 1px solid #ffe4e1;
      font-family: 'Lora', serif;
      position: relative;
      z-index: 2; /* Above gradient */
      margin-top: 40px;
      margin-bottom: 220px; /* Ensure space for gradient and icons */
    }

    h2 {
      font-family: 'Playfair Display', serif;
      color: #ff6f91;
      font-size: 2.5rem;
      text-align: center;
      margin-bottom: 30px;
      text-shadow: 1px 1px 3px rgba(255, 105, 145, 0.2);
    }

    .alert-danger {
      background-color: #ffe4e1;
      color: #c71585;
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 20px;
      text-align: center;
    }

    .form-group {
      display: flex;
      flex-direction: column;
    }

    label {
      color: #ff6f91;
      font-weight: 600;
      margin-bottom: 8px;
      font-size: 14px;
      letter-spacing: 0.5px;
    }

    .custom-input,
    .custom-select {
      width: 100%;
      padding: 12px;
      border: 1px solid #e1b8d3;
      border-radius: 5px;
      background-color: #fdf7fa;
      font-size: 16px;
      color: #333;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .custom-input:focus,
    .custom-select:focus {
      outline: none;
      border-color: #c71585;
      box-shadow: 0 0 8px rgba(199, 21, 133, 0.3);
      background-color: #fff;
    }

    .error-msg {
      color: #c71585;
      font-size: 12px;
      margin-top: 5px;
    }

    .btn-primary {
      padding: 10px 20px;
      background: linear-gradient(90deg, #c71585, #db7093);
      border: none;
      border-radius: 5px;
      color: #fff;
      font-size: 14px;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 1px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.2s ease;
    }

    .btn-primary:hover {
      background: linear-gradient(90deg, #db7093, #c71585);
      transform: translateY(-2px);
    }

    .btn-primary:disabled {
      background: #ccc;
      cursor: not-allowed;
    }

    .btn-warn {
      padding: 10px 20px;
      background: linear-gradient(90deg, #ff6f91, #ffe4e1);
      border: none;
      border-radius: 5px;
      color: #fff;
      font-size: 14px;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 1px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.2s ease;
    }

    .btn-warn:hover {
      background: linear-gradient(90deg, #ffe4e1, #ff6f91);
      transform: translateY(-2px);
    }

    .d-flex {
      display: flex;
    }

    .justify-content-end {
      justify-content: flex-end;
    }

    .me-2 {
      margin-right: 10px;
    }

    /* Icon Footer Styling */
    .icon-footer {
      position: absolute;
      bottom: 10px;
      left: 0;
      width: 100%;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 30px;
      z-index: 0; /* Behind form, below gradient */
      padding: 0 20px;
    }

    .icon-footer .icon {
      color: #f8bbd0; /* Baby pink */
      font-size: 35px;
      opacity: 0.85;
      transition: transform 0.3s ease;
    }

    .icon-footer .icon:hover {
      transform: scale(1.2);
    }
  </style>
</body>
</html>
</file>

<file path="src/app/features/category/components/category-form/category-form.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CategoryFormComponent } from './category-form.component';

describe('CategoryFormComponent', () => {
  let component: CategoryFormComponent;
  let fixture: ComponentFixture<CategoryFormComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [CategoryFormComponent]
    });
    fixture = TestBed.createComponent(CategoryFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/category/components/category-form/category-form.component.ts">
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CategoryService } from '../../services/category.service';
import { Category } from '../../models/category';
import { ActivatedRoute, Router } from '@angular/router';
import { HttpErrorResponse } from '@angular/common/http';
import { Page } from '../../models/page';

@Component({
  selector: 'app-category-form',
  templateUrl: './category-form.component.html',
  styleUrls: ['./category-form.component.css']
})
export class CategoryFormComponent implements OnInit {
  categoryForm: FormGroup;
  categoryId: number | null = null;
  parentId: number | null = null;
  mainCategories: Category[] = [];
  errorMessage: string | null = null;

  constructor(
    private fb: FormBuilder,
    private categoryService: CategoryService,
    private route: ActivatedRoute,
    private router: Router
  ) {
    this.categoryForm = this.fb.group({
      name: ['', Validators.required],
      description: ['', Validators.required],
      parentId: [null]
    });
  }

  ngOnInit(): void {
    // Fetch main categories with pagination (e.g., first page with a large size)
    this.categoryService.getMainCategories(0, 100, 'name,asc').subscribe({
      next: (pageData: Page<Category>) => {
        this.mainCategories = pageData.content; // Extract categories from the Page object
      },
      error: (err: HttpErrorResponse) => {
        console.error('Error loading main categories:', err);
        this.errorMessage = 'Error loading main categories. Please try again.';
      }
    });

    this.route.paramMap.subscribe(params => {
      const id = params.get('id');
      const parentId = params.get('parentId');

      if (id) {
        this.categoryId = +id;
        this.categoryService.getCategoryById(this.categoryId).subscribe({
          next: (category: Category) => {
            this.categoryForm.patchValue({
              name: category.name,
              description: category.description,
              parentId: category.parent ? category.parent.id : null
            });
          },
          error: (err: HttpErrorResponse) => {
            console.error('Error loading category:', err);
            this.errorMessage = 'Error loading category. Please try again.';
          }
        });
      } else if (parentId) {
        this.parentId = +parentId;
        this.categoryForm.patchValue({ parentId: this.parentId });
      }
    });
  }

  onSubmit(): void {
    if (this.categoryForm.invalid) {
      return;
    }

    const formValue = this.categoryForm.value;
    const category: Category = {
      id: this.categoryId || undefined, // Include id for updates
      name: formValue.name,
      description: formValue.description,
      parent: formValue.parentId ? { id: formValue.parentId } as Category : undefined
    };

    if (this.categoryId) {
      this.categoryService.updateCategory(this.categoryId, category).subscribe({
        next: () => this.router.navigate(['/categoris']),
        error: (err: HttpErrorResponse) => {
          console.error('Error updating category:', err);
          this.errorMessage = 'Error updating category. Please try again.';
        }
      });
    } else {
      this.categoryService.addCategory(category).subscribe({
        next: () => this.router.navigate(['/']),
        error: (err: HttpErrorResponse) => {
          console.error('Error adding category:', err);
          this.errorMessage = 'Error adding category. Please try again.';
        }
      });
    }
  }

  cancel(): void {
    this.router.navigate(['/categoris']);
  }
}
</file>

<file path="src/app/features/category/components/category-list/category-list.component.css">
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lora:wght@400;500&display=swap');

.container {
  max-width: 900px;
  margin: 0 auto;
  padding: 30px;
  background: linear-gradient(135deg, #fff0f5 0%, #f5e6ff 100%);
  border-radius: 20px;
  box-shadow: 0 6px 25px rgba(255, 192, 203, 0.3);
  border: 1px solid #ffe4e1;
  font-family: 'Lora', serif;
}

.page-title {
  font-family: 'Playfair Display', serif;
  color: #ff6f91;
  font-size: 2.5rem;
  text-align: center;
  margin-bottom: 30px;
  text-shadow: 1px 1px 3px rgba(255, 105, 145, 0.2);
}

.alert-danger {
  background-color: #fff1f5;
  color: #e91e63;
  border-radius: 10px;
  padding: 15px;
  margin-bottom: 25px;
  border: 1px solid #ffccd5;
  box-shadow: 0 2px 10px rgba(255, 105, 145, 0.1);
}

.custom-input {
  width: 100%;
  padding: 10px 15px;
  border-radius: 10px;
  border: 2px solid #ffabc1;
  background: linear-gradient(135deg, #fff5f7 0%, #f9edff 100%);
  color: #4a4a4a;
  font-size: 1rem;
}

.custom-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  background: white;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 4px 15px rgba(255, 192, 203, 0.1);
}

.custom-table th,
.custom-table td {
  padding: 15px;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.custom-table th {
  background: #f5e6ff;
  color: #ff6f91;
  font-family: 'Playfair Display', serif;
}

.actions {
  white-space: nowrap;
}

.btn-primary,
.btn-warn,
.btn-accent {
  font-family: 'Lora', serif;
  padding: 8px 14px;
  border-radius: 20px;
  text-decoration: none;
  border: none;
  cursor: pointer;
  font-size: 0.95rem;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.btn-primary {
  background: linear-gradient(135deg, #ff8fab 0%, #ffccd5 100%);
  color: white;
}

.btn-warn {
  background: linear-gradient(135deg, #d39bff 0%, #f5e6ff 100%);
  color: white;
}

.btn-accent {
  background: linear-gradient(135deg, #ffd6e0 0%, #f5e6ff 100%);
  color: #6b1f3b;
}

.btn-primary:hover,
.btn-warn:hover,
.btn-accent:hover {
  transform: scale(1.05);
  box-shadow: 0 2px 10px rgba(255, 105, 145, 0.2);
}

.pagination {
  display: flex;
  align-items: center;
  gap: 10px;
}

.mt-3 {
  margin-top: 1rem;
}

.d-flex {
  display: flex;
  justify-content: flex-end;
}

.flex-wrap {
  flex-wrap: wrap;
}

.me-1 {
  margin-right: 0.5rem;
}

.gap-2 {
  gap: 0.5rem;
}
</file>

<file path="src/app/features/category/components/category-list/category-list.component.html">
<!DOCTYPE html>
<html>
<head>
  <!-- Include Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <!-- Include Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lora:wght@400;500&display=swap" rel="stylesheet">
</head>
<body>
  <div class="container mt-4">
    <h2 class="page-title">{{ parentId ? 'Subcategories ✨' : 'Main Categories ✨' }}</h2>

    <!-- Search Input -->
    <div class="search-section mb-3 d-flex align-items-center">
      <input
        type="text"
        class="custom-input me-2"
        placeholder="Enter category name"
        [(ngModel)]="searchTerm"
        (input)="onSearch()"
      />
      <button class="btn-accent" (click)="clearSearch()" *ngIf="searchTerm">Clear</button>
    </div>

    <!-- Error Message -->
    <div *ngIf="errorMessage" class="alert-danger">
      {{ errorMessage }}
    </div>

    <!-- Category Table -->
    <table class="custom-table">
      <thead>
        <tr>
          <th>Name</th>
          <th>Description</th>
          <th class="text-center">Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let category of categories">
          <td>{{ category.name }}</td>
          <td>{{ category.description }}</td>
          <td class="actions text-center">
            <a class="btn-primary me-1" [routerLink]="['/categoris/edit', category.id]">Edit</a>
            <button class="btn-warn me-1" (click)="deleteCategory(category.id!)">Delete</button>
            <a
              class="btn-accent me-1"
              *ngIf="!parentId"
              [routerLink]="['/categoris/subcategories', category.id]">View Subcategories</a>
            <a
              class="btn-accent"
              *ngIf="!parentId"
              [routerLink]="['/categoris/add-subcategory', category.id]">Add Subcategory</a>
          </td>
        </tr>
      </tbody>
    </table>

    <!-- Action Buttons -->
    <div class="mt-3 d-flex flex-wrap gap-2">
      <a class="btn-primary" [routerLink]="['/categoris/add']">Add Main Category</a>
      <a class="btn-accent" [routerLink]="['/external']">View External Categories</a>
    </div>
  </div>

  <!-- Icon footer with fashion elements -->
  <div class="icon-footer">
    <i class="fas fa-shoe-prints icon"></i> <!-- High heels -->
    <i class="fas fa-tshirt icon"></i> <!-- Dress -->
    <i class="fas fa-handbag icon"></i> <!-- Handbag -->
    <i class="fas fa-gem icon"></i> <!-- Jewelry -->
    <i class="fas fa-hat-wizard icon"></i> <!-- Hat -->
    <i class="fas fa-glasses icon"></i> <!-- Sunglasses -->
    <i class="fas fa-shoe-prints icon"></i>
    <i class="fas fa-tshirt icon"></i>
    <i class="fas fa-handbag icon"></i>
    <i class="fas fa-gem icon"></i>
  </div>

  <style>
    /* Body styling with white background and centering */
    body {
      margin: 0;
      font-family: 'Lora', serif;
      background-color: #ffffff; /* Pure white */
      color: #4a4a4a;
      position: relative;
      min-height: 100vh; /* Full viewport height */
      display: flex;
      justify-content: center; /* Horizontal centering */
      align-items: flex-start; /* Align to top */
      overflow-x: hidden;
    }

    /* Bottom gradient */
    body::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 200px;
      background: linear-gradient(to top, rgba(248, 187, 208, 0.7), transparent); /* Baby pink gradient */
      z-index: 1; /* Behind content, above icons */
    }

    /* Base CSS */
    .container {
      max-width: 900px;
      margin: 0 auto;
      padding: 30px;
      background: linear-gradient(135deg, #fff0f5 0%, #f5e6ff 100%);
      border-radius: 20px;
      box-shadow: 0 6px 25px rgba(255, 192, 203, 0.3);
      border: 1px solid #ffe4e1;
      font-family: 'Lora', serif;
      position: relative;
      z-index: 2; /* Above gradient */
      margin-top: 40px;
      margin-bottom: 220px; /* Ensure space for gradient and icons */
    }

    .page-title {
      font-family: 'Playfair Display', serif;
      color: #ff6f91;
      font-size: 2.5rem;
      text-align: center;
      margin-bottom: 30px;
      text-shadow: 1px 1px 3px rgba(255, 105, 145, 0.2);
    }

    .alert-danger {
      background-color: #fff1f5;
      color: #e91e63;
      border-radius: 10px;
      padding: 15px;
      margin-bottom: 25px;
      border: 1px solid #ffccd5;
      box-shadow: 0 2px 10px rgba(255, 105, 145, 0.1);
    }

    .custom-input {
      width: 100%;
      padding: 10px 15px;
      border-radius: 10px;
      border: 2px solid #ffabc1;
      background: linear-gradient(135deg, #fff5f7 0%, #f9edff 100%);
      color: #4a4a4a;
      font-size: 1rem;
    }

    .custom-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
      background: white;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 15px rgba(255, 192, 203, 0.1);
    }

    .custom-table th,
    .custom-table td {
      padding: 15px;
      text-align: left;
      border-bottom: 1px solid #eee;
    }

    .custom-table th {
      background: #f5e6ff;
      color: #ff6f91;
      font-family: 'Playfair Display', serif;
    }

    .actions {
      white-space: nowrap;
    }

    .btn-primary,
    .btn-warn,
    .btn-accent {
      font-family: 'Lora', serif;
      padding: 8px 14px;
      border-radius: 20px;
      text-decoration: none;
      border: none;
      cursor: pointer;
      font-size: 0.95rem;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .btn-primary {
      background: linear-gradient(135deg, #ff8fab 0%, #ffccd5 100%);
      color: white;
    }

    .btn-warn {
      background: linear-gradient(135deg, #d39bff 0%, #f5e6ff 100%);
      color: white;
    }

    .btn-accent {
      background: linear-gradient(135deg, #ffd6e0 0%, #f5e6ff 100%);
      color: #6b1f3b;
    }

    .btn-primary:hover,
    .btn-warn:hover,
    .btn-accent:hover {
      transform: scale(1.05);
      box-shadow: 0 2px 10px rgba(255, 105, 145, 0.2);
    }

    .pagination {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .mt-3 {
      margin-top: 1rem;
    }

    .d-flex {
      display: flex;
      justify-content: flex-end;
    }

    .flex-wrap {
      flex-wrap: wrap;
    }

    .me-1 {
      margin-right: 0.5rem;
    }

    .me-2 {
      margin-right: 1rem;
    }

    .mb-3 {
      margin-bottom: 1rem;
    }

    .gap-2 {
      gap: 0.5rem;
    }

    .align-items-center {
      align-items: center;
    }

    .text-center {
      text-align: center;
    }

    /* Icon Footer Styling */
    .icon-footer {
      position: absolute;
      bottom: 10px;
      left: 0;
      width: 100%;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 30px;
      z-index: 0; /* Behind content, below gradient */
      padding: 0 20px;
    }

    .icon-footer .icon {
      color: #f8bbd0; /* Baby pink */
      font-size: 35px;
      opacity: 0.85;
      transition: transform 0.3s ease;
    }

    .icon-footer .icon:hover {
      transform: scale(1.2);
    }
  </style>
</body>
</html>
</file>

<file path="src/app/features/category/components/category-list/category-list.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CategoryListComponent } from './category-list.component';

describe('CategoryListComponent', () => {
  let component: CategoryListComponent;
  let fixture: ComponentFixture<CategoryListComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [CategoryListComponent]
    });
    fixture = TestBed.createComponent(CategoryListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/category/components/category-list/category-list.component.ts">
import { Component, OnInit, OnDestroy } from '@angular/core';
import { CategoryService } from '../../services/category.service';
import { Category } from '../../models/category';
import { Page } from '../../models/page';
import { ActivatedRoute, Router } from '@angular/router';
import { HttpErrorResponse } from '@angular/common/http';
import { PageEvent } from '@angular/material/paginator';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';

@Component({
  selector: 'app-category-list',
  templateUrl: './category-list.component.html',
  styleUrls: ['./category-list.component.css']
})
export class CategoryListComponent implements OnInit, OnDestroy {
  categories: Category[] = [];
  totalElements = 0;
  currentPage = 0;
  pageSize = 10;
  sort = 'name,asc';
  parentId: number | null = null;
  errorMessage: string | null = null;
  searchTerm = '';
  displayedColumns = ['name', 'description', 'actions'];

  private searchSubject = new Subject<string>();
  private destroy$ = new Subject<void>();

  constructor(
    private categoryService: CategoryService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.route.paramMap.subscribe(params => {
      this.parentId = params.get('parentId') ? +params.get('parentId')! : null;
      this.loadCategories();
    });

    this.searchSubject
      .pipe(
        debounceTime(300),
        distinctUntilChanged(),
        takeUntil(this.destroy$)
      )
      .subscribe(() => this.loadCategories());
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  loadCategories(): void {
    this.errorMessage = null;

    const request = this.searchTerm.trim()
      ? this.categoryService.searchCategories(this.searchTerm, this.currentPage, this.pageSize, this.sort)
      : this.parentId
        ? this.categoryService.getSubCategories(this.parentId, this.currentPage, this.pageSize, this.sort)
        : this.categoryService.getMainCategories(this.currentPage, this.pageSize, this.sort);

    request.subscribe({
      next: (pageData: Page<Category>) => {
        this.categories = pageData.content;
        this.totalElements = pageData.totalElements;
      },
      error: (err: HttpErrorResponse) => this.handleError(err)
    });
  }

  handlePageEvent(event: PageEvent): void {
    this.currentPage = event.pageIndex;
    this.pageSize = event.pageSize;
    this.loadCategories();
  }

  onSearch(): void {
    this.currentPage = 0; // Reset to first page on new search
    this.searchSubject.next(this.searchTerm);
  }

  clearSearch(): void {
    this.searchTerm = '';
    this.currentPage = 0;
    this.loadCategories();
  }

  deleteCategory(id: number): void {
    if (confirm('Are you sure you want to delete this category?')) {
      this.categoryService.deleteCategory(id).subscribe({
        next: () => this.loadCategories(),
        error: (err: HttpErrorResponse) => console.error('Error deleting category:', err)
      });
    }
  }

  private handleError(err: HttpErrorResponse): void {
    console.error('Error:', err);
    if (err.status === 404 && this.parentId) {
      this.errorMessage = 'Parent category not found. Redirecting to main categories...';
      setTimeout(() => this.router.navigate(['/']), 2000);
    } else {
      this.errorMessage = `An error occurred: ${err.message}`;
    }
  }
}
</file>

<file path="src/app/features/category/models/category.ts">
export interface Category {
  id?: number;
  name: string;
  description: string;
  parent?: Category;
  createdAt?: string;
  updatedAt?: string;
}
</file>

<file path="src/app/features/category/models/page.ts">
export interface Page<T> {
  content: T[];
  totalElements: number;
  totalPages: number;
  number: number;
  size: number;
}
</file>

<file path="src/app/features/category/models/user.ts">
export interface User {
    _id?: string; // ID MongoDB
    id?: number;  // ID auto-incrémenté
    name: string;
    email: string;
    password?: string; // Optionnel côté client après inscription/connexion
    role: 'Client' | 'Admin';
    adresse?: string;
    telephone?: string;
  }
</file>

<file path="src/app/features/category/services/auth.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/features/category/services/auth.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { User } from '../models/user';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = 'http://localhost:3000/api/auth';
  private loggedInSubject = new BehaviorSubject<boolean>(this.isLoggedIn());

  constructor(private http: HttpClient) {}

  register(user: User): Observable<{ token: string }> {
    return this.http.post<{ token: string }>(`${this.apiUrl}/register`, user);
  }

  login(credentials: { email: string; password: string }): Observable<{ token: string }> {
    return this.http.post<{ token: string }>(`${this.apiUrl}/login`, credentials);
  }

  setToken(token: string): void {
    localStorage.setItem('token', token);
    this.loggedInSubject.next(true);
  }

  getToken(): string | null {
    return localStorage.getItem('token');
  }

  isLoggedIn(): boolean {
    return !!this.getToken();
  }

  logout(): void {
    localStorage.removeItem('token');
    this.loggedInSubject.next(false);
  }

  getAuthHeaders(): HttpHeaders {
    const token = this.getToken();
    return new HttpHeaders().set('Authorization', `Bearer ${token}`);
  }

  // Observable pour écouter les changements d’état
  getLoggedInStatus(): Observable<boolean> {
    return this.loggedInSubject.asObservable();
  }
}
</file>

<file path="src/app/features/category/services/category.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { CategoryService } from './category.service';

describe('CategoryService', () => {
  let service: CategoryService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(CategoryService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/features/category/services/category.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Category } from '../models/category';
import { Page } from '../models/page';

@Injectable({
  providedIn: 'root'
})
export class CategoryService {
  private apiUrl = 'http://localhost:8488/api/categories';

  constructor(private http: HttpClient) {}

  getMainCategories(page: number, size: number, sort: string): Observable<Page<Category>> {
    const params = new HttpParams()
      .set('page', page.toString())
      .set('size', size.toString())
      .set('sort', sort);
    return this.http.get<Page<Category>>(this.apiUrl, { params });
  }

  getSubCategories(parentId: number, page: number, size: number, sort: string): Observable<Page<Category>> {
    const params = new HttpParams()
      .set('page', page.toString())
      .set('size', size.toString())
      .set('sort', sort);
    return this.http.get<Page<Category>>(`${this.apiUrl}/${parentId}/subcategories`, { params });
  }

  searchCategories(name: string, page: number, size: number, sort: string): Observable<Page<Category>> {
    const params = new HttpParams()
      .set('name', name)
      .set('page', page.toString())
      .set('size', size.toString())
      .set('sort', sort);
    return this.http.get<Page<Category>>(`${this.apiUrl}/search`, { params });
  }

  getCategoryById(id: number): Observable<Category> {
    return this.http.get<Category>(`${this.apiUrl}/${id}`);
  }

  addCategory(category: Category): Observable<Category> {
    return this.http.post<Category>(this.apiUrl, category);
  }

  updateCategory(id: number, category: Category): Observable<Category> {
    return this.http.put<Category>(`${this.apiUrl}/${id}`, category);
  }

  deleteCategory(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}
</file>

<file path="src/app/features/category/services/user.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { UserService } from './user.service';

describe('UserService', () => {
  let service: UserService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UserService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/features/category/services/user.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { User } from '../models/user';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class UserService {
  private apiUrl = 'http://localhost:3000/users';

  constructor(private http: HttpClient, private authService: AuthService) {}

  // Récupérer tous les utilisateurs
  getAllUsers(): Observable<User[]> {
    const headers = this.getAuthHeaders();
    return this.http.get<User[]>(this.apiUrl, { headers });
  }

  // Récupérer le profil de l’utilisateur connecté
  getProfile(): Observable<User> {
    const headers = this.getAuthHeaders();
    return this.http.get<User>(`${this.apiUrl}/profile`, { headers });
  }

  // Générer les headers avec le token
  private getAuthHeaders(): HttpHeaders {
    const token = this.authService.getToken();
    return new HttpHeaders().set('Authorization', `Bearer ${token}`);
  }
}
</file>

<file path="src/app/features/commande/commande-routing.module.ts">
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { OrderListComponent } from './components/order-list/order-list.component';
import { OrderFormComponent } from './components/order-form/order-form.component';
const routes: Routes = [
  { path: '', redirectTo: 'orders', pathMatch: 'full' },
  { path: 'orders', component: OrderListComponent },
  { path: 'orders/add', component: OrderFormComponent },
  { path: 'orders/edit/:id', component: OrderFormComponent },

];
@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class CommandeRoutingModule { }
</file>

<file path="src/app/features/commande/commande.module.ts">
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { OrderListComponent } from './components/order-list/order-list.component';
import { OrderFormComponent } from './components/order-form/order-form.component';
import { CommandeRoutingModule } from './commande-routing.module';
import { CommonModule } from '@angular/common';
@NgModule({
  declarations: [
    OrderListComponent,
    OrderFormComponent
  ],
  imports: [
    CommonModule,
    FormsModule,
    HttpClientModule,
    CommandeRoutingModule
  ]

})
export class commandesModule { }
</file>

<file path="src/app/features/commande/components/order-form/order-form.component.css">
h2 {
    text-align: center;
    color: #333;
    margin-bottom: 30px;
  }
  
  form {
    max-width: 600px;
    margin: auto;
    background-color: #f9f9f9;
    padding: 20px 30px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
  }
  
  label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #444;
  }
  
  input {
    width: 100%;
    padding: 8px 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  button {
    background-color: #e91e63;
    color: white;
    border: none;
    padding: 8px 15px;
    margin-top: 10px;
    margin-right: 5px;
    border-radius: 4px;
    cursor: pointer;
    transition: 0.3s;
  }
  

  
  hr {
    margin: 20px 0;
  }
  
  .product-group {
    margin-bottom: 20px;
    border-top: 1px solid #ddd;
    padding-top: 15px;
  }
  
  .actions {
    text-align: right;
  }
</file>

<file path="src/app/features/commande/components/order-form/order-form.component.html">
<h2>{{ isEditMode ? 'Modifier' : 'Add' }} Command</h2>

<form (ngSubmit)="saveOrder()">

  <label>Email Client :</label>
  <input type="email" [(ngModel)]="order.email" name="email" required>

  <label>User ID :</label>
  <input type="number" [(ngModel)]="order.userId" name="userId" required>

  <h3>Products :</h3>

  <button type="button" (click)="addOrderItem()">+ Add Product</button>

  <div class="product-group" *ngFor="let item of order.orderItems; let i = index">

    <label>Product ID :</label>
    <input type="number" [(ngModel)]="item.productId" name="productId{{i}}" required>

    <label>Quantity :</label>
    <input type="number" [(ngModel)]="item.quantite" name="quantite{{i}}" required>

    <label>Price :</label>
    <input type="number" [(ngModel)]="item.prixUnitaire" name="prixUnitaire{{i}}" required>

    <button type="button" (click)="removeOrderItem(i)" style="background-color: #9e9e9e;">Delete Product</button>

  </div>

  <div class="actions">
    <button type="submit">{{ isEditMode ? 'Modifier' : 'Add' }}</button>
  </div>

</form>
</file>

<file path="src/app/features/commande/components/order-form/order-form.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { OrderFormComponent } from './order-form.component';

describe('OrderFormComponent', () => {
  let component: OrderFormComponent;
  let fixture: ComponentFixture<OrderFormComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [OrderFormComponent]
    });
    fixture = TestBed.createComponent(OrderFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/commande/components/order-form/order-form.component.ts">
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Order } from '../../models/order';
import { OrderItem } from '../../models/order-item';
import { OrderService } from 'src/app/features/commande/services/order.service';

@Component({
  selector: 'app-order-form',
  templateUrl: './order-form.component.html',
  styleUrls: ['./order-form.component.css']
})
export class OrderFormComponent implements OnInit {

  order: Order = {
    userId: 0,
    email: '',
    orderItems: []
  };

  isEditMode: boolean = false;

  constructor(private orderService: OrderService, private route: ActivatedRoute, private router: Router) { }

  ngOnInit(): void {
    const id = Number(this.route.snapshot.paramMap.get('id'));
    if (id) {
      this.isEditMode = true;
      this.orderService.getOrderById(id).subscribe(data => {
        this.order = data;
      });
    }
  }

  addOrderItem(): void {
    const newItem: OrderItem = {
      productId: 0,
      quantite: 1,
      prixUnitaire: 0
    };
    this.order.orderItems.push(newItem);
  }

  removeOrderItem(index: number): void {
    this.order.orderItems.splice(index, 1);
  }

  saveOrder(): void {
    if (this.isEditMode && this.order.id) {
      this.orderService.updateOrder(this.order.id, this.order).subscribe(() => {
        alert('Commande modifiée avec succès');
        this.router.navigate(['/orders']);
      });
    } else {
      this.orderService.createOrder(this.order).subscribe(() => {
        alert('Commande ajoutée avec succès');
        this.router.navigate(['/orders']);
      });
    }
  }
}
</file>

<file path="src/app/features/commande/components/order-list/order-list.component.css">
.container {
    width: 90%;
    margin: 0 auto;
  }
  
  .command-card {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background-color: #fff;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
  }
  
  .product-image {
    width: 80px;
    height: 80px;
    object-fit: contain;
    margin-right: 20px;
  }
  
  .command-info {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    gap: 6px;
  }
  
  .command-info .email {
    font-weight: bold;
    color: #333;
  }
  
  .command-info .status {
    color: #999;
    font-size: 14px;
  }
  
  .command-actions {
    display: flex;
    gap: 10px;
  }
  
  .modifier {
    background-color: #e91e63;
    color: white;
    padding: 8px 12px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: 0.3s;
  }
  
  
  
  .supprimer {
    background-color: #9e9e9e;
    color: white;
    padding: 8px 12px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: 0.3s;
  }
  .add-command-btn {
    background-color: #e91e63;
    color: white;
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    font-weight: inter;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .add-command-btn:hover {
    background-color: #d81b60; /* un peu plus foncé au survol */
  }
</file>

<file path="src/app/features/commande/components/order-list/order-list.component.html">
<h2 style="text-align: center;">List of commands</h2>

<div style="text-align: right; margin-bottom: 20px;">
  <!-- Ajoutez la classe "add-command-btn" ici -->
  <button class="add-command-btn" (click)="addOrder()">Add Command</button>
</div>

<div class="container">
  <div class="command-card" *ngFor="let order of orders">
    <img src="assets/images/default-product.png" alt="Produit" class="product-image">

    <div class="command-info">
      <span class="email">{{ order.email }}</span>
      <span>Total Price : {{ order.totalPrice }} TND</span>
      <span class="status">Statut : {{ order.statut }}</span>
    </div>

    <div class="command-actions">
      <button class="modifier" (click)="editOrder(order.id!)">Edit</button>
      <button class="supprimer" (click)="deleteOrder(order.id!)">Delete</button>
    </div>
  </div>
</div>
</file>

<file path="src/app/features/commande/components/order-list/order-list.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { OrderListComponent } from './order-list.component';

describe('OrderListComponent', () => {
  let component: OrderListComponent;
  let fixture: ComponentFixture<OrderListComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [OrderListComponent]
    });
    fixture = TestBed.createComponent(OrderListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/commande/components/order-list/order-list.component.ts">
import { Component, OnInit } from '@angular/core';
import { Order } from '../../models/order';
import { OrderService } from 'src/app/features/commande/services/order.service';
import { Router } from '@angular/router';
@Component({
  selector: 'app-order-list',
  templateUrl: './order-list.component.html',
  styleUrls: ['./order-list.component.css']
})
export class OrderListComponent implements OnInit {
  orders: Order[] = [];

  constructor(private orderService: OrderService, private router: Router) {}

  ngOnInit(): void {
    this.loadOrders();
  }

  loadOrders(): void {
    this.orderService.getAllOrders().subscribe(data => {
      this.orders = data;
    });
  }

  deleteOrder(id: number): void {
    if (confirm('Voulez-vous vraiment supprimer cette commande ?')) {
      this.orderService.deleteOrder(id).subscribe(() => {
        this.loadOrders();
      }, error => {
        console.error('Erreur lors de la suppression :', error);
      });
    }
  }
  addOrder(): void {
    // Utilisez le chemin absolu correct incluant '/commande'
    this.router.navigate(['/commande/orders/add']); // <--- MODIFICATION ICI
  }
  
  editOrder(id: number): void {
    this.router.navigate(['/orders/edit', id]);
  }
}
</file>

<file path="src/app/features/commande/models/order-item.ts">
export interface OrderItem {
    productId: number;
    quantite: number;
    prixUnitaire: number;
  }
</file>

<file path="src/app/features/commande/models/order.ts">
import { OrderItem } from 'src/app/features/commande/models/order-item';

export interface Order {
  id?: number;
  userId: number;
  email: string;
  statut?: 'PENDING' | 'EXPIRED' | 'DELIVERED' | 'CANCELLED';
  totalPrice?: number;
  orderItems: OrderItem[];
}
</file>

<file path="src/app/features/commande/services/order.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { OrderService } from './order.service';

describe('OrderService', () => {
  let service: OrderService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(OrderService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/features/commande/services/order.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Order } from '../models/order';

@Injectable({
  providedIn: 'root'
})
export class OrderService {

  private baseUrl = 'http://localhost:8087/orders';

  constructor(private http: HttpClient) { }

  getAllOrders(): Observable<Order[]> {
    return this.http.get<Order[]>(this.baseUrl);
  }

  getOrderById(id: number): Observable<Order> {
    return this.http.get<Order>(`${this.baseUrl}/${id}`);
  }

  createOrder(order: Order): Observable<Order> {
    return this.http.post<Order>(this.baseUrl, order);
  }

  updateOrder(id: number, order: Order): Observable<Order> {
    return this.http.put<Order>(`${this.baseUrl}/${id}`, order);
  }

  deleteOrder(id: number): Observable<any> {
    return this.http.delete(`${this.baseUrl}/${id}`, { responseType: 'text' });
  }
}
</file>

<file path="src/app/features/inventory/components/low-stock-alert/low-stock-alert.component.html">
<div *ngIf="showAlert && lowStockItems.length > 0 && !loading" class="inventory-alert inventory-alert-warning inventory-mb-3" role="alert">
  <div class="inventory-d-flex inventory-justify-content-between inventory-align-items-center">
    <div>
      <strong>Low Stock Alert!</strong> {{ lowStockItems.length }} product(s) are below minimum stock level.
    </div>
    <button type="button" class="btn-close" (click)="closeAlert()" aria-label="Close"></button>
  </div>
  
  <div class="inventory-mt-3">
    <ul class="list-group">
      <li *ngFor="let item of lowStockItems" class="list-group-item list-group-item-danger inventory-d-flex inventory-justify-content-between inventory-align-items-center">
        {{ item.productName }}
        <div>
          <span class="inventory-badge inventory-badge-danger me-2">{{ item.stockDisponible }} / {{ item.stock_minimum }}</span>
          <button class="inventory-btn inventory-btn-outline" (click)="viewStockDetails(item.productId!)">View</button>
        </div>
      </li>
    </ul>
  </div>
</div>
</file>

<file path="src/app/features/inventory/components/low-stock-alert/low-stock-alert.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LowStockAlertComponent } from './low-stock-alert.component';

describe('LowStockAlertComponent', () => {
  let component: LowStockAlertComponent;
  let fixture: ComponentFixture<LowStockAlertComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [LowStockAlertComponent]
    });
    fixture = TestBed.createComponent(LowStockAlertComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/inventory/components/low-stock-alert/low-stock-alert.component.ts">
import { Component, OnInit } from "@angular/core"
import { Router } from "@angular/router"
import { Stock } from "../../models/stock.model"
import { StockService } from "../../services/stock.service"

@Component({
  selector: "app-low-stock-alert",
  templateUrl: "./low-stock-alert.component.html",
  styleUrls: ["./low-stock-alert.component.css"],
})
export class LowStockAlertComponent implements OnInit {
  lowStockItems: Stock[] = []
  loading = false
  showAlert = true

  constructor(
    private stockService: StockService,
    private router: Router,
  ) {}

  ngOnInit(): void {
    this.loadLowStockItems()
  }

  loadLowStockItems(): void {
    this.loading = true
    this.stockService.getLowStockItems().subscribe({
      next: (data) => {
        this.lowStockItems = data
        this.loading = false
      },
      error: (err) => {
        console.error("Failed to load low stock items", err)
        this.loading = false
      },
    })
  }

  closeAlert(): void {
    this.showAlert = false
  }

  viewStockDetails(id: number): void {
    this.router.navigate(["/inventory/detail", id])
  }
}
</file>

<file path="src/app/features/inventory/components/stock-detail/stock-detail.component.html">
<div class="inventory-container inventory-mt-3">
  <div class="inventory-card">
    <div class="inventory-header inventory-d-flex inventory-justify-content-between inventory-align-items-center">
      <h2>Stock Details</h2>
      <div>
        <button class="inventory-btn inventory-btn-primary me-2" (click)="editStock()">Edit</button>
        <button class="inventory-btn inventory-btn-info me-2" (click)="viewStockHistory()">History</button>
        <button class="inventory-btn inventory-btn-secondary" (click)="goBack()">Back</button>
      </div>
    </div>
    
    <div class="card-body">
      <div *ngIf="loading" class="inventory-text-center">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      
      <div *ngIf="error" class="inventory-alert inventory-alert-error">{{ error }}</div>
      
      <!-- Stock Details -->
      <div *ngIf="stock" class="row">
        <div class="col-md-6">
          <div class="inventory-card inventory-mb-3">
            <div class="inventory-header">
              <h4>Basic Information</h4>
            </div>
            <div class="card-body">
              <p><strong>Product:</strong> {{ stock.productName }}</p>
              <p><strong>Supplier:</strong> {{ stock.supplierName }}</p>
              <p>
                <strong>Current Stock:</strong> 
                <span [ngClass]="isLowStock() ? 'text-danger' : 'text-success'">
                  {{ stock.stockDisponible }}
                </span>
              </p>
              <p><strong>Minimum Stock:</strong> {{ stock.stock_minimum }}</p>
              <div *ngIf="isLowStock()" class="inventory-alert inventory-alert-warning">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                Low stock alert! Current stock is below minimum level.
              </div>
            </div>
          </div>
        </div>
        
        <div class="col-md-6">
          <!-- Demand Forecast Card -->
          <div class="inventory-card inventory-mb-3">
            <div class="inventory-header">
              <h4>Demand Forecast</h4>
            </div>
            <div class="card-body">
              <div *ngIf="predictedDemand !== undefined">
                <p><strong>Predicted 7-Day Demand:</strong> {{ predictedDemand | number:'1.0-0' }}</p>
                <p>
                  <strong>Days of Inventory:</strong> 
                  <span [ngClass]="getInventoryStatusClass()">
                    {{ getDaysOfInventory() }} days
                  </span>
                </p>
                <div class="progress inventory-mb-3">
                  <div 
                    class="progress-bar" 
                    [ngClass]="{
                      'bg-danger': getDaysOfInventory() <= 7,
                      'bg-warning': getDaysOfInventory() > 7 && getDaysOfInventory() <= 14,
                      'bg-success': getDaysOfInventory() > 14
                    }"
                    [style.width.%]="getDaysOfInventory() > 30 ? 100 : (getDaysOfInventory() / 30) * 100">
                    {{ getDaysOfInventory() }} days
                  </div>
                </div>
              </div>
              <div *ngIf="predictedDemand === undefined">
                <p>Loading demand forecast...</p>
              </div>
            </div>
          </div>
          
          <!-- Process Sale Card -->
          <div class="inventory-card">
            <div class="inventory-header">
              <h4>Process Sale</h4>
            </div>
            <div class="card-body">
              <form [formGroup]="saleForm" (ngSubmit)="processSale()">
                <div class="inventory-form-group">
                  <label for="quantity" class="inventory-form-label">Quantity</label>
                  <input 
                    type="number" 
                    class="inventory-form-control" 
                    id="quantity" 
                    formControlName="quantity"
                    [max]="stock?.stockDisponible || 1">
                  <div *ngIf="saleForm.get('quantity')?.invalid && saleForm.get('quantity')?.touched" class="text-danger">
                    <div *ngIf="saleForm.get('quantity')?.errors?.['required']">Quantity is required</div>
                    <div *ngIf="saleForm.get('quantity')?.errors?.['min']">Quantity must be at least 1</div>
                    <div *ngIf="saleForm.get('quantity')?.errors?.['max']">Quantity cannot exceed 1000</div>
                  </div>
                </div>
                
                <button 
                  type="submit" 
                  class="inventory-btn inventory-btn-success" 
                  [disabled]="saleForm.invalid || loading || !stock || stock.stockDisponible === 0">
                  Process Sale
                </button>
              </form>
              
              <div *ngIf="saleSuccess" class="inventory-alert inventory-alert-success inventory-mt-3">
                Sale processed successfully!
              </div>
              
              <div *ngIf="saleError" class="inventory-alert inventory-alert-error inventory-mt-3">
                {{ saleError }}
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Stock Trend -->
      <div *ngIf="stock && stockTrend" class="inventory-mt-3">
        <div class="inventory-card">
          <div class="inventory-header inventory-d-flex inventory-justify-content-between inventory-align-items-center">
            <h4>Stock Trend Analysis</h4>
            <button class="inventory-btn inventory-btn-info" (click)="viewStockTrend(stock.productId)">View Full Analysis</button>
          </div>
          <div class="card-body">
            <div *ngIf="trendLoading" class="inventory-text-center">
              <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
            </div>
            
            <div *ngIf="!trendLoading" class="row">
              <div class="col-md-4">
                <div class="inventory-card">
                  <div class="card-body inventory-text-center">
                    <h5 class="card-title">Trend</h5>
                    <span class="inventory-badge fs-6"
                      [ngClass]="{
                        'inventory-badge-danger': stockTrend.trend === 'décroissant',
                        'inventory-badge-warning': stockTrend.trend === 'stable',
                        'inventory-badge-success': stockTrend.trend === 'croissant'
                      }">
                      {{ stockTrend.trend === 'décroissant' ? 'Decreasing' : 
                         stockTrend.trend === 'stable' ? 'Stable' : 
                         stockTrend.trend === 'croissant' ? 'Increasing' : stockTrend.trend }}
                    </span>
                  </div>
                </div>
              </div>
              
              <div class="col-md-4">
                <div class="inventory-card">
                  <div class="card-body inventory-text-center">
                    <h5 class="card-title">Suggested Stock</h5>
                    <p class="fs-4">{{ stockTrend.suggestedStock }}</p>
                  </div>
                </div>
              </div>
              
              <div class="col-md-4">
                <div class="inventory-card">
                  <div class="card-body inventory-text-center">
                    <h5 class="card-title">Predicted Demand</h5>
                    <p class="fs-4">{{ stockTrend.predictedDemand | number:'1.0-0' }}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/app/features/inventory/components/stock-detail/stock-detail.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { StockDetailComponent } from './stock-detail.component';

describe('StockDetailComponent', () => {
  let component: StockDetailComponent;
  let fixture: ComponentFixture<StockDetailComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [StockDetailComponent]
    });
    fixture = TestBed.createComponent(StockDetailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/inventory/components/stock-detail/stock-detail.component.ts">
import { Component, OnInit } from "@angular/core"
import  { ActivatedRoute, Router } from "@angular/router"
import { Stock, StockTrend } from "../../models/stock.model"
import {  FormBuilder,  FormGroup, Validators } from "@angular/forms"
import  { StockService } from "../../services/stock.service"

@Component({
  selector: "app-stock-detail",
  templateUrl: "./stock-detail.component.html",
  styleUrls: ["./stock-detail.component.css"],
})
export class StockDetailComponent implements OnInit {
  stock?: Stock
  stockTrend?: StockTrend
  predictedDemand?: number
  loading = false
  trendLoading = false
  error = ""
  saleForm!: FormGroup
  saleSuccess = false
  saleError = ""

  constructor(
    private stockService: StockService,
    private route: ActivatedRoute,
    private router: Router,
    private fb: FormBuilder,
  ) {}

  ngOnInit(): void {
    this.initSaleForm()
    this.route.params.subscribe((params) => {
      if (params["id"]) {
        const productId = +params["id"]
        this.loadStockDetails(productId)
        this.loadStockTrend(productId)
        this.loadDemandForecast(productId)
      }
    })
  }

  initSaleForm(): void {
    this.saleForm = this.fb.group({
      quantity: [1, [Validators.required, Validators.min(1), Validators.max(1000)]],
    })
  }

  loadStockDetails(productId: number): void {
    this.loading = true
    this.stockService.getStockByProductId(productId).subscribe({
      next: (data) => {
        this.stock = data
        this.loading = false
      },
      error: (err) => {
        this.error = "Failed to load stock details"
        console.error(err)
        this.loading = false
      },
    })
  }

  loadStockTrend(productId: number): void {
    this.trendLoading = true
    this.stockService.getStockTrend(productId).subscribe({
      next: (data) => {
        this.stockTrend = data
        this.trendLoading = false
      },
      error: (err) => {
        console.error("Failed to load stock trend", err)
        this.trendLoading = false
      },
    })
  }

  loadDemandForecast(productId: number): void {
    this.stockService.getDemandForecast(productId).subscribe({
      next: (data) => {
        this.predictedDemand = data
      },
      error: (err) => {
        console.error("Failed to load demand forecast", err)
      },
    })
  }

  isLowStock(): boolean {
    return this.stock ? this.stock.stockDisponible <= this.stock.stock_minimum : false
  }

  // New method to process a sale
  processSale(): void {
    if (this.saleForm.invalid || !this.stock) {
      return
    }

    const quantity = this.saleForm.value.quantity
    this.saleSuccess = false
    this.saleError = ""
    this.loading = true

    // First check if stock is sufficient (this will also reduce stock if sufficient)
    this.stockService.isStockSufficient(this.stock.productId, quantity).subscribe({
      next: (isSufficient) => {
        if (isSufficient) {
          // If sufficient, reload stock details to show updated quantity
          this.saleSuccess = true
          this.loadStockDetails(this.stock!.productId)
        } else {
          this.saleError = `Insufficient stock. Only ${this.stock!.stockDisponible} available.`
          this.loading = false
        }
      },
      error: (err) => {
        this.saleError = "Error processing sale"
        console.error(err)
        this.loading = false
      },
    })
  }

  editStock(): void {
    if (this.stock) {
      this.router.navigate(["/inventory/edit", this.stock.productId])
    }
  }

  viewStockHistory(): void {
    if (this.stock) {
      this.router.navigate(["/inventory/history", this.stock.productId])
    }
  }

  goBack(): void {
    this.router.navigate(["/inventory"])
  }

  // Helper method to calculate days of inventory based on predicted demand
  getDaysOfInventory(): number {
    if (!this.stock || !this.predictedDemand || this.predictedDemand === 0) {
      return 0
    }
    // Predicted demand is for 7 days, so calculate daily demand
    const dailyDemand = this.predictedDemand / 7
    return dailyDemand > 0 ? Math.round(this.stock.stockDisponible / dailyDemand) : 0
  }
  viewStockTrend(id: number) {
    this.router.navigate(['/inventory/trend', id]);
  }
  // Helper to get status class based on days of inventory
  getInventoryStatusClass(): string {
    const days = this.getDaysOfInventory()
    if (days <= 7) return "text-danger"
    if (days <= 14) return "text-warning"
    return "text-success"
  }
}
</file>

<file path="src/app/features/inventory/components/stock-form/stock-form.component.html">
<div class="inventory-container inventory-mt-3">
  <div class="inventory-card">
    <div class="inventory-header">
      <h2>{{ isEditMode ? 'Edit Stock' : 'Add New Stock' }}</h2>
    </div>
    <div class="card-body">
      <div *ngIf="loading" class="inventory-text-center">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>

      <div *ngIf="error" class="inventory-alert inventory-alert-error">{{ error }}</div>

      <form [formGroup]="stockForm" (ngSubmit)="onSubmit()" *ngIf="!loading">
        <div class="inventory-form-group">
          <label for="productId" class="inventory-form-label">Product</label>
          <select
            class="inventory-form-control"
            id="productId"
            formControlName="productId"
            [attr.disabled]="isEditMode ? true : null"
          >
            <option value="">Select a product</option>
            <option *ngFor="let product of products" [value]="product.id">
              {{ product.name }}
            </option>
          </select>
          <div *ngIf="submitted && f['productId'].errors" class="text-danger">
            <div *ngIf="f['productId'].errors['required']">Product is required</div>
          </div>
        </div>

        <div class="inventory-form-group">
          <label for="stockDisponible" class="inventory-form-label">Available Stock</label>
          <input
            type="number"
            class="inventory-form-control"
            id="stockDisponible"
            formControlName="stockDisponible"
            min="0"
          />
          <div *ngIf="submitted && f['stockDisponible'].errors" class="text-danger">
            <div *ngIf="f['stockDisponible'].errors['required']">Available stock is required</div>
            <div *ngIf="f['stockDisponible'].errors['min']">Available stock must be at least 0</div>
          </div>
        </div>

        <div class="inventory-form-group">
          <label for="stock_minimum" class="inventory-form-label">Minimum Stock</label>
          <input
            type="number"
            class="inventory-form-control"
            id="stock_minimum"
            formControlName="stock_minimum"
            min="0"
            [attr.disabled]="isEditMode ? true : null"
          />
          <div *ngIf="submitted && f['stock_minimum'].errors" class="text-danger">
            <div *ngIf="f['stock_minimum'].errors['required']">Minimum stock is required</div>
            <div *ngIf="f['stock_minimum'].errors['min']">Minimum stock must be at least 0</div>
          </div>
        </div>

        <div class="inventory-form-group">
          <label for="fournisseur_id" class="inventory-form-label">Supplier</label>
          <select
            class="inventory-form-control"
            id="fournisseur_id"
            formControlName="fournisseur_id"
            [attr.disabled]="isEditMode ? true : null"
          >
            <option value="">Select a supplier</option>
            <option *ngFor="let supplier of suppliers" [value]="supplier.id">
              {{ supplier.name }}
            </option>
          </select>
          <div *ngIf="submitted && f['fournisseur_id'].errors" class="text-danger">
            <div *ngIf="f['fournisseur_id'].errors['required']">Supplier is required</div>
          </div>
        </div>

        <!-- Reason field for edit mode -->
        <div class="inventory-form-group" *ngIf="isEditMode">
          <label for="reason" class="inventory-form-label">Reason for Change</label>
          <input
            type="text"
            class="inventory-form-control"
            id="reason"
            formControlName="reason"
            placeholder="e.g., Restock, Inventory adjustment"
          />
          <div *ngIf="submitted && f['reason']?.errors" class="text-danger">
            <div *ngIf="f['reason']?.errors?.['required']">Reason is required</div>
            <div *ngIf="f['reason']?.errors?.['minlength']">Reason must be at least 3 characters</div>
          </div>
        </div>

        <div class="inventory-d-flex inventory-justify-content-between">
          <button type="submit" class="inventory-btn inventory-btn-primary" [disabled]="loading">
            {{ isEditMode ? 'Update' : 'Save' }}
          </button>
          <button type="button" class="inventory-btn inventory-btn-secondary" (click)="navigateToInventory()">
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>
</div>
</file>

<file path="src/app/features/inventory/components/stock-form/stock-form.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { StockFormComponent } from './stock-form.component';

describe('StockFormComponent', () => {
  let component: StockFormComponent;
  let fixture: ComponentFixture<StockFormComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [StockFormComponent]
    });
    fixture = TestBed.createComponent(StockFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/inventory/components/stock-form/stock-form.component.ts">
import { Component, OnInit } from "@angular/core"
import { FormBuilder,  FormGroup, Validators } from "@angular/forms"
import  { ActivatedRoute, Router } from "@angular/router"
import  { Stock, Product, Supplier } from "../../models/stock.model"
import { StockService } from "../../services/stock.service"

@Component({
  selector: "app-stock-form",
  templateUrl: "./stock-form.component.html",
  styleUrls: ["./stock-form.component.css"],
})
export class StockFormComponent implements OnInit {
  stockForm!: FormGroup
  isEditMode = false
  productId?: number
  stockId?: number
  loading = false
  error = ""
  submitted = false
  products: Product[] = []
  suppliers: Supplier[] = []

  constructor(
    private fb: FormBuilder,
    private stockService: StockService,
    private route: ActivatedRoute,
    private router: Router,
  ) {}

  ngOnInit(): void {
    this.initForm()
    this.loadProducts()
    this.loadSuppliers()

    this.route.params.subscribe((params) => {
      if (params["id"]) {
        this.isEditMode = true
        this.productId = +params["id"]
        this.loadStockData(this.productId)
      }
    })
  }

  initForm(): void {
    this.stockForm = this.fb.group({
      productId: [{ value: "", disabled: this.isEditMode }, Validators.required],
      stockDisponible: ["", [Validators.required, Validators.min(0)]],
      stock_minimum: [{ value: "", disabled: this.isEditMode }, [Validators.required, Validators.min(0)]],
      fournisseur_id: [{ value: "", disabled: this.isEditMode }, Validators.required],
      reason: ["", this.isEditMode ? [Validators.required, Validators.minLength(3)] : []],
    })
  }

  loadProducts(): void {
    this.stockService.getProducts().subscribe({
      next: (products) => {
        this.products = products
      },
      error: (err) => {
        console.error("Failed to load products", err)
      },
    })
  }

  loadSuppliers(): void {
    this.stockService.getSuppliers().subscribe({
      next: (suppliers) => {
        this.suppliers = suppliers
      },
      error: (err) => {
        console.error("Failed to load suppliers", err)
      },
    })
  }

  loadStockData(productId: number): void {
    this.loading = true
    this.stockService.getStockByProductId(productId).subscribe({
      next: (stock) => {
        this.stockId = stock.id_stock
        this.stockForm.patchValue({
          productId: stock.productId,
          stockDisponible: stock.stockDisponible,
          stock_minimum: stock.stock_minimum,
          fournisseur_id: stock.fournisseur_id,
        })
        // Disable fields in edit mode
        this.stockForm.get("productId")?.disable()
        this.stockForm.get("stock_minimum")?.disable()
        this.stockForm.get("fournisseur_id")?.disable()
        this.error = ""
        this.loading = false
      },
      error: (err) => {
        this.error = "Failed to load stock data"
        console.error(err)
        this.loading = false
      },
    })
  }

  // Modify the onSubmit method to work with the existing backend
  onSubmit(): void {
    this.submitted = true

    if (this.stockForm.invalid) {
      return
    }

    this.loading = true

    const stockData: Stock = {
      ...this.stockForm.getRawValue(), // Use getRawValue to include disabled fields
    }

    if (this.isEditMode && this.productId) {
      // For edit mode, just update the stock
      // The backend will record the history internally
      const newQuantity = stockData.stockDisponible

      this.stockService.updateStock(this.productId, newQuantity).subscribe({
        next: (updatedStock) => {
          this.error = ""
          this.loading = false
          this.router.navigate(["/inventory"])
        },
        error: (err) => {
          this.error = "Failed to update stock"
          console.error(err)
          this.loading = false
        },
      })
    } else {
      // For new stock, just add it
      // The backend will record the initial history internally
      this.stockService.addStock(stockData).subscribe({
        next: () => {
          this.error = ""
          this.loading = false
          this.router.navigate(["/inventory"])
        },
        error: (err) => {
          this.error = "Failed to add stock"
          console.error(err)
          this.loading = false
        },
      })
    }
  }

  get f() {
    return this.stockForm.controls
  }

  getProductName(id: number): string {
    const product = this.products.find((p) => p.id === id)
    return product ? product.name : ""
  }

  navigateToInventory(): void {
    // Logic to navigate to the inventory page
    console.log('Navigating to inventory...');
    this.router.navigate(["/inventory"]);
  }

  getSupplierName(id: number): string {
    const supplier = this.suppliers.find((s) => s.id === id)
    return supplier ? supplier.name : ""
  }
}
</file>

<file path="src/app/features/inventory/components/stock-history/stock-history.component.css">
.badge {
    font-size: 0.8rem;
    padding: 0.35em 0.65em;
  }
  
  .text-success {
    color: #198754;
  }
  
  .text-danger {
    color: #dc3545;
  }
</file>

<file path="src/app/features/inventory/components/stock-history/stock-history.component.html">
<div class="inventory-container inventory-mt-3">
  <div class="inventory-card">
    <div class="inventory-header inventory-d-flex inventory-justify-content-between inventory-align-items-center">
      <h2>Stock History for {{ stock?.productName || 'Product' }}</h2>
      <div>
        <button class="inventory-btn inventory-btn-primary me-2" (click)="toggleAddForm()">
          {{ showAddForm ? 'Cancel' : 'Add Entry' }}
        </button>
        <button class="inventory-btn inventory-btn-secondary" (click)="goBack()">Back</button>
      </div>
    </div>
    
    <div class="card-body">
      <div *ngIf="loading" class="inventory-text-center">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      
      <div *ngIf="error" class="inventory-alert inventory-alert-error">{{ error }}</div>
      
      <!-- Add History Form -->
      <div *ngIf="showAddForm" class="inventory-mb-3">
        <div class="inventory-card">
          <div class="inventory-header">Add Stock History Entry</div>
          <div class="card-body">
            <form [formGroup]="historyForm" (ngSubmit)="addHistoryEntry()">
              <div class="inventory-form-group">
                <label for="quantityChange" class="inventory-form-label">Quantity Change</label>
                <input 
                  type="number" 
                  class="inventory-form-control" 
                  id="quantityChange" 
                  formControlName="quantityChange"
                  placeholder="Enter positive value for additions, negative for removals">
                <div *ngIf="historyForm.get('quantityChange')?.invalid && historyForm.get('quantityChange')?.touched" class="text-danger">
                  Quantity change is required
                </div>
              </div>
              
              <div class="inventory-form-group">
                <label for="reason" class="inventory-form-label">Reason</label>
                <input 
                  type="text" 
                  class="inventory-form-control" 
                  id="reason" 
                  formControlName="reason"
                  placeholder="e.g., Restock, Sale, Inventory adjustment">
                <div *ngIf="historyForm.get('reason')?.invalid && historyForm.get('reason')?.touched" class="text-danger">
                  Reason is required (3-100 characters)
                </div>
              </div>
              
              <button type="submit" class="inventory-btn inventory-btn-success" [disabled]="historyForm.invalid">Save Entry</button>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Stock Info Summary -->
      <div *ngIf="stock" class="inventory-mb-3">
        <div class="inventory-card">
          <div class="card-body">
            <div class="row">
              <div class="col-md-6">
                <p><strong>Product:</strong> {{ stock.productName }}</p>
                <p><strong>Supplier:</strong> {{ stock.supplierName }}</p>
              </div>
              <div class="col-md-6">
                <p><strong>Current Stock:</strong> {{ stock.stockDisponible }}</p>
                <p><strong>Minimum Stock:</strong> {{ stock.stock_minimum }}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- History Table -->
      <div *ngIf="!loading && history.length > 0">
        <table class="inventory-table">
          <thead>
            <tr>
              <th>Date</th>
              <th>Quantity Change</th>
              <th>Reason</th>
            </tr>
          </thead>
          <tbody>
            <tr *ngFor="let entry of history">
              <td>{{ formatDate(entry.timestamp) }}</td>
              <td [ngClass]="getQuantityChangeClass(entry.quantityChange)">
                {{ entry.quantityChange > 0 ? '+' : '' }}{{ entry.quantityChange }}
              </td>
              <td>{{ entry.reason }}</td>
            </tr>
          </tbody>
        </table>
      </div>
      
      <div *ngIf="!loading && history.length === 0" class="inventory-alert inventory-alert-info">
        No history records found for this product.
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/app/features/inventory/components/stock-history/stock-history.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { StockHistoryComponent } from './stock-history.component';

describe('StockHistoryComponent', () => {
  let component: StockHistoryComponent;
  let fixture: ComponentFixture<StockHistoryComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [StockHistoryComponent]
    });
    fixture = TestBed.createComponent(StockHistoryComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/inventory/components/stock-history/stock-history.component.ts">
import { Component,  OnInit } from "@angular/core"
import  { ActivatedRoute, Router } from "@angular/router"
import { Stock, StockHistory } from "../../models/stock.model"
import { StockService } from "../../services/stock.service"
import {  FormBuilder,  FormGroup, Validators } from "@angular/forms"

@Component({
  selector: "app-stock-history",
  templateUrl: "./stock-history.component.html",
  styleUrls: ["./stock-history.component.css"],
})
export class StockHistoryComponent implements OnInit {
  productId!: number
  stock?: Stock
  history: StockHistory[] = []
  loading = false
  error = ""
  historyForm!: FormGroup
  showAddForm = false

  constructor(
    private stockService: StockService,
    private route: ActivatedRoute,
    private router: Router,
    private fb: FormBuilder,
  ) {}

  ngOnInit(): void {
    this.initForm()
    this.route.params.subscribe((params) => {
      if (params["id"]) {
        this.productId = +params["id"]
        this.loadStockDetails()
        this.loadStockHistory()
      }
    })
  }

  initForm(): void {
    this.historyForm = this.fb.group({
      quantityChange: [0, [Validators.required, Validators.min(-1000), Validators.max(1000)]],
      reason: ["", [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],
    })
  }

  loadStockDetails(): void {
    this.loading = true
    this.stockService.getStockByProductId(this.productId).subscribe({
      next: (data) => {
        this.stock = data
        this.loading = false
      },
      error: (err) => {
        this.error = "Failed to load stock details"
        console.error(err)
        this.loading = false
      },
    })
  }

  loadStockHistory(): void {
    this.loading = true
    this.stockService.getStockHistory(this.productId).subscribe({
      next: (data) => {
        this.history = data
        this.loading = false
      },
      error: (err) => {
        this.error = "Failed to load stock history"
        console.error(err)
        this.loading = false
      },
    })
  }

  toggleAddForm(): void {
    this.showAddForm = !this.showAddForm
    if (this.showAddForm) {
      this.historyForm.reset({
        quantityChange: 0,
        reason: "",
      })
    }
  }

  // Modify the addHistoryEntry method to work with the existing backend
  addHistoryEntry(): void {
    if (this.historyForm.invalid) {
      return
    }

    const quantityChange = this.historyForm.value.quantityChange
    const reason = this.historyForm.value.reason

    // Instead of creating a history entry directly,
    // we'll update the stock quantity which will trigger
    // the backend to record history
    this.loading = true

    if (this.stock) {
      const newQuantity = this.stock.stockDisponible + quantityChange

      // Update stock with new quantity
      this.stockService.updateStock(this.productId, newQuantity).subscribe({
        next: (updatedStock) => {
          this.stock = updatedStock
          // Refresh history (mock data will be returned)
          this.loadStockHistory()
          this.toggleAddForm()
          this.loading = false
        },
        error: (err) => {
          this.error = "Failed to update stock quantity"
          console.error(err)
          this.loading = false
        },
      })
    }
  }

  goBack(): void {
    this.router.navigate(["/inventory/detail", this.productId])
  }

  // Helper method to format dates
  formatDate(date: Date | string): string {
    if (!date) return ""
    const d = new Date(date)
    return d.toLocaleString()
  }

  // Helper to get CSS class based on quantity change
  getQuantityChangeClass(change: number): string {
    return change > 0 ? "text-success" : change < 0 ? "text-danger" : ""
  }
}
</file>

<file path="src/app/features/inventory/components/stock-list/stock-list.component.html">
<div class="inventory-container inventory-mt-3">
  <div class="inventory-d-flex inventory-justify-content-between inventory-align-items-center inventory-mb-3">
    <h2>Stock Management</h2>
    <button class="inventory-btn inventory-btn-primary" routerLink="/inventory/add">Add New Stock</button>
  </div>

  <div class="row inventory-mb-3">
    <div class="col-md-6">
      <div class="input-group">
        <input 
          type="text" 
          class="inventory-form-control" 
          placeholder="Search by product or supplier..." 
          [(ngModel)]="searchTerm"
          (keyup)="searchStocks()"
        >
        <button class="inventory-btn inventory-btn-outline" type="button" (click)="searchStocks()">
          <i class="bi bi-search"></i> Search
        </button>
      </div>
    </div>
    <div class="col-md-6 inventory-text-end">
      <button class="inventory-btn inventory-btn-outline me-2" (click)="loadStocks()">
        <i class="bi bi-arrow-clockwise"></i> Refresh
      </button>
    </div>
  </div>

  <app-low-stock-alert></app-low-stock-alert>

  <div *ngIf="loading" class="inventory-text-center my-5">
    <div class="spinner-border" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>

  <div *ngIf="error" class="inventory-alert inventory-alert-error">
    {{ error }}
  </div>

  <div class="table-responsive" *ngIf="!loading && filteredStocks.length > 0">
    <table class="inventory-table">
      <thead>
        <tr>
          <th>ID</th>
          <th>Product</th>
          <th>Available Stock</th>
          <th>Minimum Stock</th>
          <th>Supplier</th>
          <th>Status</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let stock of filteredStocks" [ngClass]="{'table-danger': isLowStock(stock)}">
          <td>{{ stock.id_stock }}</td>
          <td>{{ stock.productName }}</td>
          <td>{{ stock.stockDisponible }}</td>
          <td>{{ stock.stock_minimum }}</td>
          <td>{{ stock.supplierName }}</td>
          <td>
            <span class="inventory-badge" [ngClass]="isLowStock(stock) ? 'inventory-badge-danger' : 'inventory-badge-success'">
              {{ isLowStock(stock) ? 'Low Stock' : 'In Stock' }}
            </span>
          </td>
          <td>
            <div class="btn-group">
              <button class="inventory-btn inventory-btn-info me-1" (click)="viewStockDetails(stock.productId)">
                <i class="bi bi-eye"></i>
              </button>
              <button class="inventory-btn inventory-btn-warning me-1" (click)="editStock(stock.productId)">
                <i class="bi bi-pencil"></i>
              </button>
              <button class="inventory-btn inventory-btn-danger me-1" (click)="deleteStock(stock.id_stock!)">
                <i class="bi bi-trash"></i>
              </button>
              <button class="inventory-btn inventory-btn-secondary" (click)="viewStockHistory(stock.productId)">
                <i class="bi bi-clock-history"></i>
              </button>
            </div>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div *ngIf="!loading && filteredStocks.length === 0" class="inventory-alert inventory-alert-info">
    No stock items found. Please add a new stock item or adjust your search criteria.
  </div>
</div>
</file>

<file path="src/app/features/inventory/components/stock-list/stock-list.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { StockListComponent } from './stock-list.component';

describe('StockListComponent', () => {
  let component: StockListComponent;
  let fixture: ComponentFixture<StockListComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [StockListComponent]
    });
    fixture = TestBed.createComponent(StockListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/inventory/components/stock-list/stock-list.component.ts">
import { Component, OnInit } from "@angular/core"; // Removed 'type' for OnInit
import { Router } from "@angular/router"
import { Stock } from "../../models/stock.model"
import { StockService } from "../../services/stock.service"

@Component({
  selector: "app-stock-list",
  templateUrl: "./stock-list.component.html",
  styleUrls: ["./stock-list.component.css" ],
})
export class StockListComponent implements OnInit {
  stocks: Stock[] = []
  filteredStocks: Stock[] = []
  loading = false
  error = ""
  searchTerm = ""

  constructor(
    private stockService: StockService,
    private router: Router,
  ) {}

  ngOnInit(): void {
    this.loadStocks()
  }

  loadStocks(): void {
    this.loading = true
    this.stockService.getStocks().subscribe({
      next: (data) => {
        this.stocks = data
        this.filteredStocks = data
        this.loading = false
      },
      error: (err) => {
        this.error = "Failed to load stock data"
        console.error(err)
        this.loading = false
      },
    })
  }

  searchStocks(): void {
    if (!this.searchTerm.trim()) {
      this.filteredStocks = this.stocks
      return
    }

    const term = this.searchTerm.toLowerCase()
    this.filteredStocks = this.stocks.filter(
      (stock) => stock.productName?.toLowerCase().includes(term) || stock.supplierName?.toLowerCase().includes(term),
    )
  }

  viewStockDetails(productId: number): void {
    this.router.navigate(["/inventory/detail", productId])
  }

  editStock(productId: number): void {
    this.router.navigate(["/inventory/edit", productId])
  }

  deleteStock(id: number): void {
    if (confirm("Are you sure you want to delete this stock item?")) {
      this.stockService.deleteStock(id).subscribe({
        next: (success) => {
          if (success) {
            this.loadStocks()
          } else {
            this.error = "Failed to delete stock item"
          }
        },
        error: (err) => {
          this.error = "Failed to delete stock item"
          console.error(err)
        },
      })
    }
  }

  viewStockHistory(productId: number): void {
    this.router.navigate(["/inventory/history", productId])
  }

  isLowStock(stock: Stock): boolean {
    return stock.stockDisponible <= stock.stock_minimum
  }
}
</file>

<file path="src/app/features/inventory/components/stock-trend/stock-trend.component.html">
<div class="inventory-container inventory-mt-3">
  <div class="inventory-card">
    <div class="inventory-header inventory-d-flex inventory-justify-content-between inventory-align-items-center">
      <h3>Stock Trend Analysis</h3>
      <button class="inventory-btn inventory-btn-secondary" (click)="goBack()">Back to Details</button>
    </div>

    <div class="inventory-card-body">
      <div *ngIf="loading" class="inventory-text-center inventory-mt-3 inventory-mb-3">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>

      <div *ngIf="error" class="inventory-alert inventory-alert-error">
        {{ error }}
      </div>

      <div *ngIf="stockTrend && !loading">
        <div class="inventory-d-flex inventory-mb-3">
          <div class="col-md-12">
            <h4>Product ID: {{ stockTrend.productId }}</h4>
          </div>
        </div>

        <div class="inventory-d-flex">
          <div class="col-md-6">
            <div class="inventory-card inventory-mb-3">
              <div class="inventory-header">
                <h5>Stock Trend</h5>
              </div>
              <div class="inventory-card-body">
                <p><strong>Current Trend:</strong>
                  <span class="inventory-badge" [ngClass]="getTrendBadgeClass(stockTrend.trend)">
                    {{ getTrendDisplay(stockTrend.trend) }}
                  </span>
                </p>
                <p><strong>Current Stock:</strong> {{ stockTrend.stockDisponible }}</p>
                <p><strong>Minimum Stock:</strong> {{ stockTrend.stockMinimum }}</p>
                <p><strong>Suggested Stock Level:</strong> {{ stockTrend.suggestedStock }}</p>
              </div>
            </div>
          </div>

          <div class="col-md-6">
            <div class="inventory-card inventory-mb-3">
              <div class="inventory-header">
                <h5>Demand Forecast</h5>
              </div>
              <div class="inventory-card-body">
                <p><strong>Predicted Demand (7 days):</strong> {{ predictedDemand | number:'1.0-2' }}</p>

                <div *ngIf="stockTrend.stockDisponible !== undefined && predictedDemand !== undefined">
                  <p><strong>Stock Coverage:</strong>
                    <span [ngClass]="stockTrend.stockDisponible >= predictedDemand ? 'inventory-text-success' : 'inventory-text-danger'">
                      {{ stockTrend.stockDisponible >= predictedDemand ? 'Sufficient' : 'Insufficient' }}
                    </span>
                  </p>

                  <div class="progress inventory-mb-3">
                    <div class="progress-bar"
                         [ngClass]="stockTrend.stockDisponible >= predictedDemand ? 'inventory-bg-success' : 'inventory-bg-danger'"
                         [style.width.%]="(stockTrend.stockDisponible / (predictedDemand || 1)) * 100">
                      {{ ((stockTrend.stockDisponible / (predictedDemand || 1)) * 100) | number:'1.0-0' }}%
                    </div>
                  </div>

                  <p *ngIf="stockTrend.stockDisponible < predictedDemand" class="inventory-text-danger">
                    <strong>Warning:</strong> Current stock is insufficient to meet predicted demand.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="inventory-d-flex inventory-mt-3">
          <div class="col-md-12">
            <div class="inventory-card">
              <div class="inventory-header">
                <h5>Recommendations</h5>
              </div>
              <div class="inventory-card-body">
                <ul class="inventory-list-group">
                  <li class="inventory-list-group-item" *ngIf="stockTrend.stockDisponible !== undefined && stockTrend.stockMinimum !== undefined && stockTrend.stockDisponible < stockTrend.stockMinimum">
                    <i class="bi bi-exclamation-triangle-fill inventory-text-danger me-2"></i>
                    <strong>Critical:</strong> Stock is below minimum threshold. Immediate replenishment required.
                  </li>
                  <li class="inventory-list-group-item" *ngIf="predictedDemand !== undefined && stockTrend.stockDisponible !== undefined && stockTrend.stockMinimum !== undefined && stockTrend.stockDisponible < predictedDemand && stockTrend.stockDisponible >= stockTrend.stockMinimum">
                    <i class="bi bi-exclamation-circle-fill inventory-text-warning me-2"></i>
                    <strong>Warning:</strong> Stock may not meet predicted demand. Consider replenishment.
                  </li>
                  <li class="inventory-list-group-item" *ngIf="stockTrend.trend === 'décroissant'">
                    <i class="bi bi-graph-down-arrow inventory-text-info me-2"></i>
                    <strong>Trend Alert:</strong> Decreasing trend detected. Monitor closely.
                  </li>
                  <li class="inventory-list-group-item" *ngIf="predictedDemand !== undefined && stockTrend.stockDisponible !== undefined && stockTrend.stockMinimum !== undefined && stockTrend.stockDisponible >= predictedDemand && stockTrend.stockDisponible >= stockTrend.stockMinimum">
                    <i class="bi bi-check-circle-fill inventory-text-success me-2"></i>
                    <strong>Good:</strong> Current stock levels are sufficient.
                  </li>
                  <li class="inventory-list-group-item">
                    <i class="bi bi-arrow-repeat inventory-text-primary me-2"></i>
                    <strong>Recommendation:</strong> Maintain stock at {{ stockTrend.suggestedStock }} units.
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/app/features/inventory/components/stock-trend/stock-trend.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { StockTrendComponent } from './stock-trend.component';

describe('StockTrendComponent', () => {
  let component: StockTrendComponent;
  let fixture: ComponentFixture<StockTrendComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [StockTrendComponent]
    });
    fixture = TestBed.createComponent(StockTrendComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/inventory/components/stock-trend/stock-trend.component.ts">
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { StockTrend } from '../../models/stock.model';
import { StockService } from '../../services/stock.service';
import { forkJoin } from 'rxjs';

@Component({
  selector: 'app-stock-trend',
  templateUrl: './stock-trend.component.html',
  styleUrls: ['./stock-trend.component.css'],
})
export class StockTrendComponent implements OnInit {
  productId!: number;
  stockTrend?: StockTrend;
  predictedDemand?: number;
  loading = false;
  error = '';

  constructor(
    private  stockService: StockService,
    private readonly route: ActivatedRoute,
    private readonly router: Router
  ) {}

  ngOnInit(): void {
    this.loadData();
  }

  private loadData(): void {
    this.route.params.subscribe((params) => {
      if (params['id']) {
        this.productId = +params['id'];
        this.loading = true;
        forkJoin({
          trend: this.stockService.getStockTrend(this.productId),
          demand: this.stockService.getDemandForecast(this.productId),
        }).subscribe({
          next: ({ trend, demand }) => {
            this.stockTrend = trend;
            this.predictedDemand = demand;
            this.loading = false;
          },
          error: (err) => {
            this.error = 'Failed to load stock trend or demand forecast';
            console.error(err);
            this.loading = false;
          },
        });
      }
    });
  }

  goBack(): void {
    this.router.navigate(['/inventory/detail', this.productId]);
  }

  // Helper to translate backend trend values for display
  getTrendDisplay(trend: string): string {
    switch (trend) {
      case 'décroissant':
        return 'Decreasing';
      case 'stable':
        return 'Stable';
      case 'croissant':
        return 'Increasing';
      default:
        return trend;
    }
  }

  // Helper to get badge class based on trend
  getTrendBadgeClass(trend: string): string {
    switch (trend) {
      case 'décroissant':
        return 'bg-danger';
      case 'stable':
        return 'bg-warning';
      case 'croissant':
        return 'bg-success';
      default:
        return 'bg-secondary';
    }
  }
}
</file>

<file path="src/app/features/inventory/inventory-routing.module.ts">
import { NgModule } from "@angular/core";
import { RouterModule, Routes } from "@angular/router";
import { StockListComponent } from "./components/stock-list/stock-list.component";
import { StockFormComponent } from "./components/stock-form/stock-form.component";
import { StockDetailComponent } from "./components/stock-detail/stock-detail.component";
import { StockHistoryComponent } from "./components/stock-history/stock-history.component";
import { StockTrendComponent } from "./components/stock-trend/stock-trend.component";

const routes: Routes = [
  { path: "", component: StockListComponent },
  { path: "add", component: StockFormComponent },
  { path: "edit/:id", component: StockFormComponent },
  { path: "detail/:id", component: StockDetailComponent },
  { path: "history/:id", component: StockHistoryComponent },
  { path: "trend/:id", component: StockTrendComponent },
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule],
})
export class InventoryRoutingModule {}
</file>

<file path="src/app/features/inventory/inventory-theme.css">
/* Inventory Theme - Scoped to inventory components only */
:root {
    --inventory-primary: #ff80ab;
    --inventory-primary-light: #ffb2c9;
    --inventory-primary-dark: #c94f7c;
    --inventory-secondary: #f8bbd0;
    --inventory-secondary-light: #ffeeff;
    --inventory-secondary-dark: #c48b9f;
    --inventory-accent: #ff008c;
    --inventory-text-on-primary: #ffffff;
    --inventory-text-on-secondary: #442c2e;
    --inventory-error: #ff5252;
    --inventory-success: #4caf50;
    --inventory-warning: #ff9800;
    --inventory-info: #f3219169;
    --inventory-background: #fff9fb;
    --inventory-card-bg: #fff0f5;
    --inventory-border-radius: 12px;
    --inventory-box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    --inventory-transition: all 0.3s ease;
  }
  
  /* Cards and Containers */
  .inventory-card {
    background-color: var(--inventory-card-bg);
    border-radius: var(--inventory-border-radius);
    box-shadow: var(--inventory-box-shadow);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    transition: var(--inventory-transition);
  }
  
  .inventory-card:hover {
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  }
  
  .inventory-container {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  /* Headers */
  .inventory-header {
    color: var(--inventory-primary-dark);
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }
  
  .inventory-header::after,
  .inventory-header::before {
    content: "✨";
    margin: 0 0.5rem;
    color: var(--inventory-accent);
  }
  
  /* Forms */
  .inventory-form-control {
    display: block;
    width: 100%;
    padding: 0.75rem 1rem;
    font-size: 1rem;
    line-height: 1.5;
    color: var(--inventory-text-on-secondary);
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid var(--inventory-secondary);
    border-radius: var(--inventory-border-radius);
    transition: var(--inventory-transition);
  }
  
  .inventory-form-control:focus {
    border-color: var(--inventory-primary);
    outline: 0;
    box-shadow: 0 0 0 0.2rem rgba(255, 128, 171, 0.25);
  }
  
  .inventory-form-group {
    margin-bottom: 1rem;
  }
  
  .inventory-form-label {
    margin-bottom: 0.5rem;
    font-weight: 500;
  }
  
  /* Buttons */
  .inventory-btn {
    display: inline-block;
    font-weight: 500;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    user-select: none;
    border: 1px solid transparent;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: var(--inventory-border-radius);
    transition: var(--inventory-transition);
    cursor: pointer;
  }
  
  .inventory-btn-primary {
    color: var(--inventory-text-on-primary);
    background-color: var(--inventory-primary);
    border-color: var(--inventory-primary);
  }
  
  .inventory-btn-primary:hover {
    background-color: var(--inventory-primary-dark);
    border-color: var(--inventory-primary-dark);
  }
  
  .inventory-btn-secondary {
    color: var(--inventory-text-on-secondary);
    background-color: var(--inventory-secondary);
    border-color: var(--inventory-secondary);
  }
  
  .inventory-btn-secondary:hover {
    background-color: var(--inventory-secondary-dark);
    border-color: var(--inventory-secondary-dark);
  }
  
  .inventory-btn-outline {
    color: var(--inventory-primary);
    background-color: transparent;
    border-color: var(--inventory-primary);
  }
  
  .inventory-btn-outline:hover {
    color: var(--inventory-text-on-primary);
    background-color: var(--inventory-primary);
  }
  
  /* Tables */
  .inventory-table {
    width: 100%;
    margin-bottom: 1rem;
    color: var(--inventory-text-on-secondary);
    border-collapse: separate;
    border-spacing: 0;
  }
  
  .inventory-table th,
  .inventory-table td {
    padding: 1rem;
    vertical-align: top;
    text-align: left;
  }
  
  .inventory-table thead th {
    vertical-align: bottom;
    background-color: var(--inventory-primary-light);
    color: var(--inventory-text-on-secondary);
    font-weight: 600;
  }
  
  .inventory-table thead th:first-child {
    border-top-left-radius: var(--inventory-border-radius);
  }
  
  .inventory-table thead th:last-child {
    border-top-right-radius: var(--inventory-border-radius);
  }
  
  .inventory-table tbody tr:nth-of-type(odd) {
    background-color: rgba(248, 187, 208, 0.2);
  }
  
  .inventory-table tbody tr:hover {
    background-color: rgba(248, 187, 208, 0.4);
  }
  
  /* Alerts */
  .inventory-alert {
    position: relative;
    padding: 1rem 1.5rem;
    margin-bottom: 1rem;
    border: 1px solid transparent;
    border-radius: var(--inventory-border-radius);
  }
  
  .inventory-alert-error {
    color: #721c24;
    background-color: #f8d7da;
    border-color: #f5c6cb;
  }
  
  .inventory-alert-success {
    color: #155724;
    background-color: #d4edda;
    border-color: #c3e6cb;
  }
  
  .inventory-alert-warning {
    color: #856404;
    background-color: #fff3cd;
    border-color: #ffeeba;
  }
  
  .inventory-alert-info {
    color: #0c5460;
    background-color: #d1ecf1;
    border-color: #bee5eb;
  }
  
  /* Badges */
  .inventory-badge {
    display: inline-block;
    padding: 0.25em 0.6em;
    font-size: 75%;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    white-space: nowrap;
    vertical-align: baseline;
    border-radius: 10px;
    transition: var(--inventory-transition);
  }
  
  .inventory-badge-primary {
    color: var(--inventory-text-on-primary);
    background-color: var(--inventory-primary);
  }
  
  .inventory-badge-success {
    color: white;
    background-color: var(--inventory-success);
  }
  
  .inventory-badge-warning {
    color: white;
    background-color: var(--inventory-warning);
  }
  
  .inventory-badge-danger {
    color: white;
    background-color: var(--inventory-error);
  }
  
  /* Utilities */
  .inventory-text-center {
    text-align: center;
  }
  
  .inventory-d-flex {
    display: flex;
  }
  
  .inventory-justify-content-between {
    justify-content: space-between;
  }
  
  .inventory-align-items-center {
    align-items: center;
  }
  
  .inventory-mt-3 {
    margin-top: 1.5rem;
  }
  
  .inventory-mb-3 {
    margin-bottom: 1.5rem;
  }
  
  .inventory-mx-auto {
    margin-left: auto;
    margin-right: auto;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .inventory-container {
      padding: 1rem;
    }
  
    .inventory-table {
      display: block;
      overflow-x: auto;
    }
  }
</file>

<file path="src/app/features/inventory/inventory.module.ts">
import { NgModule } from "@angular/core"
import { CommonModule } from "@angular/common"
import { FormsModule, ReactiveFormsModule } from "@angular/forms"
import { HttpClientModule } from "@angular/common/http"

import { InventoryRoutingModule } from "./inventory-routing.module"
import { StockListComponent } from "./components/stock-list/stock-list.component"
import { StockFormComponent } from "./components/stock-form/stock-form.component"
import { StockDetailComponent } from "./components/stock-detail/stock-detail.component"
import { LowStockAlertComponent } from "./components/low-stock-alert/low-stock-alert.component"
import { StockHistoryComponent } from "./components/stock-history/stock-history.component"
import { StockTrendComponent } from "./components/stock-trend/stock-trend.component"

@NgModule({
  declarations: [
    StockListComponent,
    StockFormComponent,
    StockDetailComponent,
    LowStockAlertComponent,
    StockHistoryComponent,
    StockTrendComponent,
  ],
  imports: [CommonModule, FormsModule, ReactiveFormsModule, HttpClientModule, InventoryRoutingModule],
})
export class InventoryModule {}
</file>

<file path="src/app/features/inventory/models/stock.model.ts">
export interface Stock {
  id_stock?: number; // Matches backend's id_stock
  productId: number; // Matches backend's productId
  stockDisponible: number; // Matches backend's stockDisponible
  stock_minimum: number; // Matches backend's stock_minimum
  fournisseur_id: number; // Matches backend's fournisseur_id
  productName?: string; // For UI display
  supplierName?: string; // For UI display
}

export interface StockHistory {
  id?: number; // Matches backend's id (Long in backend, but number is fine for JS)
  productId: number; // Matches backend's productId
  quantityChange: number; // Matches backend's quantityChange
  timestamp: string | Date; // Backend uses LocalDateTime; string or Date works for deserialization
  reason: string; // Matches backend's reason
}

export interface StockTrend {
  productId: number; // Not explicitly in backend response, but can be inferred
  trend: string; // Matches backend's trend (e.g., "décroissant", "stable")
  suggestedStock: number; // Matches backend's suggestedStock
  predictedDemand: number; // Matches backend's predictedDemand
  stockDisponible: number; // Matches backend's stockDisponible
  stockMinimum: number; // Matches backend's stockMinimum
}

export interface Supplier {
  id: number;
  name: string;
  email?: string;
  phone?: string;
  address?: string;
}

export interface Product {
  id: number;
  name: string;
  description?: string;
  price?: number;
  categoryId?: number;
  imageUrl?: string;
}
</file>

<file path="src/app/features/inventory/services/stock.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { StockService } from './stock.service';

describe('StockService', () => {
  let service: StockService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(StockService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/features/inventory/services/stock.service.ts">
import { Injectable } from "@angular/core"
import {  HttpClient, HttpParams } from "@angular/common/http"
import {  Observable, of } from "rxjs"
import { catchError, map, tap } from "rxjs/operators"
import { Stock, StockHistory, StockTrend } from "../models/stock.model"
import { environment } from "../../../../environments/environment"

@Injectable({
  providedIn: "root",
})
export class StockService {
  private apiUrl = `${environment.inventoryServiceUrl}/api/stock`

  private mockProducts = [
    { id: 1, name: "Robe Rouge" },
    { id: 2, name: "Sac à main" },
    { id: 3, name: "Collier Argent" },
    { id: 4, name: "Chaussures Noires" },
    { id: 5, name: "Bracelet Or" },
  ]

  private mockSuppliers = [
    { id: 101, name: "Fashion Supplier" },
    { id: 102, name: "Accessories Inc" },
    { id: 103, name: "Footwear Ltd" },
  ]

  constructor(private http: HttpClient) {}

  // Get all stock items
  getStocks(): Observable<Stock[]> {
    return this.http.get<Stock[]>(`${this.apiUrl}`).pipe(
      map((stocks) => this.enrichStocksWithNames(stocks)),
      catchError(this.handleError<Stock[]>("getStocks", [])),
    )
  }

  // Get stock by product ID
  getStockByProductId(productId: number): Observable<Stock> {
    return this.http.get<Stock>(`${this.apiUrl}/${productId}`).pipe(
      map((stock) => this.enrichStockWithNames(stock)),
      catchError(this.handleError<Stock>(`getStock productId=${productId}`)),
    )
  }

  // Alias for compatibility
  getStockById(productId: number): Observable<Stock> {
    return this.getStockByProductId(productId)
  }

  // Check if stock is sufficient
  isStockSufficient(productId: number, quantity: number): Observable<boolean> {
    const params = new HttpParams().set("quantity", quantity.toString())
    return this.http.get<boolean>(`${this.apiUrl}/${productId}/check`, { params }).pipe(
      tap((isSufficient) => {
        console.log(
          `Stock check for product ${productId}, quantity ${quantity}: ${isSufficient ? "Sufficient" : "Insufficient"}`,
        )
        // If sufficient, the backend will automatically reduce the stock and record history
      }),
      catchError(this.handleError<boolean>(`checkStock productId=${productId}`, false)),
    )
  }

  // Add new stock
  addStock(stock: Stock): Observable<Stock> {
    return this.http.post<Stock>(`${this.apiUrl}`, stock).pipe(
      map((stock) => this.enrichStockWithNames(stock)),
      catchError(this.handleError<Stock>("addStock")),
    )
  }

  // Update stock
  updateStock(productId: number, quantity: number): Observable<Stock> {
    const params = new HttpParams().set("quantity", quantity.toString())
    return this.http.put<Stock>(`${this.apiUrl}/${productId}`, null, { params }).pipe(
      map((stock) => this.enrichStockWithNames(stock)),
      catchError(this.handleError<Stock>("updateStock")),
    )
  }

  // Delete stock
  deleteStock(id: number): Observable<boolean> {
    return this.http.delete(`${this.apiUrl}/${id}`, { responseType: "text" }).pipe(
      map(() => true),
      catchError(this.handleError<boolean>("deleteStock", false)),
    )
  }

  // Get stock trend analysis
  getStockTrend(productId: number): Observable<StockTrend> {
    return this.http
      .get<StockTrend>(`${this.apiUrl}/${productId}/trend`)
      .pipe(catchError(this.handleError<StockTrend>(`getStockTrend productId=${productId}`)))
  }

  // Get demand forecast
  getDemandForecast(productId: number): Observable<number> {
    return this.http
      .get<number>(`${this.apiUrl}/${productId}/demand-forecast`)
      .pipe(catchError(this.handleError<number>(`getDemandForecast productId=${productId}`, 0)))
  }

  // Get low stock items
  getLowStockItems(): Observable<Stock[]> {
    return this.getStocks().pipe(
      map((stocks) => stocks.filter((stock) => stock.stockDisponible <= stock.stock_minimum)),
      catchError(this.handleError<Stock[]>("getLowStockItems", [])),
    )
  }

  // Get stock history - Using mock data since there's no direct endpoint
  getStockHistory(productId: number): Observable<StockHistory[]> {
    console.log(`Getting mock history for product ${productId}`)
    // Use mock data since there's no direct endpoint
    const mockHistory: StockHistory[] = [
      { id: 1, productId: productId, quantityChange: 2, timestamp: new Date(2024, 1, 15), reason: "Restock" },
      { id: 2, productId: productId, quantityChange: -1, timestamp: new Date(2024, 1, 10), reason: "Order #1234" },
      { id: 3, productId: productId, quantityChange: -2, timestamp: new Date(2024, 1, 5), reason: "Order #1235" },
    ]
    return of(mockHistory)
  }

  // Add stock history entry
  addStockHistory(stockHistory: StockHistory): Observable<StockHistory> {
    console.log("History will be recorded by backend during stock update")
    // Just return the input as if it was successful
    // The actual history recording happens in the backend's updateStock method
    return of(stockHistory)
  }

  // Helpers to enrich stock data
  private enrichStocksWithNames(stocks: Stock[]): Stock[] {
    return stocks.map((stock) => this.enrichStockWithNames(stock))
  }

  private enrichStockWithNames(stock: Stock): Stock {
    const product = this.mockProducts.find((p) => p.id === stock.productId)
    const supplier = this.mockSuppliers.find((s) => s.id === stock.fournisseur_id)

    return {
      ...stock,
      productName: product ? product.name : `Product ${stock.productId}`,
      supplierName: supplier ? supplier.name : `Supplier ${stock.fournisseur_id}`,
    }
  }

  // Error handler
  private handleError<T>(operation = "operation", result?: T) {
    return (error: any): Observable<T> => {
      console.error(`${operation} failed: ${error.message}`)
      return of(result as T)
    }
  }

  // Mock methods for products and suppliers
  getProducts(): Observable<any[]> {
    return of(this.mockProducts)
  }

  getSuppliers(): Observable<any[]> {
    return of(this.mockSuppliers)
  }
}
</file>

<file path="src/app/features/products/components/product-detail/product-detail.component.html">
<p>product-detail works!</p>
</file>

<file path="src/app/features/products/components/product-detail/product-detail.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductDetailComponent } from './product-detail.component';

describe('ProductDetailComponent', () => {
  let component: ProductDetailComponent;
  let fixture: ComponentFixture<ProductDetailComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ProductDetailComponent]
    });
    fixture = TestBed.createComponent(ProductDetailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/products/components/product-detail/product-detail.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-product-detail',
  templateUrl: './product-detail.component.html',
  styleUrls: ['./product-detail.component.css']
})
export class ProductDetailComponent {

}
</file>

<file path="src/app/features/products/components/product-form/product-form.component.css">
/* Main container styling */
.container {
    max-width: 800px;
    margin: 0 auto;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  
  /* Header styling */
  h2 {
    color: #333;
    font-size: 28px;
    margin-bottom: 20px;
    border-bottom: 2px solid #e91e63;
    padding-bottom: 10px;
  }
  
  /* Card styling */
  .card {
    border: none;
    border-radius: 12px;
    box-shadow: 0 6px 18px rgba(0,0,0,0.1);
    margin-bottom: 30px;
    background-color: white;
    transition: all 0.3s ease;
  }
  
  .card:hover {
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
  }
  
  /* Form group styling */
  .mb-3 {
    margin-bottom: 1.5rem !important;
  }
  
  /* Label styling */
  .form-label {
    font-weight: 600;
    color: #333;
    margin-bottom: 8px;
    font-size: 15px;
  }
  
  /* Input field styling */
  .form-control {
    border-radius: 6px;
    border: 1px solid #ddd;
    padding: 12px;
    transition: all 0.3s ease;
    font-size: 15px;
  }
  
  .form-control:focus {
    border-color: #e91e63;
    box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.25);
    outline: none;
  }
  
  /* Textarea specific styling */
  textarea.form-control {
    min-height: 100px;
    resize: vertical;
  }
  
  /* Number input styling */
  input[type="number"] {
    padding-right: 5px;
  }
  
  /* File input styling */
  input[type="file"].form-control {
    padding: 8px;
    height: auto;
  }
  
  /* Image preview styling */
  .mt-2 {
    margin-top: 1rem;
  }
  
  .mt-2 img {
    border-radius: 8px;
    border: 1px solid #eee;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
  }
  
  .mt-2 img:hover {
    transform: scale(1.02);
  }
  
  /* Button styling */
  .btn {
    padding: 10px 24px;
    font-weight: 500;
    border-radius: 6px;
    transition: all 0.3s ease;
    font-size: 16px;
  }
  
  .btn-primary {
    background-color: #e91e63;
    border: none;
  }
  
  .btn-primary:hover {
    background-color: #c2185b;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
  }
  
  .btn-secondary {
    background-color: #9e9e9e;
    border: none;
  }
  
  .btn-secondary:hover {
    background-color: #757575;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  
  /* Required field indicator */
  .form-label::after {
    content: "*";
    color: #e91e63;
    margin-left: 4px;
    display: none;
  }
  
  input:required + .form-label::after,
  textarea:required + .form-label::after {
    display: inline;
  }
  
  /* Form layout improvements */
  @media (min-width: 768px) {
    .form-row {
      display: flex;
      gap: 20px;
    }
    
    .form-row .mb-3 {
      flex: 1;
    }
  }
  
  /* Button container */
  .button-container {
    display: flex;
    gap: 10px;
    margin-top: 20px;
  }
  
  /* Add a subtle background pattern */
  body {
    background-color: #f9f9f9;
    background-image: linear-gradient(to right, rgba(233, 30, 99, 0.05) 1px, transparent 1px),
                      linear-gradient(to bottom, rgba(233, 30, 99, 0.05) 1px, transparent 1px);
    background-size: 20px 20px;
  }
  
  /* Form validation styling */
  .form-control.ng-invalid.ng-touched {
    border-color: #f44336;
  }
  
  .form-control.ng-valid.ng-touched {
    border-color: #4CAF50;
  }
  
  .validation-message {
    color: #f44336;
    font-size: 12px;
    margin-top: 5px;
  }
</file>

<file path="src/app/features/products/components/product-form/product-form.component.html">
<div class="container mt-4">
    <h2>{{ isEditMode ? 'Edit Product' : 'Add Product' }}</h2>
    <div class="card p-4">
      <div class="form-row">
        <div class="mb-3">
          <label for="name" class="form-label">Name</label>
          <input type="text" class="form-control" id="name" [(ngModel)]="product.name" required>
        </div>
      </div>
      
      <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <textarea class="form-control" id="description" [(ngModel)]="product.description"></textarea>
      </div>
      
      <div class="form-row">
        <div class="mb-3">
          <label for="price" class="form-label">Price</label>
          <input type="number" class="form-control" id="price" [(ngModel)]="product.price" required step="0.01">
        </div>
        
        <div class="mb-3">
          <label for="stock" class="form-label">Stock</label>
          <input type="number" class="form-control" id="stock" [(ngModel)]="product.stock" required>
        </div>
        
        <div class="mb-3">
          <label for="discountPercentage" class="form-label">Discount Percentage (%)</label>
          <input type="number" class="form-control" id="discountPercentage" [(ngModel)]="product.discountPercentage" min="0" max="100">
        </div>
      </div>
      
      <div class="mb-3">
        <label for="image" class="form-label">Product Image</label>
        <input type="file" class="form-control" id="image" (change)="onImageSelected($event)" accept="image/*">
        <div *ngIf="product.imageUrl" class="mt-2">
          <img [src]="getImageUrl(product.imageUrl)" alt="Product Image" style="max-width: 200px; max-height: 200px;">
        </div>
      </div>
      
      <div class="button-container">
        <button class="btn btn-primary" (click)="saveProduct()">
          <i class="fas fa-save me-2"></i>{{ isEditMode ? 'Update' : 'Save' }} Product
        </button>
        <button class="btn btn-secondary" (click)="cancel()">
          <i class="fas fa-times me-2"></i>Cancel
        </button>
      </div>
    </div>
  </div>
</file>

<file path="src/app/features/products/components/product-form/product-form.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductFormComponent } from './product-form.component';

describe('ProductFormComponent', () => {
  let component: ProductFormComponent;
  let fixture: ComponentFixture<ProductFormComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ProductFormComponent]
    });
    fixture = TestBed.createComponent(ProductFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/products/components/product-form/product-form.component.ts">
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ProductService } from '../../services/product.service';
import { Product } from '../../models/product.model';
import { environment } from '../../../../../environments/environment';

@Component({
  selector: 'app-product-form',
  templateUrl: './product-form.component.html',
  styleUrls: ['./product-form.component.css']
})
export class ProductFormComponent implements OnInit {
  product: Product = { name: '', price: 0, stock: 0 };
  isEditMode = false;
  imageFile?: File;

  constructor(
    private productService: ProductService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      this.isEditMode = true;
      this.productService.getProductById(+id).subscribe({
        next: (data) => this.product = data,
        error: (err) => console.error('Error fetching product:', err)
      });
    }
  }

  onImageSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      this.imageFile = input.files[0];
    }
  }

  getImageUrl(imagePath: string): string {
    return `${environment.productServiceUrl}${imagePath}`; // e.g., http://localhost:8083/prd/product/images/filename
  }

  saveProduct(): void {
    if (this.isEditMode) {
      this.productService.updateProduct(this.product.id!, this.product, this.imageFile).subscribe({
        next: () => this.router.navigate(['/products']),
        error: (err) => console.error('Error updating product:', err)
      });
    } else {
      this.productService.addProduct(this.product, this.imageFile).subscribe({
        next: () => this.router.navigate(['/products']),
        error: (err) => console.error('Error adding product:', err)
      });
    }
  }

  cancel(): void {
    this.router.navigate(['/products']);
  }
}
</file>

<file path="src/app/features/products/components/product-list/product-list.component.css">
/* Main container styling */
.container {
    max-width: 1200px;
    margin: 0 auto;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  
  /* Header styling */
  h2 {
    color: #333;
    font-size: 28px;
    margin-bottom: 20px;
    border-bottom: 2px solid #e91e63;
    padding-bottom: 10px;
  }
  
  /* Top controls area */
  .mb-3.d-flex.justify-content-between {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }
  
  /* Button styling */
  .btn-primary {
    background-color: #e91e63;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    font-weight: 500;
    transition: all 0.3s ease;
  }
  
  .btn-primary:hover {
    background-color: #c2185b;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  
  .btn-secondary {
    background-color: #9e9e9e;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    font-weight: 500;
    transition: all 0.3s ease;
  }
  
  .btn-secondary:hover {
    background-color: #757575;
  }
  
  /* Search card styling */
  .card {
    border: none;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    margin-bottom: 30px;
    background-color: #f8f9fa;
  }
  
  .card h4 {
    color: #333;
    font-size: 20px;
    margin-bottom: 15px;
  }
  
  /* Form controls */
  .form-control {
    border-radius: 5px;
    border: 1px solid #ddd;
    padding: 10px;
    transition: all 0.3s ease;
  }
  
  .form-control:focus {
    border-color: #e91e63;
    box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.25);
  }
  
  .form-label {
    font-weight: 600;
    color: #333;
    margin-bottom: 8px;
  }
  
  /* Fix for currency dropdown */
  .form-select {
    height: 42px;
    border-radius: 5px;
    border: 1px solid #ddd;
    padding: 0 10px;
    appearance: auto; /* Restore browser's default appearance */
    -webkit-appearance: auto;
    -moz-appearance: auto;
    background-position: right center;
    background-repeat: no-repeat;
    background-size: 12px;
    padding-right: 20px;
  }
  
  /* Product cards container */
  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-top: 20px;
  }
  
  /* Individual product card */
  .product-card {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    background-color: white;
    position: relative;
  }
  
  .product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.15);
  }
  
  .product-image {
    height: 200px;
    background-color: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border-bottom: 1px solid #eee;
  }
  
  .product-image img {
    max-width: 100%;
    max-height: 180px;
    object-fit: contain;
  }
  
  .product-details {
    padding: 15px;
  }
  
  .product-name {
    font-size: 18px;
    font-weight: 600;
    color: #333;
    margin-bottom: 8px;
  }
  
  .product-description {
    color: #757575;
    font-size: 14px;
    margin-bottom: 12px;
    height: 40px;
    overflow: hidden;
  }
  
  .product-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
  }
  
  .product-price {
    font-size: 18px;
    font-weight: 700;
    color: #333;
  }
  
  .product-discount {
    background-color: #e91e63;
    color: white;
    padding: 3px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
  }
  
  .product-stock {
    color: #757575;
    font-size: 14px;
  }
  
  .product-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
  }
  
  .btn-sm {
    flex: 1;
    padding: 8px 0;
    font-size: 14px;
    border-radius: 5px;
    font-weight: 500;
    text-align: center;
  }
  
  .btn-warning {
    background-color: #ff9800;
    color: white;
    border: none;
  }
  
  .btn-warning:hover {
    background-color: #f57c00;
  }
  
  .btn-danger {
    background-color: #f44336;
    color: white;
    border: none;
  }
  
  .btn-danger:hover {
    background-color: #d32f2f;
  }
  
  /* Product ID badge */
  .product-id {
    position: absolute;
    top: 10px;
    left: 10px;
    background-color: rgba(233, 30, 99, 0.7);
    color: white;
    padding: 3px 8px;
    border-radius: 4px;
    font-size: 12px;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .product-grid {
      grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    }
    
    .row {
      flex-direction: column;
    }
    
    .col-md-3, .col-md-2 {
      width: 100%;
    }
  }
  
  /* Navigation bar styling */
  nav.navbar {
    background-color: #e91e63 !important;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }
  
  nav.navbar a {
    color: white !important;
  }
  
  /* Fix for currency dropdown alignment */
  .d-inline-block.w-auto {
    display: inline-flex !important;
    align-items: center;
  }
  
  /* Additional styling for currency dropdown */
/* Fix for currency dropdown - remove the duplicate arrow */
select#currency {
    appearance: auto; /* Use browser's default appearance */
    -webkit-appearance: auto;
    -moz-appearance: auto;
    background-image: none !important; /* Remove the custom background arrow */
    padding-right: 10px !important;
  }
  
  /* Ensure proper alignment of the currency dropdown */
  .d-inline-block.w-auto {
    display: inline-flex !important;
    align-items: center;
  }
  
  /* General select styling */
  .form-select {
    height: 42px;
    border-radius: 5px;
    border: 1px solid #ddd;
    padding: 0 10px;
  }
</file>

<file path="src/app/features/products/components/product-list/product-list.component.html">
<div class="container mt-4">
    <h2>Product List</h2>
    <div class="mb-3 d-flex justify-content-between">
        <button class="btn btn-primary" (click)="navigateToAdd()">Add Product</button>
        <div>
            <label for="currency" class="form-label me-2">Currency:</label>
            <select id="currency" [(ngModel)]="selectedCurrency" (ngModelChange)="onCurrencyChange()" class="form-select d-inline-block w-auto">
                <option *ngFor="let currency of currencies" [value]="currency">{{ currency }}</option>
            </select>
        </div>
    </div>
    <div class="card p-3 mb-3">
        <h4>Search Products</h4>
        <form #searchForm="ngForm" (ngSubmit)="searchProducts()">
            <div class="row">
                <div class="col-md-3 mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="name" [(ngModel)]="searchParams.name" name="name">
                </div>
                <div class="col-md-2 mb-3">
                    <label for="minPrice" class="form-label">Min Price</label>
                    <input type="number" class="form-control" id="minPrice" [(ngModel)]="searchParams.minPrice" name="minPrice" step="0.01">
                </div>
                <div class="col-md-2 mb-3">
                    <label for="maxPrice" class="form-label">Max Price</label>
                    <input type="number" class="form-control" id="maxPrice" [(ngModel)]="searchParams.maxPrice" name="maxPrice" step="0.01">
                </div>
                <div class="col-md-2 mb-3">
                    <label for="minStock" class="form-label">Min Stock</label>
                    <input type="number" class="form-control" id="minStock" [(ngModel)]="searchParams.minStock" name="minStock">
                </div>
                <div class="col-md-3 mb-3 d-flex align-items-end">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="useDiscountedPrice" [(ngModel)]="searchParams.useDiscountedPrice" name="useDiscountedPrice">
                        <label class="form-check-label" for="useDiscountedPrice">Use Discounted Price</label>
                    </div>
                </div>
            </div>
            <div class="d-flex">
                <button type="submit" class="btn btn-primary me-2">Search</button>
                <button type="button" class="btn btn-secondary" (click)="clearSearch()">Clear</button>
            </div>
        </form>
    </div>
    
    <!-- Product Grid (replacing the table) -->
    <div class="product-grid">
        <div class="product-card" *ngFor="let product of products">
            <div class="product-id">ID: {{ product.id }}</div>
            <div class="product-image">
                <img *ngIf="product.imageUrl" [src]="getImageUrl(product.imageUrl)" alt="{{ product.name }}">
                <span *ngIf="!product.imageUrl">No Image</span>
            </div>
            <div class="product-details">
                <div class="product-name">{{ product.name }}</div>
                <div class="product-description">{{ product.description || 'N/A' }}</div>
                <div class="product-meta">
                    <div class="product-price">{{ product.price | currency:selectedCurrency:'symbol':'1.2-2' }}</div>
                    <div class="product-discount" *ngIf="product.discountPercentage && product.discountPercentage > 0">
                        {{ product.discountPercentage }}% OFF
                    </div>
                </div>
                <div class="product-stock">Stock: {{ product.stock }} units</div>
                <div class="product-actions">
                    <button class="btn btn-sm btn-warning" (click)="editProduct(product.id)">Edit</button>
                    <button class="btn btn-sm btn-danger" (click)="deleteProduct(product.id)">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>
</file>

<file path="src/app/features/products/components/product-list/product-list.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductListComponent } from './product-list.component';

describe('ProductListComponent', () => {
  let component: ProductListComponent;
  let fixture: ComponentFixture<ProductListComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ProductListComponent]
    });
    fixture = TestBed.createComponent(ProductListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/products/components/product-list/product-list.component.ts">
import { Component, OnInit } from '@angular/core';
import { ProductService } from '../../services/product.service';
import { Product } from '../../models/product.model';
import { Router } from '@angular/router';
import { environment } from '../../../../../environments/environment';

@Component({
  selector: 'app-product-list',
  templateUrl: './product-list.component.html',
  styleUrls: ['./product-list.component.css']
})
export class ProductListComponent implements OnInit {
  products: Product[] = [];
  searchParams = {
    name: '',
    minPrice: null as number | null,
    maxPrice: null as number | null,
    minStock: null as number | null,
    useDiscountedPrice: false
  };
  selectedCurrency = 'TND';
  currencies = ['TND', 'USD', 'EUR']; // Add more currencies as supported by backend

  constructor(private productService: ProductService, private router: Router) {}

  ngOnInit(): void {
    this.loadProducts();
  }

  loadProducts(): void {
    if (this.searchParams.name || this.searchParams.minPrice || this.searchParams.maxPrice || this.searchParams.minStock || this.searchParams.useDiscountedPrice) {
      this.searchProducts();
    } else {
      this.productService.getAllProductsInCurrency(this.selectedCurrency).subscribe({
        next: (data) => {
          console.log('Products received:', data);
          this.products = data;
        },
        error: (err) => console.error('Error fetching products:', err)
      });
    }
  }

  searchProducts(): void {
    this.productService.searchProducts({
      name: this.searchParams.name || undefined,
      minPrice: this.searchParams.minPrice ?? undefined,
      maxPrice: this.searchParams.maxPrice ?? undefined,
      minStock: this.searchParams.minStock ?? undefined,
      useDiscountedPrice: this.searchParams.useDiscountedPrice
    }).subscribe({
      next: (data) => {
        console.log('Search results:', data);
        this.products = data;
      },
      error: (err) => console.error('Error searching products:', err)
    });
  }

  onCurrencyChange(): void {
    this.loadProducts();
  }

  clearSearch(): void {
    this.searchParams = {
      name: '',
      minPrice: null,
      maxPrice: null,
      minStock: null,
      useDiscountedPrice: false
    };
    this.loadProducts();
  }

  getImageUrl(imagePath: string): string {
    return `${environment.productServiceUrl}${imagePath}`;
  }

  editProduct(id?: number): void {
    if (id) {
      this.router.navigate(['/products/edit', id]);
    }
  }

  deleteProduct(id?: number): void {
    if (id && confirm('Are you sure you want to delete this product?')) {
      this.productService.deleteProduct(id).subscribe({
        next: () => this.loadProducts(),
        error: (err) => console.error('Error deleting product:', err)
      });
    }
  }

  navigateToAdd(): void {
    this.router.navigate(['/products/add']);
  }
}
</file>

<file path="src/app/features/products/models/product.model.ts">
export interface Product {
    id?: number;
    name: string;
    description?: string;
    price: number;
    stock: number;
    discountPercentage?: number;
    imageUrl?: string;
}
</file>

<file path="src/app/features/products/products-routing.module.ts">
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ProductListComponent } from './components/product-list/product-list.component';
import { ProductFormComponent } from './components/product-form/product-form.component';

const routes: Routes = [
  { path: '', component: ProductListComponent },
  { path: 'add', component: ProductFormComponent },
  { path: 'edit/:id', component: ProductFormComponent },
  { path: 'products', loadChildren: () => import('./products.module').then(m => m.ProductsModule) }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class ProductsRoutingModule { }
</file>

<file path="src/app/features/products/products.module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ProductsRoutingModule } from './products-routing.module';
import { ProductListComponent } from './components/product-list/product-list.component';
import { ProductFormComponent } from './components/product-form/product-form.component';

@NgModule({
  declarations: [
    ProductListComponent,
    ProductFormComponent
  ],
  imports: [
    CommonModule,
    FormsModule,
    ProductsRoutingModule
  ]
})
export class ProductsModule {}
</file>

<file path="src/app/features/products/services/product.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { ProductService } from './product.service';

describe('ProductService', () => {
  let service: ProductService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ProductService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/features/products/services/product.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Product } from '../models/product.model';
import { environment } from '../../../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ProductService {
  private apiUrl = `${environment.productServiceUrl}`; // http://localhost:8083/prd/product

  constructor(private http: HttpClient) { }

  // Upload image and return the URL
  uploadImage(file: File): Observable<string> {
    const formData = new FormData();
    formData.append('file', file);
    return this.http.post<string>(`${this.apiUrl}/uploadImage`, formData).pipe(
      catchError(this.handleError<string>('uploadImage', ''))
    );
  }

  getAllProducts(): Observable<Product[]> {
    console.log('Fetching products from:', `${this.apiUrl}/GetAllProducts`);
    return this.http.get<Product[]>(`${this.apiUrl}/GetAllProducts`).pipe(
      catchError((error) => {
        console.error('Error fetching products:', error);
        return this.handleError<Product[]>('getAllProducts', [])(error);
      })
    );
  }

  getAllProductsInCurrency(currency: string): Observable<Product[]> {
    return this.http.get<Product[]>(`${this.apiUrl}/GetAllProductsInCurrency`, { params: { currency } }).pipe(
      catchError(this.handleError<Product[]>('getAllProductsInCurrency', []))
    );
  }

  searchProducts(params: { name?: string, minPrice?: number, maxPrice?: number, minStock?: number, useDiscountedPrice?: boolean }): Observable<Product[]> {
    let httpParams = new HttpParams();
    if (params.name) httpParams = httpParams.set('name', params.name);
    if (params.minPrice !== undefined) httpParams = httpParams.set('minPrice', params.minPrice.toString());
    if (params.maxPrice !== undefined) httpParams = httpParams.set('maxPrice', params.maxPrice.toString());
    if (params.minStock !== undefined) httpParams = httpParams.set('minStock', params.minStock.toString());
    if (params.useDiscountedPrice !== undefined) httpParams = httpParams.set('useDiscountedPrice', params.useDiscountedPrice.toString());
    
    return this.http.get<Product[]>(`${this.apiUrl}/search`, { params: httpParams }).pipe(
      catchError(this.handleError<Product[]>('searchProducts', []))
    );
  }

  getProductById(id: number): Observable<Product> {
    return this.http.get<Product>(`${this.apiUrl}/GetById/${id}`).pipe(
      catchError(this.handleError<Product>(`getProductById id=${id}`))
    );
  }

  addProduct(product: Product, imageFile?: File): Observable<Product> {
    const formData = new FormData();
    formData.append('product', JSON.stringify(product));
    if (imageFile) {
      formData.append('image', imageFile);
    }
    return this.http.post<Product>(`${this.apiUrl}/AddProduct`, formData).pipe(
      catchError(this.handleError<Product>('addProduct'))
    );
  }

  updateProduct(id: number, product: Product, imageFile?: File): Observable<Product> {
    const formData = new FormData();
    const productToSend = {
        id: id,
        name: product.name,
        description: product.description || '',
        price: product.price,
        stock: product.stock,
        discountPercentage: product.discountPercentage || 0,
        imageUrl: product.imageUrl || ''
    };
    formData.append('product', JSON.stringify(productToSend));
    if (imageFile) {
        formData.append('image', imageFile);
    }
    console.log('Updating product with FormData:', formData);
    return this.http.put<Product>(`${this.apiUrl}/UpdateProduct/${id}`, formData).pipe(
        catchError(this.handleError<Product>(`updateProduct id=${id}`))
    );
  }

  deleteProduct(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/RemoveProduct/${id}`).pipe(
      catchError(this.handleError<void>(`deleteProduct id=${id}`))
    );
  }

  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {
      console.error(`${operation} failed: ${error.message}`);
      console.error(error);
      return of(result as T);
    };
  }
}
</file>

<file path="src/app/features/user/components/login/login.component.html">
<!DOCTYPE html>
<html>
<head>
  <!-- Include Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<body>
  <form (ngSubmit)="onSubmit()" class="fashion-form">
    <img src="../../assets/images/logofemistore.png" alt="FemiStore Logo" class="logo">
    <h2>Connexion</h2>
    <div class="form-row">
      <div class="form-group">
        <label>Email:</label>
        <input type="email" [(ngModel)]="credentials.email" name="email" required>
      </div>
      <div class="form-group">
        <label>Mot de passe:</label>
        <input type="password" [(ngModel)]="credentials.password" name="password" required>
      </div>
    </div>
    <button type="submit">Se connecter</button>
  </form>

  <!-- Icon footer with fashion elements -->
  <div class="icon-footer">
    <i class="fas fa-shoe-prints icon"></i> <!-- High heels -->
    <i class="fas fa-tshirt icon"></i> <!-- Dress -->
    <i class="fas fa-handbag icon"></i> <!-- Handbag -->
    <i class="fas fa-gem icon"></i> <!-- Jewelry -->
    <i class="fas fa-hat-wizard icon"></i> <!-- Hat -->
    <i class="fas fa-glasses icon"></i> <!-- Sunglasses -->
    <i class="fas fa-shoe-prints icon"></i>
    <i class="fas fa-tshirt icon"></i>
    <i class="fas fa-handbag icon"></i>
    <i class="fas fa-gem icon"></i>
  </div>

  <style>
    /* Body styling with white background and centering */
    body {
      margin: 0;
      font-family: 'Georgia', serif;
      background-color: #ffffff; /* Pure white */
      color: #4a4a4a;
      position: relative;
      min-height: 100vh; /* Full viewport height */
      display: flex;
      justify-content: center; /* Horizontal centering */
      align-items: center; /* Vertical centering */
      overflow-x: hidden;
    }

    /* Bottom gradient */
    body::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 200px;
      background: linear-gradient(to top, rgba(248, 187, 208, 0.7), transparent); /* Baby pink gradient */
      z-index: 1; /* Behind form, above icons */
    }
/* Logo styling */
.logo {
      max-width: 150px; /* Adjust based on logo size */
      height: auto;
      margin: 0 auto 20px auto; /* Center horizontally with bottom margin */
      display: block; /* Ensure block-level for centering */
    }
    /* Icon footer styling */
    .icon-footer {
      position: absolute;
      bottom: 10px;
      left: 0;
      width: 100%;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 30px;
      z-index: 0; /* Behind form */
      padding: 0 20px;
    }

    .icon-footer .icon {
      color: #f8bbd0; /* Baby pink */
      font-size: 35px;
      opacity: 0.85;
      transition: transform 0.3s ease;
    }

    .icon-footer .icon:hover {
      transform: scale(1.2);
    }

    /* Form styling */
    .fashion-form {
      max-width: 700px;
      width: 100%; /* Ensure responsiveness */
      padding: 30px;
      background: #fff;
      border: 1px solid #e1b8d3;
      border-radius: 8px;
      box-shadow: 0 10px 20px rgba(225, 184, 211, 0.2);
      font-family: 'Georgia', serif;
      position: relative;
      z-index: 2; /* Above gradient and icons */
      margin: 20px; /* Small margin for mobile */
      margin-top: -5px;
    }

    h2 {
      text-align: center;
      color: #c71585;
      font-size: 28px;
      margin-bottom: 30px;
      font-weight: bold;
      letter-spacing: 1px;
      text-transform: uppercase;
    }

    .form-row {
      gap: 20px;
      margin-bottom: 20px;
    }

    .form-group {
      flex: 1;
    }

    label {
      display: block;
      color: #4b0082;
      font-size: 14px;
      margin-bottom: 8px;
      font-weight: 500;
      letter-spacing: 0.5px;
    }

    input {
      width: 100%;
      padding: 12px;
      border: 1px solid #e1b8d3;
      border-radius: 5px;
      background-color: #fdf7fa;
      font-size: 16px;
      color: #333;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    input:focus {
      outline: none;
      border-color: #c71585;
      box-shadow: 0 0 8px rgba(199, 21, 133, 0.3);
      background-color: #fff;
    }

    button {
      width: 100%;
      padding: 14px;
      background: linear-gradient(90deg, #c71585, #db7093);
      border: none;
      border-radius: 5px;
      color: #fff;
      font-size: 16px;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 1px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.2s ease;
    }

    button:hover {
      background: linear-gradient(90deg, #db7093, #c71585);
      transform: translateY(-2px);
    }

    input:required {
      border-left: 3px solid #c71585;
    }

    .fashion-form::before {
      content: '';
      display: block;
      width: 60px;
      height: 4px;
      background: #db7093;
      margin: 0 auto 20px;
      border-radius: 2px;
    }
  </style>
</body>
</html>
</file>

<file path="src/app/features/user/components/login/login.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [LoginComponent]
    });
    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/user/components/login/login.component.ts">
import { Component } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  credentials = { email: '', password: '' };

  constructor(private authService: AuthService, private router: Router) {}

  onSubmit(): void {
    this.authService.login(this.credentials).subscribe({
      next: (response) => {
        this.authService.setToken(response.token);
        this.router.navigate(['/profile']);
      },
      error: (error) => {
        console.error('Erreur de connexion:', error);
        alert('Erreur lors de la connexion');
      }
    });
  }
}
</file>

<file path="src/app/features/user/components/profile/profile.component.css">
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lora:wght@400;500&display=swap');

.profile-container {
  max-width: 700px;
  margin: 0 auto;
  padding: 30px;
  background: linear-gradient(135deg, #fff0f5 0%, #f5e6ff 100%);
  border-radius: 20px;
  box-shadow: 0 6px 25px rgba(255, 192, 203, 0.3);
  border: 1px solid #ffe4e1;
  font-family: 'Lora', serif;
}

.profile-title {
  font-family: 'Playfair Display', serif;
  color: #ff6f91;
  font-size: 2.5rem;
  text-align: center;
  margin-bottom: 30px;
  text-shadow: 1px 1px 3px rgba(255, 105, 145, 0.2);
  position: relative;
}

.profile-title::after {
  content: '💫';
  position: absolute;
  font-size: 1.5rem;
  margin-left: 10px;
  color: #ff6f91;
}

.profile-details {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.detail-item {
  display: flex;
  justify-content: space-between;
  padding: 12px 20px;
  background: #fff7fa;
  border: 1px solid #ffe4e1;
  border-radius: 12px;
  box-shadow: 0 3px 10px rgba(255, 182, 193, 0.15);
}

.label {
  font-weight: 600;
  color: #ff6f91;
  font-family: 'Lora', serif;
}

.value {
  font-weight: 400;
  color: #4a4a4a;
  font-family: 'Lora', serif;
}
</file>

<file path="src/app/features/user/components/profile/profile.component.html">
<!DOCTYPE html>
<html>
<head>
  <!-- Include Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <!-- Include Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lora:wght@400;500&display=swap" rel="stylesheet">
</head>
<body>
  <div class="container profile-container mt-4">
    <h2 class="profile-title">Mon Profil</h2>
    <div *ngIf="user" class="profile-details">
      <div class="detail-item">
        <span class="label">Nom :</span>
        <span class="value">{{ user?.name }}</span>
      </div>
      <div class="detail-item">
        <span class="label">Email :</span>
        <span class="value">{{ user?.email }}</span>
      </div>
      <div class="detail-item">
        <span class="label">Rôle :</span>
        <span class="value">{{ user?.role }}</span>
      </div>
      <div class="detail-item">
        <span class="label">Adresse :</span>
        <span class="value">{{ user?.adresse }}</span>
      </div>
      <div class="detail-item">
        <span class="label">Téléphone :</span>
        <span class="value">{{ user?.telephone }}</span>
      </div>
    </div>
  </div>

  <!-- Icon footer with fashion elements -->
  <div class="icon-footer">
    <i class="fas fa-shoe-prints icon"></i> <!-- High heels -->
    <i class="fas fa-tshirt icon"></i> <!-- Dress -->
    <i class="fas fa-handbag icon"></i> <!-- Handbag -->
    <i class="fas fa-gem icon"></i> <!-- Jewelry -->
    <i class="fas fa-hat-wizard icon"></i> <!-- Hat -->
    <i class="fas fa-glasses icon"></i> <!-- Sunglasses -->
    <i class="fas fa-shoe-prints icon"></i>
    <i class="fas fa-tshirt icon"></i>
    <i class="fas fa-handbag icon"></i>
    <i class="fas fa-gem icon"></i>
  </div>

  <style>
    /* Body styling with white background and centering */
    body {
      margin: 0;
      font-family: 'Lora', serif;
      background-color: #ffffff; /* Pure white */
      color: #4a4a4a;
      position: relative;
      min-height: 100vh; /* Full viewport height */
      display: flex;
      justify-content: center; /* Horizontal centering */
      align-items: flex-start; /* Align to top */
      overflow-x: hidden;
    }

    /* Bottom gradient */
    body::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 200px;
      background: linear-gradient(to top, rgba(248, 187, 208, 0.7), transparent); /* Baby pink gradient */
      z-index: 1; /* Behind form, above icons */
    }

    /* Profile Container Styling */
    .profile-container {
      max-width: 800px;
      margin: 0 auto;
      padding: 30px;
      background: linear-gradient(135deg, #fff0f5 0%, #f5e6ff 100%);
      border-radius: 20px;
      box-shadow: 0 6px 25px rgba(255, 192, 203, 0.3);
      border: 1px solid #ffe4e1;
      font-family: 'Lora', serif;
      position: relative;
      z-index: 2; /* Above gradient */
      margin-top: 40px;
      margin-bottom: 220px; /* Ensure space for gradient and icons */
    }

    .profile-title {
      font-family: 'Playfair Display', serif;
      color: #ff6f91;
      font-size: 2.5rem;
      text-align: center;
      margin-bottom: 30px;
      text-shadow: 1px 1px 3px rgba(255, 105, 145, 0.2);
      position: relative;
    }

    .profile-details {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .detail-item {
      display: flex;
      justify-content: space-between;
      background: #fff7fa;
      border: 1px solid #ffe4e1;
      border-radius: 12px;
      padding: 15px 20px;
      box-shadow: 0 3px 10px rgba(255, 182, 193, 0.1);
      transition: transform 0.2s ease;
    }

    .detail-item:hover {
      transform: scale(1.02);
      box-shadow: 0 5px 15px rgba(255, 182, 193, 0.2);
    }

    .label {
      font-weight: 600;
      color: #ff6f91;
    }

    .value {
      color: #777;
    }

    /* Icon Footer Styling */
    .icon-footer {
      position: absolute;
      bottom: 10px;
      left: 0;
      width: 100%;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 30px;
      z-index: 0; /* Behind form, below gradient */
      padding: 0 20px;
    }

    .icon-footer .icon {
      color: #f8bbd0; /* Baby pink */
      font-size: 35px;
      opacity: 0.85;
      transition: transform 0.3s ease;
    }

    .icon-footer .icon:hover {
      transform: scale(1.2);
    }
  </style>
</body>
</html>
</file>

<file path="src/app/features/user/components/profile/profile.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProfileComponent } from './profile.component';

describe('ProfileComponent', () => {
  let component: ProfileComponent;
  let fixture: ComponentFixture<ProfileComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ProfileComponent]
    });
    fixture = TestBed.createComponent(ProfileComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/user/components/profile/profile.component.ts">
import { Component, OnInit } from '@angular/core';
import { UserService } from '../../services/user.service';
import { User } from '../../models/user';

@Component({
  selector: 'app-profile',
  templateUrl: './profile.component.html',
  styleUrls: ['./profile.component.css']
})
export class ProfileComponent implements OnInit {
  user: User | null = null;

  constructor(private userService: UserService) {}

  ngOnInit(): void {
    this.userService.getProfile().subscribe({
      next: (user) => this.user = user,
      error: (error) => console.error('Erreur profil:', error)
    });
  }
}
</file>

<file path="src/app/features/user/components/register/register.component.html">
<!DOCTYPE html>
<html>
<head>
  <!-- Include Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<body>
  <form (ngSubmit)="onSubmit()" class="fashion-form">
    <img src="../../assets/images/logofemistore.png" alt="FemiStore Logo" class="logo">
    <h2>Inscription</h2>
    <div class="form-row">
      <div class="form-group">
        <label>Nom:</label>
        <input type="text" [(ngModel)]="user.name" name="name" required>
      </div>
      <div class="form-group">
        <label>Email:</label>
        <input type="email" [(ngModel)]="user.email" name="email" required>
      </div>
    </div>
    <div class="form-row">
      <div class="form-group">
        <label>Mot de passe:</label>
        <input type="password" [(ngModel)]="user.password" name="password" required>
      </div>
      <div class="form-group">
        <label>Rôle:</label>
        <select [(ngModel)]="user.role" name="role">
          <option value="Client">Client</option>
          <option value="Admin">Admin</option>
        </select>
      </div>
    </div>
    <div class="form-row">
      <div class="form-group">
        <label>Adresse:</label>
        <input type="text" [(ngModel)]="user.adresse" name="adresse">
      </div>
      <div class="form-group">
        <label>Téléphone:</label>
        <input type="text" [(ngModel)]="user.telephone" name="telephone">
      </div>
    </div>
    <button type="submit">S’inscrire</button>
  </form>

  <!-- Icon footer with fashion elements -->
  <div class="icon-footer">
    <i class="fas fa-shoe-prints icon"></i> <!-- High heels -->
    <i class="fas fa-tshirt icon"></i> <!-- Dress -->
    <i class="fas fa-handbag icon"></i> <!-- Handbag -->
    <i class="fas fa-gem icon"></i> <!-- Jewelry -->
    <i class="fas fa-hat-wizard icon"></i> <!-- Hat -->
    <i class="fas fa-glasses icon"></i> <!-- Sunglasses -->
    <i class="fas fa-shoe-prints icon"></i>
    <i class="fas fa-tshirt icon"></i>
    <i class="fas fa-handbag icon"></i>
    <i class="fas fa-gem icon"></i>
  </div>

  <style>
    /* Body styling with white background and centering */
    body {
      margin: 0;
      font-family: 'Georgia', serif;
      background-color: #ffffff; /* Pure white */
      color: #4a4a4a;
      position: relative;
      min-height: 100vh; /* Full viewport height */
      display: flex;
      justify-content: center; /* Horizontal centering */
      align-items: flex-start; /* Align to top */
      overflow-x: hidden;
    }

    /* Bottom gradient */
    body::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 200px;
      background: linear-gradient(to top, rgba(248, 187, 208, 0.7), transparent); /* Baby pink gradient */
      z-index: 1; /* Behind form, above icons */
    }

    /* Icon footer styling */
    .icon-footer {
      position: absolute;
      bottom: 10px;
      left: 0;
      width: 100%;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 30px;
      z-index: 0; /* Behind form */
      padding: 0 20px;
    }

    .icon-footer .icon {
      color: #f8bbd0; /* Baby pink */
      font-size: 35px;
      opacity: 0.85;
      transition: transform 0.3s ease;
    }

    .icon-footer .icon:hover {
      transform: scale(1.2);
    }

    /* Form styling */
    .fashion-form {
      max-width: 700px;
      width: 100%; /* Ensure responsiveness */
      padding: 30px;
      background: #fff;
      border: 1px solid #e1b8d3;
      border-radius: 8px;
      box-shadow: 0 10px 20px rgba(225, 184, 211, 0.2);
      font-family: 'Georgia', serif;
      position: relative;
      z-index: 2; /* Above gradient and icons */
      margin: 40px 20px 20px 20px; /* Top margin to push up, sides for mobile */
      text-align: center; /* Center logo and h2 */
    }

    /* Logo styling */
    .logo {
      max-width: 150px; /* Adjust based on logo size */
      height: auto;
      margin: 0 auto 20px auto; /* Center horizontally with bottom margin */
      display: block; /* Ensure block-level for centering */
    }

    h2 {
      text-align: center;
      color: #c71585;
      font-size: 28px;
      margin-bottom: 30px;
      font-weight: bold;
      letter-spacing: 1px;
      text-transform: uppercase;
    }

    .form-row {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      width: 100%; /* Ensure row spans form width */
    }

    .form-group {
      flex: 1;
    }

    label {
      display: block;
      color: #4b0082;
      font-size: 14px;
      margin-bottom: 8px;
      font-weight: 500;
      letter-spacing: 0.5px;
    }

    input, select {
      width: 100%;
      padding: 12px;
      border: 1px solid #e1b8d3;
      border-radius: 5px;
      background-color: #fdf7fa;
      font-size: 16px;
      color: #333;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    input:focus, select:focus {
      outline: none;
      border-color: #c71585;
      box-shadow: 0 0 8px rgba(199, 21, 133, 0.3);
      background-color: #fff;
    }

    button {
      width: 100%;
      padding: 14px;
      background: linear-gradient(90deg, #c71585, #db7093);
      border: none;
      border-radius: 5px;
      color: #fff;
      font-size: 16px;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 1px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.2s ease;
    }

    button:hover {
      background: linear-gradient(90deg, #db7093, #c71585);
      transform: translateY(-2px);
    }

    input:required {
      border-left: 3px solid #c71585;
    }

    .fashion-form::before {
      content: '';
      display: block;
      width: 60px;
      height: 4px;
      background: #db7093;
      margin: 0 auto 20px;
      border-radius: 2px;
    }
  </style>
</body>
</html>
</file>

<file path="src/app/features/user/components/register/register.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RegisterComponent } from './register.component';

describe('RegisterComponent', () => {
  let component: RegisterComponent;
  let fixture: ComponentFixture<RegisterComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [RegisterComponent]
    });
    fixture = TestBed.createComponent(RegisterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/user/components/register/register.component.ts">
import { Component } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';
import { User } from '../../models/user';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent {
  user: User = {
    name: '',
    email: '',
    password: '',
    role: 'Client',
    adresse: '',
    telephone: ''
  };

  constructor(private authService: AuthService, private router: Router) {}

  onSubmit(): void {
    this.authService.register(this.user).subscribe({
      next: (response) => {
        this.authService.setToken(response.token);
        this.router.navigate(['/profile']);
      },
      error: (error) => {
        console.error('Erreur d’inscription:', error);
        alert('Erreur lors de l’inscription');
      }
    });
  }
}
</file>

<file path="src/app/features/user/components/user-list/user-list.component.css">
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lora:wght@400;500&display=swap');

.user-list-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 30px;
  background: linear-gradient(135deg, #fff0f5 0%, #f5e6ff 100%);
  border-radius: 20px;
  box-shadow: 0 6px 25px rgba(255, 192, 203, 0.3);
  border: 1px solid #ffe4e1;
  font-family: 'Lora', serif;
}

.user-list-title {
  font-family: 'Playfair Display', serif;
  color: #ff6f91;
  font-size: 2.5rem;
  text-align: center;
  margin-bottom: 30px;
  text-shadow: 1px 1px 3px rgba(255, 105, 145, 0.2);
  position: relative;
}

.user-list-title::after {
  content: '👥';
  position: absolute;
  font-size: 1.5rem;
  margin-left: 10px;
  color: #ff6f91;
}

.user-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.user-item {
  display: flex;
  justify-content: space-between;
  background: #fff7fa;
  border: 1px solid #ffe4e1;
  border-radius: 12px;
  padding: 15px 20px;
  margin-bottom: 15px;
  box-shadow: 0 3px 10px rgba(255, 182, 193, 0.1);
  transition: transform 0.2s ease;
}

.user-item:hover {
  transform: scale(1.02);
  box-shadow: 0 5px 15px rgba(255, 182, 193, 0.2);
}

.user-name {
  font-weight: 600;
  color: #ff6f91;
}

.user-info {
  font-style: italic;
  color: #777;
}

.user-role {
  font-weight: 500;
  color: #b46bff;
}

/* User List Container Styling */
.user-list-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 30px;
    background: linear-gradient(135deg, #fff0f5 0%, #f5e6ff 100%);
    border-radius: 20px;
    box-shadow: 0 6px 25px rgba(255, 192, 203, 0.3);
    border: 1px solid #ffe4e1;
    font-family: 'Lora', serif;
  }
  
  .user-list-title {
    font-family: 'Playfair Display', serif;
    color: #ff6f91;
    font-size: 2.5rem;
    text-align: center;
    margin-bottom: 30px;
    text-shadow: 1px 1px 3px rgba(255, 105, 145, 0.2);
    position: relative;
  }
  
  .user-list-title::after {
    content: '👥';
    position: absolute;
    font-size: 1.5rem;
    margin-left: 10px;
    color: #ff6f91;
  }
  
  .user-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .user-item {
    display: flex;
    justify-content: space-between;
    background: #fff7fa;
    border: 1px solid #ffe4e1;
    border-radius: 12px;
    padding: 15px 20px;
    margin-bottom: 15px;
    box-shadow: 0 3px 10px rgba(255, 182, 193, 0.1);
    transition: transform 0.2s ease;
  }
  
  .user-item:hover {
    transform: scale(1.02);
    box-shadow: 0 5px 15px rgba(255, 182, 193, 0.2);
  }
  
  .user-name {
    font-weight: 600;
    color: #ff6f91;
  }
  
  .user-info {
    font-style: italic;
    color: #777;
  }
  
  .user-role {
    font-weight: 500;
    color: #b46bff;
  }
  
  /* Icon Footer Styling */
  .icon-footer {
    position: absolute;
    bottom: 10px;
    left: 0;
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 30px;
    z-index: 0; /* Behind form */
    padding: 0 20px;
  }
  
  .icon-footer .icon {
    color: #f8bbd0; /* Baby pink */
    font-size: 35px;
    opacity: 0.85;
    transition: transform 0.3s ease;
  }
  
  .icon-footer .icon:hover {
    transform: scale(1.2);
  }
</file>

<file path="src/app/features/user/components/user-list/user-list.component.html">
<!DOCTYPE html>
<html>
<head>
  <!-- Include Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <!-- Include Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lora:wght@400;500&display=swap" rel="stylesheet">
</head>
<body>
  <div class="container user-list-container mt-4">
    <h2 class="user-list-title">Liste des Utilisateurs</h2>
    <ul class="user-list">
      <li *ngFor="let user of users" class="user-item">
        <span class="user-name">{{ user.name }}</span>
        <span class="user-info">({{ user.email }})</span>
        <span class="user-role">{{ user.role }}</span>
      </li>
    </ul>
  </div>

  <!-- Icon footer with fashion elements -->
  <div class="icon-footer">
    <i class="fas fa-shoe-prints icon"></i> <!-- High heels -->
    <i class="fas fa-tshirt icon"></i> <!-- Dress -->
    <i class="fas fa-handbag icon"></i> <!-- Handbag -->
    <i class="fas fa-gem icon"></i> <!-- Jewelry -->
    <i class="fas fa-hat-wizard icon"></i> <!-- Hat -->
    <i class="fas fa-glasses icon"></i> <!-- Sunglasses -->
    <i class="fas fa-shoe-prints icon"></i>
    <i class="fas fa-tshirt icon"></i>
    <i class="fas fa-handbag icon"></i>
    <i class="fas fa-gem icon"></i>
  </div>

  <style>
    /* Body styling with white background and centering */
    body {
      margin: 0;
      font-family: 'Lora', serif;
      background-color: #ffffff; /* Pure white */
      color: #4a4a4a;
      position: relative;
      min-height: 100vh; /* Full viewport height */
      display: flex;
      justify-content: center; /* Horizontal centering */
      align-items: flex-start; /* Align to top */
      overflow-x: hidden;
    }

    /* Bottom gradient */
    body::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 200px;
      background: linear-gradient(to top, rgba(248, 187, 208, 0.7), transparent); /* Baby pink gradient */
      z-index: 1; /* Behind form, above icons */
    }

    /* User List Container Styling */
    .user-list-container {
      max-width: 800px;
      margin: 0 auto;
      padding: 30px;
      background: linear-gradient(135deg, #fff0f5 0%, #f5e6ff 100%);
      border-radius: 20px;
      box-shadow: 0 6px 25px rgba(255, 192, 203, 0.3);
      border: 1px solid #ffe4e1;
      font-family: 'Lora', serif;
      position: relative;
      z-index: 2; /* Above gradient */
      margin-top: 40px;
      margin-bottom: 220px; /* Ensure space for gradient and icons */
    }

    .user-list-title {
      font-family: 'Playfair Display', serif;
      color: #ff6f91;
      font-size: 2.5rem;
      text-align: center;
      margin-bottom: 30px;
      text-shadow: 1px 1px 3px rgba(255, 105, 145, 0.2);
      position: relative;
    }

    .user-list-title::after {
      content: '👥';
      position: absolute;
      font-size: 1.5rem;
      margin-left: 10px;
      color: #ff6f91;
    }

    .user-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .user-item {
      display: flex;
      justify-content: space-between;
      background: #fff7fa;
      border: 1px solid #ffe4e1;
      border-radius: 12px;
      padding: 15px 20px;
      margin-bottom: 15px;
      box-shadow: 0 3px 10px rgba(255, 182, 193, 0.1);
      transition: transform 0.2s ease;
    }

    .user-item:hover {
      transform: scale(1.02);
      box-shadow: 0 5px 15px rgba(255, 182, 193, 0.2);
    }

    .user-name {
      font-weight: 600;
      color: #ff6f91;
    }

    .user-info {
      font-style: italic;
      color: #777;
    }

    .user-role {
      font-weight: 500;
      color: #b46bff;
    }

    /* Icon Footer Styling */
    .icon-footer {
      position: absolute;
      bottom: 10px;
      left: 0;
      width: 100%;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 30px;
      z-index: 0; /* Behind form, below gradient */
      padding: 0 20px;
    }

    .icon-footer .icon {
      color: #f8bbd0; /* Baby pink */
      font-size: 35px;
      opacity: 0.85;
      transition: transform 0.3s ease;
    }

    .icon-footer .icon:hover {
      transform: scale(1.2);
    }
  </style>
</body>
</html>
</file>

<file path="src/app/features/user/components/user-list/user-list.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserListComponent } from './user-list.component';

describe('UserListComponent', () => {
  let component: UserListComponent;
  let fixture: ComponentFixture<UserListComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [UserListComponent]
    });
    fixture = TestBed.createComponent(UserListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/features/user/components/user-list/user-list.component.ts">
import { Component, OnInit } from '@angular/core';
import { UserService } from '../../services/user.service';
import { User } from '../../models/user';

@Component({
  selector: 'app-user-list',
  templateUrl: './user-list.component.html',
  styleUrls: ['./user-list.component.css']
})
export class UserListComponent implements OnInit {
  users: User[] = [];

  constructor(private userService: UserService) {}

  ngOnInit(): void {
    this.userService.getAllUsers().subscribe({
      next: (users) => this.users = users,
      error: (error) => {
        console.error('Erreur utilisateurs:', error);
        alert('Erreur ou accès refusé');
      }
    });
  }
}
</file>

<file path="src/app/features/user/models/category.ts">
export interface Category {
  id?: number;
  name: string;
  description: string;
  parent?: Category;
  createdAt?: string;
  updatedAt?: string;
}
</file>

<file path="src/app/features/user/models/page.ts">
export interface Page<T> {
  content: T[];
  totalElements: number;
  totalPages: number;
  number: number;
  size: number;
}
</file>

<file path="src/app/features/user/models/user.ts">
export interface User {
    _id?: string; // ID MongoDB
    id?: number;  // ID auto-incrémenté
    name: string;
    email: string;
    password?: string; // Optionnel côté client après inscription/connexion
    role: 'Client' | 'Admin';
    adresse?: string;
    telephone?: string;
  }
</file>

<file path="src/app/features/user/services/auth.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/features/user/services/auth.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { User } from '../models/user';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = 'http://localhost:3000/api/auth';
  private loggedInSubject = new BehaviorSubject<boolean>(this.isLoggedIn());

  constructor(private http: HttpClient) {}

  register(user: User): Observable<{ token: string }> {
    return this.http.post<{ token: string }>(`${this.apiUrl}/register`, user);
  }

  login(credentials: { email: string; password: string }): Observable<{ token: string }> {
    return this.http.post<{ token: string }>(`${this.apiUrl}/login`, credentials);
  }

  setToken(token: string): void {
    localStorage.setItem('token', token);
    this.loggedInSubject.next(true);
  }

  getToken(): string | null {
    return localStorage.getItem('token');
  }

  isLoggedIn(): boolean {
    return !!this.getToken();
  }

  logout(): void {
    localStorage.removeItem('token');
    this.loggedInSubject.next(false);
  }

  getAuthHeaders(): HttpHeaders {
    const token = this.getToken();
    return new HttpHeaders().set('Authorization', `Bearer ${token}`);
  }

  // Observable pour écouter les changements d’état
  getLoggedInStatus(): Observable<boolean> {
    return this.loggedInSubject.asObservable();
  }
}
</file>

<file path="src/app/features/user/services/user.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { UserService } from './user.service';

describe('UserService', () => {
  let service: UserService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UserService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/features/user/services/user.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { User } from '../models/user';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class UserService {
  private apiUrl = 'http://localhost:3000/users';

  constructor(private http: HttpClient, private authService: AuthService) {}

  // Récupérer tous les utilisateurs
  getAllUsers(): Observable<User[]> {
    const headers = this.getAuthHeaders();
    return this.http.get<User[]>(this.apiUrl, { headers });
  }

  // Récupérer le profil de l’utilisateur connecté
  getProfile(): Observable<User> {
    const headers = this.getAuthHeaders();
    return this.http.get<User>(`${this.apiUrl}/profile`, { headers });
  }

  // Générer les headers avec le token
  private getAuthHeaders(): HttpHeaders {
    const token = this.authService.getToken();
    return new HttpHeaders().set('Authorization', `Bearer ${token}`);
  }
}
</file>

<file path="src/app/features/user/user-routing.module.ts">
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { UserListComponent } from './components/user-list/user-list.component';
import { ProfileComponent } from './components/profile/profile.component';
import { LoginComponent } from './components/login/login.component';
import { RegisterComponent } from './components/register/register.component';


const routes: Routes = [
  { path: 'register', component: RegisterComponent },
  { path: 'login', component: LoginComponent },
  { path: 'profile', component: ProfileComponent },
  { path: 'users', component: UserListComponent },
  { path: '', redirectTo: '/login', pathMatch: 'full' }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class UserRoutingModule {}
</file>

<file path="src/app/features/user/user.module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router'; // ✅ Import nécessaire pour routerLink

import { UserRoutingModule } from './user-routing.module';

// Components


// Angular Material Modules
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatButtonModule } from '@angular/material/button';
import { MatTableModule } from '@angular/material/table';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatIconModule } from '@angular/material/icon';
import { MatOptionModule } from '@angular/material/core';
import { UserListComponent } from './components/user-list/user-list.component';
import { ProfileComponent } from './components/profile/profile.component';
import { LoginComponent } from './components/login/login.component';
import { RegisterComponent } from './components/register/register.component';
@NgModule({
  declarations: [
    UserListComponent,
    ProfileComponent,
    LoginComponent,
    RegisterComponent
  ],
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    RouterModule, // ✅ Ajout ici
    UserRoutingModule,

    // Angular Material
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatButtonModule,
    MatTableModule,
    MatPaginatorModule,
    MatIconModule,
    MatOptionModule
  ]
})
export class UserModule {}
</file>

<file path="src/app/shared/navbar/navbar.component.css">
/* Feminine Navbar Styles */
mat-toolbar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 24px;
  background: linear-gradient(to right, #f8bbd0, #f48fb1, #f06292);
  color: white;
  font-family: 'Poppins', 'Roboto', sans-serif;
  box-shadow: 0 6px 12px rgba(233, 30, 99, 0.2);
  position: sticky;
  top: 0;
  z-index: 1000;
  animation: fadeSlideDown 0.6s ease-out;
}

/* Logo */
mat-toolbar img.logo {
  height: 48px;
  border-radius: 50%;
  box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.4);
  transition: transform 0.3s ease;
}

mat-toolbar img.logo:hover {
  transform: scale(1.1);
}

/* Navigation Links */
a[mat-button], button[mat-button] {
  margin: 0 10px;
  font-weight: 500;
  color: white;
  position: relative;
  text-transform: capitalize;
  font-size: 16px;
  transition: color 0.3s ease;
  text-decoration: none !important;
}

a[mat-button]::after, button[mat-button]::after {
  content: "";
  position: absolute;
  left: 0;
  bottom: -4px;
  width: 0%;
  height: 2px;
  background: linear-gradient(to right, #ffe3ec, #f8bbd0, #f48fb1);
  border-radius: 1px;
  transition: width 0.3s ease;
}

a[mat-button]:hover::after, button[mat-button]:hover::after {
  width: 100%;
}

a[mat-button]:hover, button[mat-button]:hover {
  color: #fffde7;
}

/* Icons */
mat-icon {
  margin-right: 6px;
  vertical-align: middle;
  font-size: 20px;
}

/* Spacer to push items to the right */
.spacer {
  flex: 1 1 auto;
}

/* Animation */
@keyframes fadeSlideDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Optional: Add blur background on scroll effect */
mat-toolbar::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  backdrop-filter: blur(8px);
  z-index: -1;
}
</file>

<file path="src/app/shared/navbar/navbar.component.html">
<mat-toolbar>
    <img src="../../assets/images/logofemistore.png" alt="FemiStore Logo" class="logo" style="height: 50px;">
    <span class="spacer"></span>
  
    <a mat-button routerLink="/categoris/">
      <mat-icon>home</mat-icon> Home
    </a>
  
  
  
    <a mat-button routerLink="/inventory" routerLinkActive="active" [routerLinkActiveOptions]="{ exact: false }">
      <mat-icon>inventory_2</mat-icon> Inventory
    </a>
  
    <a mat-button routerLink="/products" routerLinkActive="active" [routerLinkActiveOptions]="{ exact: false }">
      <mat-icon>shopping_bag</mat-icon> Products
    </a>
    <a mat-button routerLink="/commande" routerLinkActive="active" [routerLinkActiveOptions]="{ exact: false }">
      <mat-icon>shopping_bag</mat-icon> Commands
    </a>
    <a mat-button routerLink="admin/reviews" routerLinkActive="active" [routerLinkActiveOptions]="{ exact: false }">
      <mat-icon>feedback</mat-icon> Feedbacks
    </a>
  
    <a mat-button routerLink="/users/profile" *ngIf="isLoggedIn">
      <mat-icon>account_circle</mat-icon> Profil
    </a>
  
    <a mat-button routerLink="/users/users" *ngIf="isLoggedIn">
      <mat-icon>group</mat-icon> Utilisateurs
    </a>
    <a mat-button routerLink="/users/register" *ngIf="!isLoggedIn">
        <mat-icon>person_add</mat-icon> Inscription
      </a>
    
      <a mat-button routerLink="/users/login" *ngIf="!isLoggedIn">
        <mat-icon>login</mat-icon> Connexion
      </a>
    <button mat-button (click)="logout()" *ngIf="isLoggedIn">
      <mat-icon>logout</mat-icon> Déconnexion
    </button>
  </mat-toolbar>
</file>

<file path="src/app/shared/navbar/navbar.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NavbarComponent } from './navbar.component';

describe('NavbarComponent', () => {
  let component: NavbarComponent;
  let fixture: ComponentFixture<NavbarComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [NavbarComponent]
    });
    fixture = TestBed.createComponent(NavbarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/shared/navbar/navbar.component.ts">
import { Component, OnInit } from '@angular/core';
import { AuthService } from '../../features/user/services/auth.service';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.css']
})
export class NavbarComponent implements OnInit {
  isLoggedIn = false;

  constructor(private authService: AuthService) {}

  ngOnInit(): void {
    // S’abonner à l’état de connexion
    this.authService.getLoggedInStatus().subscribe(status => {
      this.isLoggedIn = status;
    });
  }

  logout(): void {
    this.authService.logout();
    window.location.href = '/users/login'; // ou utilise Router.navigate
  }
}
</file>

<file path="src/app/shared/pipes/abs.pipe.spec.ts">
import { AbsPipe } from './abs.pipe';

describe('AbsPipe', () => {
  it('create an instance', () => {
    const pipe = new AbsPipe();
    expect(pipe).toBeTruthy();
  });
});
</file>

<file path="src/app/shared/pipes/abs.pipe.ts">
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'abs'
})
export class AbsPipe implements PipeTransform {

  transform(value: unknown, ...args: unknown[]): unknown {
    return null;
  }

}
</file>

<file path="src/app/shared/shared.module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NavbarComponent } from './navbar/navbar.component';
import { RouterModule } from '@angular/router';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';

@NgModule({
  declarations: [],
  imports: [
    CommonModule,
    RouterModule,
    MatToolbarModule,
    MatIconModule,
    MatButtonModule
  ],
  exports: [] // <-- à importer ailleurs
})
export class SharedModule { }
</file>

<file path="src/environments/environment.prod.ts">
export const environment = {
  production: true,
  apiUrl: "/api",
  categoryServiceUrl: "/api",
  productServiceUrl: "/prd",
  inventoryServiceUrl: "/api",
  userServiceUrl: "/api",
  reviewServiceUrl: "/api",
  orderServiceUrl: "/api",
}
</file>

<file path="src/environments/environment.ts">
export const environment = {
  production: false,
  apiUrl: "http://localhost:8080/api",
  categoryServiceUrl: "http://localhost:8488/api",
  productServiceUrl: "http://localhost:8083/prd/product",
  inventoryServiceUrl: "http://localhost:8084/femi",
  userServiceUrl: "http://localhost:8888/api",
  reviewServiceUrl: "http://localhost:8085/api",
  orderServiceUrl: "http://localhost:3000/api",
}
</file>

<file path="src/index.html">
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>FemistoreFrontend</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body class="mat-typography">
  <app-root></app-root>
</body>
</html>
</file>

<file path="src/main.ts">
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';


platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));
</file>

<file path="src/styles.css">
/* You can add global styles to this file, and also import other style files */
/* You can add global styles to this file, and also import other style files */
@import "~bootstrap/dist/css/bootstrap.min.css";
@import "~bootstrap-icons/font/bootstrap-icons.css";

/* styles.css */
@import './app/features/inventory/inventory-theme.css';

.table-responsive {
  overflow-x: auto;
}

.badge {
  font-size: 0.8rem;
  padding: 0.35em 0.65em;
}
</file>

<file path="tsconfig.app.json">
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}
</file>

<file path="tsconfig.json">
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": [
      "ES2022",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}
</file>

<file path="tsconfig.spec.json">
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
</file>

</files>
